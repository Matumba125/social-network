{"version":3,"sources":["Components/Profile/UserPosts/UserPosts.module.css","Components/Profile/ProfileInfo/ProfileSettings/ProfileSettings.module.css","Components/UsersPage/UsersPage.module.css","Components/Profile/Profile.module.css","api/chat-api.ts","redux/chatReducer.ts","Components/Header/Header.module.css","Components/common/Preloader/Preloader.module.css","Components/Profile/UserPosts/Post/Post.module.css","Components/common/ErrorPage/ErrorPage.module.css","redux/Selectors.ts","Components/Profile/ProfileInfo/ProfileInfo.module.css","reportWebVitals.ts","api/api.ts","redux/profilleReducer.ts","assets/img/dimych.jpg","assets/img/andrey.jpg","assets/img/sveta.jpg","redux/dialogsReducer.ts","redux/usersReducer.ts","redux/authReducer.ts","redux/reduxStore.ts","Components/Navbars/LeftNavbar/LeftNavbar.tsx","Components/Header/HeaderComponent.tsx","Components/common/Preloader/Preloader.tsx","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileSettings/ProfileSettings.tsx","Components/Profile/ProfileInfo/ProfilePhotoChange/ProfilePhotoChange.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/UserPosts/Post/Post.tsx","Components/Profile/UserPosts/UserPosts.tsx","Components/Profile/Profile.tsx","Components/common/ErrorPage/ErrorPage.tsx","Components/Music/Music.tsx","Components/News/News.tsx","Components/Settings/Settings.tsx","Components/UsersPage/UserPage/UserPage.tsx","Components/UsersPage/UsersPage.tsx","Components/RoutingComponent/RoutingComponent.tsx","HOC/withSuspense.tsx","Components/Login/Login.tsx","App.tsx","index.tsx","Components/Login/Login.module.css","Components/UsersPage/UserPage/UserPage.module.css"],"names":["module","exports","ws","subscribers","statusNotify","status","forEach","s","closeHandler","console","log","setTimeout","createChannel","openHandler","messageHandler","e","newMessages","JSON","parse","data","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","event","callback","push","filter","message","send","initialState","messages","isReady","_newMessageHandler","newMessageHandler","dispatch","type","setMessages","_statusHandler","statusHandler","startChat","a","stopChat","sendMessage","chatReducer","state","action","getIsAuth","auth","isAuth","getIsInitialized","isInitialized","getCurrentUserId","id","getProfilePage","profilePage","getUserId","profile","userId","getIsLoading","isLoading","getUsersData","users","getTotalUsersCount","totalCount","getPageSize","pageSize","getCurrentPage","currentPage","getFollowingUsers","followingUsers","getUsersFetchingStatus","isFetching","getUserPostsData","postsData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","UsersAPI","get","response","FollowAPI","delete","post","ProfileAPI","put","image","formData","FormData","append","AuthorizeAPI","ADD_POST","SET_STATUS","SET_USER_PROFILE","photos","large","small","fullName","aboutMe","v1","postContent","postLikes","setLoadingStatus","setStatus","newText","getProfile","res","getStatus","updateStatus","newStatus","resultCode","updateProfile","store","getState","updatedProfile","userID","lookingForAJob","lookingForAJobDescription","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","updatePhoto","profileReducer","newPost","newPostText","dialogsData","userName","avatar","dimych","andrey","sveta","dialogsReducer","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","CHANGE_FETCHING_STATUS","CHANGE_RESPONSE_STATUS","responseInProgress","setCurrentPage","changeFetchingStatus","changeResponseStatus","getUsers","items","followUnfollow","following","unfollow","follow","usersReducer","map","m","followed","email","login","authUser","setUserData","finally","authReducer","rootReducer","combineReducers","dialogsPage","chat","createStore","applyMiddleware","thunkMiddleware","Sider","Layout","LeftNavbar","useSelector","currentUserId","useState","collapsed","setCollapsed","style","visibility","collapsible","onCollapse","theme","mode","Item","icon","NotificationOutlined","to","UserOutlined","MailOutlined","TeamOutlined","CustomerServiceOutlined","SettingOutlined","HeaderComponent","React","memo","setAvatar","useDispatch","ava","useEffect","onClickHandler","useCallback","title","extra","className","userStatus","backgroundColor","src","onClick","color","Preloader","spinWrapper","size","ProfileStatus","isProfileBelongsToUser","editMode","setEditMode","setNewStatus","onDoubleClickHandler","height","autoFocus","onBlur","onKeyPress","key","onChange","currentTarget","value","onDoubleClick","EditOutlined","ProfileSettings","props","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","resetForm","onSubmitClick","modalWrapper","visible","onOk","handleSubmit","onCancel","onCancelClick","form","placeholder","getFieldProps","checkbox","checked","ProfilePhotoChange","selectPhoto","ProfileInfo","modalStatus","setModalStatus","changePhoto","setChangePhoto","setImage","onPhotoSubmitClick","target","files","infoContainer","mainInfo","avaWrapper","alt","description","workStatus","userDataContainer","editButton","aboutCard","href","socialLink","GithubOutlined","FacebookOutlined","InstagramOutlined","TwitterOutlined","YoutubeOutlined","GlobalOutlined","ShareAltOutlined","Post","userImage","likes","setLikes","dislikes","setDislikes","setAction","actions","createElement","LikeFilled","LikeOutlined","DislikeFilled","DislikeOutlined","item","author","fontWeight","content","UserPosts","postData","isCurrentProfileBelongsToUser","postsElement","postsWrapper","userNewPosts","formWrapper","shiftKey","preventDefault","submitForm","textArea","autoSize","minRows","submitBtn","Profile","params","useParams","refreshProfile","profileWrapper","infoWrapper","ErrorPage","errorWrapper","subTitle","Music","News","Settings","UserPage","user","descriptionWrapper","linksWrapper","nameLink","name","disabled","some","followBtn","ghost","UsersPage","usersPage","usersList","pagination","current","total","responsive","pageSizeOptions","page","WrappedComponent","SuspendedDialogs","lazy","Suspense","fallback","RoutingComponent","path","render","component","Login","password","rememberMe","validate","errors","test","loginWrapper","mainWrapper","inputItem","errorMessage","Content","Footer","App","minHeight","margin","textAlign","marginRight","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c4f7e96a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsWrapper\":\"UserPosts_postsWrapper__1dPhF\",\"userNewPosts\":\"UserPosts_userNewPosts__2GPsv\",\"textArea\":\"UserPosts_textArea__RsdFL\",\"formWrapper\":\"UserPosts_formWrapper__wg4ni\",\"submitBtn\":\"UserPosts_submitBtn__asYzM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWrapper\":\"ProfileSettings_modalWrapper__1RmsJ\",\"form\":\"ProfileSettings_form__1rSQL\",\"checkbox\":\"ProfileSettings_checkbox__9ERdH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPage\":\"UsersPage_usersPage__2_3I7\",\"usersList\":\"UsersPage_usersList__3e0rU\",\"selectedPage\":\"UsersPage_selectedPage__2Cul_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"Profile_profileWrapper__3-ZWn\",\"infoWrapper\":\"Profile_infoWrapper__1u26N\"};","let subscribers = {\r\n    'messagesReceived': [] as MessageReceivedSubscriberType[],\r\n    'statusChanged': [] as StatusChangedSubscriberType []\r\n}\r\n\r\nlet ws: WebSocket\r\n\r\nconst statusNotify = (status: boolean) => {\r\n    subscribers['statusChanged'].forEach(s => s(status))\r\n}\r\n\r\nconst closeHandler = () => {\r\n    console.log('closed')\r\n    statusNotify(false)\r\n    setTimeout(createChannel, 3000);\r\n};\r\n\r\nconst openHandler = () => {\r\n    statusNotify(true)\r\n};\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data);\r\n    subscribers['messagesReceived'].forEach(s => s(newMessages))\r\n\r\n};\r\n\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n    statusNotify(false)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers['messagesReceived'] = []\r\n        subscribers['statusChanged'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(event: EventsNames, callback: CallbacksType) {\r\n        // @ts-ignore\r\n        subscribers[event].push(callback)\r\n    },\r\n    unsubscribe(event: EventsNames, callback: CallbacksType) {\r\n        // @ts-ignore\r\n        subscribers[event] = subscribers[event].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws.send(message)\r\n    }\r\n}\r\n\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: string\r\n    userName: string\r\n    first?: boolean\r\n    last?: boolean\r\n    unique?: boolean\r\n    userMessage?: boolean\r\n}\r\n\r\ntype MessageReceivedSubscriberType = (messages: ChatMessageType[]) => void\r\ntype StatusChangedSubscriberType = (isReady: boolean) => void\r\n\r\ntype CallbacksType = MessageReceivedSubscriberType | StatusChangedSubscriberType\r\n\r\ntype EventsNames = 'messagesReceived' | 'statusChanged'\r\n","import {ActionTypes} from \"./reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {chatAPI, ChatMessageType} from \"../api/chat-api\";\r\n\r\n\r\ntype ChatInitialStateType = {\r\n    messages: ChatMessageType[]\r\n    isReady: boolean\r\n}\r\n\r\nconst initialState: ChatInitialStateType = {\r\n    messages: [],\r\n    isReady: false\r\n}\r\n\r\nconst chatReducer = (state: ChatInitialStateType = initialState,\r\n                     action: ActionTypes): ChatInitialStateType => {\r\n    switch (action.type) {\r\n        case 'chat/SET-MESSAGES':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.messages]\r\n            }\r\n        case 'chat/SET-IS-READY':\r\n            return {\r\n                ...state,\r\n                isReady: action.isReady\r\n            }\r\n        case \"chat/STOP-CHAT\":\r\n            return {\r\n                ...state,\r\n                messages: []\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setMessages = (messages: ChatMessageType[]) => ({\r\n    type: 'chat/SET-MESSAGES',\r\n    messages\r\n} as const)\r\nexport const setIsReady = (isReady: boolean) => ({\r\n    type: 'chat/SET-IS-READY',\r\n    isReady\r\n} as const)\r\n\r\nexport const stopChatAC = () => ({\r\n    type: 'chat/STOP-CHAT'\r\n} as const)\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageType[]) => void) | null = null\r\nconst newMessageHandler = (dispatch: Dispatch<ActionTypes>) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(setMessages(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusHandler: ((status: boolean) => void) | null = null\r\nconst statusHandler = (dispatch: Dispatch<ActionTypes>) => {\r\n    if (_statusHandler === null) {\r\n        _statusHandler = (status) => {\r\n            dispatch(setIsReady(status))\r\n        }\r\n    }\r\n    return _statusHandler\r\n}\r\n\r\n\r\nexport const startChat = () => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        chatAPI.start()\r\n        chatAPI.subscribe('messagesReceived', newMessageHandler(dispatch));\r\n        chatAPI.subscribe('statusChanged', statusHandler(dispatch));\r\n    }\r\n}\r\n\r\nexport const stopChat = () => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        chatAPI.unsubscribe('messagesReceived', newMessageHandler(dispatch));\r\n        chatAPI.unsubscribe('statusChanged', statusHandler(dispatch));\r\n        dispatch(stopChatAC())\r\n        chatAPI.stop()\r\n    }\r\n}\r\n\r\nexport const sendMessage = (message: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        chatAPI.sendMessage(message)\r\n    }\r\n}\r\n\r\nexport default chatReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userStatus\":\"Header_userStatus__2PMWF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinWrapper\":\"Preloader_spinWrapper__utyQX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Post_header__1tqHL\",\"item\":\"Post_item__24f3h\",\"likes\":\"Post_likes__1RzjT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorWrapper\":\"ErrorPage_errorWrapper__YpN9I\"};","import {AppStateType} from \"./reduxStore\";\r\nimport {PostType, ProfileInitialStateType} from \"./profilleReducer\";\r\nimport {UserType} from \"./usersReducer\";\r\nimport {DialogsInitialStateType} from \"./dialogsReducer\";\r\n\r\nexport const getIsAuth = (state: AppStateType): boolean => {\r\n    return state.auth.isAuth\r\n}\r\nexport const getIsInitialized = (state: AppStateType): boolean => {\r\n    return state.auth.isInitialized\r\n}\r\nexport const getCurrentUserId = (state: AppStateType): string => {\r\n    return state.auth.data.id\r\n}\r\n\r\nexport const getProfilePage = (state: AppStateType): ProfileInitialStateType => {\r\n    return state.profilePage\r\n}\r\nexport const getUserId = (state: AppStateType): string => {\r\n    return state.profilePage.profile.userId\r\n}\r\n\r\nexport const getIsLoading = (state: AppStateType): boolean => {\r\n    return state.profilePage.isLoading\r\n}\r\n\r\nexport const getUsersData = (state: AppStateType): Array<UserType> => {\r\n    return state.users.users\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType): number => {\r\n    return state.users.totalCount\r\n}\r\nexport const getPageSize = (state: AppStateType): number => {\r\n    return state.users.pageSize\r\n}\r\nexport const getCurrentPage = (state: AppStateType): number => {\r\n    return state.users.currentPage\r\n}\r\nexport const getFollowingUsers = (state: AppStateType): string[] => {\r\n    return state.users.followingUsers\r\n}\r\n\r\nexport const getUsersFetchingStatus = (state: AppStateType): boolean => {\r\n    return state.users.isFetching\r\n}\r\n\r\nexport const getDialogsPageData = (state: AppStateType): DialogsInitialStateType => {\r\n    return state.dialogsPage\r\n}\r\nexport const getUserPostsData = (state: AppStateType): PostType[] => {\r\n    return state.profilePage.postsData\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoContainer\":\"ProfileInfo_infoContainer__225Sp\",\"mainInfo\":\"ProfileInfo_mainInfo__2kUCl\",\"description\":\"ProfileInfo_description__1VwtT\",\"fullName\":\"ProfileInfo_fullName__3V4m3\",\"avaWrapper\":\"ProfileInfo_avaWrapper__3WCOi\",\"workStatus\":\"ProfileInfo_workStatus__26r-F\",\"userDataContainer\":\"ProfileInfo_userDataContainer__1q0FO\",\"socialLink\":\"ProfileInfo_socialLink__34X4A\",\"editButton\":\"ProfileInfo_editButton__1Z8aA\",\"aboutCard\":\"ProfileInfo_aboutCard__1MNtW\"};","import {ReportHandler} from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from \"axios\";\r\nimport {FormikErrorType} from \"../Components/Login/Login\";\r\nimport {ProfileUpdatingType} from \"../redux/profilleReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'd5ee63b2-b8ea-4e76-b89c-c960812b3f51'\r\n    }\r\n});\r\n\r\nexport const UsersAPI = {\r\n    getUsers: (currentPage: number, pageSize: number) => {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const FollowAPI = {\r\n    unfollowUser: (id: string) => {\r\n        return instance.delete(`follow/${id}`,).then(response => response.data)\r\n    },\r\n    followUser: (id: string) => {\r\n        return instance.post(`follow/${id}`).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfileInfo: (userId: string) => {\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getStatus: (userId: string) => {\r\n        return instance.get(`profile/status/${userId}`);\r\n    },\r\n    updateProfile: (data: ProfileUpdatingType) => {\r\n        return instance.put(`profile`, data)\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return instance.put(`profile/status`, {\r\n            status: status\r\n        })\r\n    },\r\n    updatePhoto: (image: File) => {\r\n        const formData = new FormData()\r\n        //@ts-ignore\r\n        formData.append('image', image)\r\n        return instance.put('profile/photo', formData,\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const AuthorizeAPI = {\r\n    authorizeUser: () => {\r\n        return instance.get(`auth/me`).then(response => response.data)\r\n    },\r\n\r\n    loginUser: (formData: FormikErrorType) => {\r\n        return instance.post('auth/login', formData)\r\n    },\r\n    logoutUser: () => {\r\n        return instance.delete('auth/login')\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport store, {ActionTypes} from \"./reduxStore\";\r\nimport {PhotosType} from \"./usersReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileAPI} from \"../api/api\";\r\n\r\n\r\nexport type PostType = {\r\n    id: string\r\n    postContent: string\r\n    postLikes: number\r\n}\r\n\r\ntype ContactsType = {\r\n    facebook?: string\r\n    website?: string\r\n    vk?: string\r\n    twitter?: string\r\n    instagram?: string\r\n    youtube?: string\r\n    github?: string\r\n    mainLink?: string\r\n}\r\n\r\n\r\ntype AdditionalUpdatingType = {\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    fullName: string\r\n    aboutMe: string\r\n}\r\n\r\nexport type ProfileUpdatingType = ContactsType & AdditionalUpdatingType\r\n\r\n\r\nexport type ProfileDataType = {\r\n    aboutMe: string\r\n    contacts?: ContactsType\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    userId: string\r\n    photos: PhotosType\r\n    fullName: string\r\n}\r\n\r\nexport type ProfileInitialStateType = {\r\n    profile: ProfileDataType\r\n    status: string\r\n    isLoading: boolean\r\n    postsData: Array<PostType>\r\n}\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_STATUS = 'SET-STATUS';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\n\r\nlet initialState: ProfileInitialStateType = {\r\n    profile: {\r\n        photos: {\r\n            large: '',\r\n            small: '',\r\n        },\r\n        fullName: '',\r\n        aboutMe: '',\r\n        userId: '',\r\n    },\r\n    status: '',\r\n    isLoading: false,\r\n    postsData: [\r\n        {\r\n            id: v1(),\r\n            postContent: \"Hello World !!!\",\r\n            postLikes: 15,\r\n\r\n        },\r\n        {\r\n            id: v1(),\r\n            postContent: \"It's my first post!!\",\r\n            postLikes: 28\r\n        }\r\n    ],\r\n}\r\n\r\nconst profileReducer = (state: ProfileInitialStateType = initialState,\r\n                        action: ActionTypes): ProfileInitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: v1(),\r\n                postContent: action.newPostText,\r\n                postLikes: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                postsData: [newPost, ...state.postsData],\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.newText\r\n            }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case \"profile/SET-LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPost = (newPostText: string) => ({\r\n    type: ADD_POST,\r\n    newPostText,\r\n} as const)\r\n\r\n\r\nexport const setUserProfile = (profile: ProfileDataType) => ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n} as const)\r\n\r\nexport const setLoadingStatus = (isLoading: boolean) => ({\r\n    type: 'profile/SET-LOADING',\r\n    isLoading\r\n} as const)\r\n\r\nexport const setStatus = (newText: string) => ({type: SET_STATUS, newText} as const)\r\n\r\nexport const getProfile = (userId: string) => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        try {\r\n            dispatch(setLoadingStatus(true))\r\n            const res = await ProfileAPI.getProfileInfo(userId)\r\n            dispatch(setUserProfile(res.data))\r\n        } finally {\r\n            dispatch(setLoadingStatus(false))\r\n        }\r\n    }\r\n}\r\nexport const getStatus = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.getStatus(userId).then(response => {\r\n            dispatch(setStatus(response.data))\r\n        });\r\n    }\r\n}\r\nexport const updateStatus = (newStatus: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.updateStatus(newStatus).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(newStatus))\r\n            }\r\n        })\r\n    };\r\n}\r\n\r\nexport const updateProfile = (data: ProfileUpdatingType) => {\r\n    const state = store.getState()\r\n    const updatedProfile = {\r\n        userID: state.profilePage.profile.userId,\r\n        lookingForAJob: data.lookingForAJob,\r\n        lookingForAJobDescription: data.lookingForAJobDescription ? data.lookingForAJobDescription : '-',\r\n        fullName: data.fullName,\r\n        aboutMe: data.aboutMe ? data.aboutMe : '-',\r\n        contacts: {\r\n            github: data.github,\r\n            vk: data.vk,\r\n            facebook: data.facebook,\r\n            instagram: data.instagram,\r\n            twitter: data.twitter,\r\n            website: data.website,\r\n            youtube: data.youtube,\r\n            mainLink: data.mainLink,\r\n        },\r\n    }\r\n    return (dispatch: Dispatch) => {\r\n        ProfileAPI.updateProfile(updatedProfile)\r\n            .then(() => {\r\n                //@ts-ignore\r\n                dispatch(getProfile(state.auth.data.id))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updatePhoto = (image: File) => {\r\n    const userId = store.getState().auth.data.id\r\n    return (dispatch: Dispatch) => {\r\n        ProfileAPI.updatePhoto(image)\r\n            .then(() => {\r\n                //@ts-ignore\r\n                dispatch(getProfile(userId))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer","export default __webpack_public_path__ + \"static/media/dimych.4cfb0ddb.jpg\";","export default __webpack_public_path__ + \"static/media/andrey.05d81a41.jpg\";","export default __webpack_public_path__ + \"static/media/sveta.2e2af972.jpg\";","import {v1} from \"uuid\";\r\nimport dimych from \"../assets/img/dimych.jpg\";\r\nimport andrey from \"../assets/img/andrey.jpg\";\r\nimport sveta from \"../assets/img/sveta.jpg\";\r\nimport {ActionTypes} from \"./reduxStore\";\r\n\r\n\r\nexport type DialogsItemPropsType = {\r\n    id: string\r\n    userName: string\r\n    avatar?: string\r\n}\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\n\r\nconst ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {id: '2', userName: \"Dimych\", avatar: dimych},\r\n        {id: v1(), userName: \"Andrey\", avatar: andrey},\r\n        {id: v1(), userName: \"Sveta\", avatar: sveta},\r\n        {id: v1(), userName: \"Sasha\"},\r\n        {id: v1(), userName: \"Viktor\"},\r\n        {id: v1(), userName: \"Valera\"}\r\n    ] as Array<DialogsItemPropsType>,\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsInitialStateType = initialState,\r\n                        action: ActionTypes): DialogsInitialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const addMessage = (newMessage: string) => ({\r\n    type: ADD_MESSAGE,\r\n    newMessage\r\n} as const)\r\n\r\n\r\nexport default dialogsReducer","import {ActionTypes} from \"./reduxStore\";\r\nimport {FollowAPI, UsersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type PhotosType = {\r\n    large?: string\r\n    small: string\r\n}\r\n\r\nexport type UserType = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n    followed: boolean\r\n    status: string\r\n    photos: PhotosType\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    responseInProgress: boolean\r\n    followingUsers: Array<string>\r\n}\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\r\nconst CHANGE_FETCHING_STATUS = 'CHANGE-FETCHING-STATUS';\r\nconst CHANGE_RESPONSE_STATUS = 'CHANGE-RESPONSE-STATUS';\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 16,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    responseInProgress: true,\r\n    followingUsers: [],\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState,\r\n                      action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(m =>\r\n                    m.id === action.id ? {...m, followed: true} : m),\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(m =>\r\n                    m.id === action.id ? {...m, followed: false} : m)\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case  SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n        case CHANGE_FETCHING_STATUS: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case CHANGE_RESPONSE_STATUS: {\r\n            return {\r\n                ...state,\r\n                followingUsers: action.responseInProgress\r\n                    ? [...state.followingUsers, action.id]\r\n                    : state.followingUsers.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const follow = (id: string) => ({\r\n    type: FOLLOW,\r\n    id\r\n} as const)\r\nexport const unfollow = (id: string) => ({\r\n    type: UNFOLLOW,\r\n    id\r\n} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({\r\n    type: SET_USERS,\r\n    users\r\n} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage\r\n} as const)\r\nexport const setTotalUsersCount = (totalCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalCount\r\n} as const)\r\nexport const changeFetchingStatus = (isFetching: boolean) => ({\r\n    type: CHANGE_FETCHING_STATUS,\r\n    isFetching\r\n} as const)\r\nexport const changeResponseStatus = (responseInProgress: boolean, id: string) => ({\r\n    type: CHANGE_RESPONSE_STATUS,\r\n    responseInProgress,\r\n    id,\r\n} as const)\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        dispatch(changeFetchingStatus(true))\r\n        try {\r\n            const data = await UsersAPI.getUsers(currentPage, pageSize)\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setCurrentPage(currentPage))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        } finally {\r\n            dispatch(changeFetchingStatus(false))\r\n        }\r\n    }\r\n}\r\n\r\nexport const followUnfollow = (id: string, following: boolean) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        dispatch(changeResponseStatus(true, id))\r\n        if (following) {\r\n            FollowAPI.unfollowUser(id)\r\n                .then(data => {\r\n                    if (data.resultCode === 0) {\r\n                        dispatch(unfollow(id))\r\n                        dispatch(changeResponseStatus(false, id))\r\n                    }\r\n                })\r\n        } else {\r\n            FollowAPI.followUser(id)\r\n                .then(data => {\r\n                    if (data.resultCode === 0) {\r\n                        dispatch(follow(id))\r\n                        dispatch(changeResponseStatus(false, id))\r\n                    }\r\n                })\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default usersReducer","import {ActionTypes} from \"./reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AuthorizeAPI} from \"../api/api\";\r\nimport {FormikErrorType} from \"../Components/Login/Login\";\r\nimport {getProfile, getStatus} from \"./profilleReducer\";\r\n\r\n\r\nexport type DataType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type AuthInitialStateType = {\r\n    data: DataType\r\n    isAuth: boolean\r\n    isInitialized: boolean\r\n}\r\n\r\nlet initialState: AuthInitialStateType = {\r\n    data: {\r\n        id: '',\r\n        email: '',\r\n        login: '',\r\n    },\r\n    isAuth: false,\r\n    isInitialized: false\r\n}\r\n\r\nconst authReducer = (state: AuthInitialStateType = initialState,\r\n                     action: ActionTypes): AuthInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-USER-DATA':\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                isAuth: true,\r\n            }\r\n        case 'USER_BEEN_LOGINED':\r\n            return {\r\n                ...state,\r\n                isAuth: true\r\n            }\r\n        case 'USER_BEEN_LOGINED_OUT':\r\n            return {\r\n                ...state,\r\n                isAuth: false\r\n            }\r\n        case 'SET-APP-INITIALIZED':\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserData = (data: DataType) => ({\r\n    type: 'SET-USER-DATA',\r\n    data\r\n} as const)\r\nexport const setAppInitialized = (isInitialized: boolean) => ({\r\n    type: 'SET-APP-INITIALIZED',\r\n    isInitialized\r\n} as const)\r\n\r\nexport const userBeenLogined = () => ({\r\n    type: 'USER_BEEN_LOGINED'\r\n} as const)\r\n\r\nexport const userBeenLoginedOut = () => ({\r\n    type: 'USER_BEEN_LOGINED_OUT'\r\n} as const)\r\n\r\n\r\nexport const authUser = () => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        AuthorizeAPI.authorizeUser().then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(setUserData(data.data))\r\n                //@ts-ignore\r\n                dispatch(getProfile(data.data.id))\r\n                // @ts-ignore\r\n                dispatch(getStatus(data.data.id))\r\n            }\r\n        })\r\n            .finally(() => {\r\n                dispatch(setAppInitialized(true))\r\n            })\r\n    }\r\n}\r\n\r\nexport const loginUser = (formData: FormikErrorType) => {\r\n    return (dispatch: Dispatch) => {\r\n        AuthorizeAPI.loginUser(formData)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(userBeenLogined())\r\n                    // @ts-ignore\r\n                    dispatch(authUser())\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const logoutUser = () => {\r\n    return (dispatch: Dispatch) => {\r\n        AuthorizeAPI.logoutUser().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(userBeenLoginedOut())\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default authReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {addPost, setLoadingStatus, setStatus, setUserProfile} from \"./profilleReducer\";\r\nimport dialogsReducer, {addMessage} from \"./dialogsReducer\";\r\nimport usersReducer, {\r\n    changeFetchingStatus,\r\n    changeResponseStatus,\r\n    follow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    unfollow\r\n} from \"./usersReducer\";\r\nimport authReducer, {setAppInitialized, setUserData, userBeenLogined, userBeenLoginedOut} from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport chatReducer, {setIsReady, setMessages, stopChatAC} from \"./chatReducer\";\r\n\r\n\r\nexport type ActionTypes =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof addMessage> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof changeFetchingStatus> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setUserData> |\r\n    ReturnType<typeof changeResponseStatus> |\r\n    ReturnType<typeof setStatus> |\r\n    ReturnType<typeof userBeenLogined> |\r\n    ReturnType<typeof userBeenLoginedOut> |\r\n    ReturnType<typeof setAppInitialized> |\r\n    ReturnType<typeof setMessages> |\r\n    ReturnType<typeof setIsReady> |\r\n    ReturnType<typeof stopChatAC> |\r\n    ReturnType<typeof setLoadingStatus>\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    chat: chatReducer,\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store","import React, {useState} from 'react';\r\nimport {Layout, Menu} from \"antd\";\r\nimport {\r\n    CustomerServiceOutlined,\r\n    MailOutlined,\r\n    NotificationOutlined,\r\n    SettingOutlined,\r\n    TeamOutlined,\r\n    UserOutlined\r\n} from \"@ant-design/icons\";\r\nimport {Link} from 'react-router-dom';\r\nimport {useSelector} from \"react-redux\";\r\nimport {getCurrentUserId, getIsAuth} from \"../../../redux/Selectors\";\r\n\r\nconst {Sider} = Layout;\r\n\r\nfunction LeftNavbar() {\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n    const currentUserId = useSelector(getCurrentUserId)\r\n\r\n    const [collapsed, setCollapsed] = useState<boolean>(true)\r\n\r\n    const onCollapse = () => {\r\n        setCollapsed(!collapsed)\r\n    }\r\n\r\n    return (\r\n        <Sider\r\n            style={{visibility: `${isAuth ? 'visible' : 'hidden'}`}}\r\n            collapsible collapsed={collapsed}\r\n            onCollapse={onCollapse}>\r\n            <Menu\r\n                /*selectedKeys={}*/\r\n                theme=\"dark\"\r\n                mode=\"inline\">\r\n                <Menu.Item\r\n                    key=\"1\"\r\n                    icon={<NotificationOutlined/>}>\r\n                    <Link to=\"/social-network/news/\">News</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<UserOutlined/>}>\r\n                    <Link to={`/social-network/profile/${currentUserId}`}>Profile</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" icon={<MailOutlined/>}>\r\n                    <Link to=\"/social-network/dialogs/\">Messages</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" icon={<TeamOutlined/>}>\r\n                    <Link to=\"/social-network/users-page\">Developers</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\" icon={<CustomerServiceOutlined/>}>\r\n                    <Link to=\"/social-network/music/\">Music</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"6\" icon={<SettingOutlined/>}>\r\n                    <Link to=\"/social-network/settings/\">Settings</Link>\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Sider>\r\n    );\r\n}\r\n\r\nexport default LeftNavbar;","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {logoutUser} from \"../../redux/authReducer\";\r\nimport {Avatar, Button, PageHeader} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport style from './Header.module.css'\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\nexport const HeaderComponent = React.memo(() => {\r\n\r\n        const [avatar, setAvatar] = useState<string>('')\r\n\r\n        const dispatch = useDispatch()\r\n        const isAuth = useSelector<AppStateType>(state => state.auth.isAuth)\r\n        const login = useSelector<AppStateType>(state => state.auth.data.login)\r\n        const ava = useSelector<AppStateType, string>(state => state.profilePage.profile.photos.small)\r\n\r\n        useEffect(() => {\r\n            if (ava) {\r\n                setAvatar(ava)\r\n            }\r\n        }, [isAuth, login, ava])\r\n\r\n\r\n        const onClickHandler = useCallback(() => {\r\n            dispatch(logoutUser())\r\n        }, [dispatch])\r\n\r\n        return (\r\n            <PageHeader title={'Social Network'} extra={\r\n                isAuth ?\r\n                    <div className={style.userStatus}>\r\n                        <NavLink to=\"/social-network/profile\">\r\n                            <Avatar\r\n                                style={{backgroundColor: '#87d068'}}\r\n                                src={avatar && avatar}\r\n                                icon={!avatar && <UserOutlined/>}/>\r\n                            {login}\r\n                        </NavLink>\r\n                        <Button onClick={onClickHandler}>Log Out</Button>\r\n                    </div>\r\n                    : <NavLink to=\"/social-network/login\">\r\n                        <Button color=\"primary\">Login</Button>\r\n                    </NavLink>\r\n            }/>\r\n        )\r\n    }\r\n)","import {Spin} from 'antd';\r\nimport React from 'react';\r\nimport style from \"./Preloader.module.css\";\r\n\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className={style.spinWrapper}>\r\n            <Spin size={\"large\"}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateStatus} from \"../../../../redux/profilleReducer\";\r\nimport {Button, Input} from \"antd\";\r\nimport {EditOutlined} from \"@ant-design/icons\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    isProfileBelongsToUser: boolean\r\n}\r\n\r\nexport const ProfileStatus = React.memo(({status, isProfileBelongsToUser, ...restProps}: ProfileStatusPropsType) => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const [editMode, setEditMode] = useState<boolean>(false)\r\n        const [newStatus, setNewStatus] = useState<string>(status)\r\n\r\n        const onDoubleClickHandler = () => {\r\n            if (isProfileBelongsToUser) {\r\n                setEditMode(true)\r\n                setNewStatus(status)\r\n            }\r\n        }\r\n\r\n        const onBlurHandler = () => {\r\n            setEditMode(false)\r\n            dispatch(updateStatus(newStatus))\r\n        }\r\n\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(false)\r\n                dispatch(updateStatus(newStatus))\r\n            }\r\n        }\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setNewStatus(e.currentTarget.value)\r\n        }\r\n\r\n        return (\r\n            <div style={{height: '32px'}}>\r\n                {!editMode ?\r\n                    <div>\r\n                        <span onDoubleClick={onDoubleClickHandler}>{status ? status : '-----'}</span>\r\n                        {isProfileBelongsToUser &&\r\n                        <Button\r\n                            type={'text'}\r\n                            icon={<EditOutlined/>}\r\n                            onClick={onDoubleClickHandler}/>}\r\n                    </div> :\r\n                    <Input autoFocus={true}\r\n                           onBlur={onBlurHandler}\r\n                           onKeyPress={onKeyPressHandler}\r\n                           onChange={onChangeHandler}\r\n                           value={newStatus}>\r\n                    </Input>\r\n                }\r\n            </div>\r\n        );\r\n\r\n    }\r\n)","import Modal from 'antd/lib/modal/Modal';\r\nimport React from 'react';\r\nimport {ProfileInitialStateType, updateProfile} from \"../../../../redux/profilleReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Checkbox, Input} from \"antd\";\r\nimport style from './ProfileSettings.module.css'\r\n\r\ntype ProfileSettingsPropsType = {\r\n    visible: boolean\r\n    onCancelClick: () => void\r\n    onSubmitClick: () => void\r\n    profile: ProfileInitialStateType\r\n}\r\n\r\nconst ProfileSettings: React.FC<ProfileSettingsPropsType> = props => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            fullName: props.profile.profile.fullName,\r\n            lookingForAJobDescription: props.profile.profile.lookingForAJobDescription === '-' ? '' : props.profile.profile.lookingForAJobDescription,\r\n            lookingForAJob: props.profile.profile.lookingForAJob,\r\n            aboutMe: props.profile.profile.aboutMe === '-' ? '' : props.profile.profile.aboutMe,\r\n            github: props.profile.profile.contacts?.github,\r\n            vk: props.profile.profile.contacts?.vk,\r\n            facebook: props.profile.profile.contacts?.facebook,\r\n            instagram: props.profile.profile.contacts?.instagram,\r\n            twitter: props.profile.profile.contacts?.twitter,\r\n            website: props.profile.profile.contacts?.website,\r\n            youtube: props.profile.profile.contacts?.youtube,\r\n            mainLink: props.profile.profile.contacts?.mainLink,\r\n        },\r\n        onSubmit: async (values) => {\r\n            formik.resetForm();\r\n            await dispatch(updateProfile(values));\r\n            props.onSubmitClick()\r\n        },\r\n    })\r\n\r\n    const submitForm = () => {\r\n        formik.handleSubmit()\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            className={style.modalWrapper}\r\n            title={'Profile settings'}\r\n            visible={props.visible}\r\n            onOk={submitForm}\r\n            onCancel={props.onCancelClick}>\r\n            <form className={style.form}>\r\n                <div>\r\n                    <h4>Full Name</h4>\r\n                    <Input\r\n                        placeholder={'Full Name'}\r\n                        {...formik.getFieldProps('fullName')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>About Me</h4>\r\n                    <Input\r\n                        placeholder={'About Me'}\r\n                        {...formik.getFieldProps('aboutMe')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Additional information for employers</h4>\r\n                    <Input\r\n                        placeholder={'Additional information for employers'}\r\n                        {...formik.getFieldProps('lookingForAJobDescription')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>GitHub</h4>\r\n                    <Input\r\n                        placeholder={'GitHub'}\r\n                        {...formik.getFieldProps('github')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>VK</h4>\r\n                    <Input\r\n                        placeholder={'VK'}\r\n                        {...formik.getFieldProps('vk')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Facebook</h4>\r\n                    <Input\r\n                        placeholder={'Facebook'}\r\n                        {...formik.getFieldProps('facebook')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Instagram</h4>\r\n                    <Input\r\n                        placeholder={'Instagram'}\r\n                        {...formik.getFieldProps('instagram')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Twitter</h4>\r\n                    <Input\r\n                        placeholder={'Twitter'}\r\n                        {...formik.getFieldProps('twitter')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Website</h4>\r\n                    <Input\r\n                        placeholder={'Website'}\r\n                        {...formik.getFieldProps('website')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>YouTube</h4>\r\n                    <Input\r\n                        placeholder={'YouTube'}\r\n                        {...formik.getFieldProps('youtube')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Main Link</h4>\r\n                    <Input\r\n                        placeholder={'Main Link'}\r\n                        {...formik.getFieldProps('mainLink')}\r\n                    />\r\n                </div>\r\n                <Checkbox\r\n                    className={style.checkbox}\r\n                    checked={formik.values.lookingForAJob}\r\n                    {...formik.getFieldProps('lookingForAJob')}\r\n                >I'm open to work</Checkbox>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ProfileSettings;","import React, {ChangeEvent} from 'react';\r\nimport {Modal} from \"antd\";\r\n\r\ntype ProfilePhotoPropsType = {\r\n    visible: boolean\r\n    onCancelClick: () => void\r\n    onSubmitClick: () => void\r\n    selectPhoto: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst ProfilePhotoChange: React.FC<ProfilePhotoPropsType> = props => {\r\n    return (\r\n        <Modal visible={props.visible} onOk={props.onSubmitClick} onCancel={props.onCancelClick}>\r\n            <input onChange={props.selectPhoto} type={'file'}/>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ProfilePhotoChange;","import React, {ChangeEvent, useState} from \"react\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport style from \"./ProfileInfo.module.css\"\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentUserId, getProfilePage} from \"../../../redux/Selectors\";\r\nimport ProfileSettings from \"./ProfileSettings/ProfileSettings\";\r\nimport {Avatar, Button, Card} from \"antd\";\r\nimport {updatePhoto} from \"../../../redux/profilleReducer\";\r\nimport ProfilePhotoChange from \"./ProfilePhotoChange/ProfilePhotoChange\";\r\nimport {\r\n    EditOutlined,\r\n    FacebookOutlined,\r\n    GithubOutlined,\r\n    GlobalOutlined,\r\n    InstagramOutlined,\r\n    ShareAltOutlined,\r\n    TwitterOutlined,\r\n    UserOutlined,\r\n    YoutubeOutlined\r\n} from \"@ant-design/icons\";\r\n\r\nfunction ProfileInfo() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [modalStatus, setModalStatus] = useState<boolean>(false)\r\n    const [changePhoto, setChangePhoto] = useState<boolean>(false)\r\n\r\n    const profilePage = useSelector(getProfilePage)\r\n    const currentUserId = useSelector(getCurrentUserId)\r\n    const isProfileBelongsToUser = profilePage.profile.userId === currentUserId\r\n\r\n    const [image, setImage] = useState<File>()\r\n\r\n\r\n    const onCancelClick = () => {\r\n        setModalStatus(false)\r\n    }\r\n    const onSubmitClick = () => {\r\n        setModalStatus(false)\r\n    }\r\n\r\n    const onPhotoSubmitClick = async () => {\r\n        setChangePhoto(false)\r\n        image && await dispatch(updatePhoto(image))\r\n    }\r\n\r\n    const onPhotoCloseClick = () => {\r\n        setChangePhoto(false)\r\n    }\r\n\r\n    const selectPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        //@ts-ignore\r\n        setImage(e.target.files[0])\r\n    }\r\n\r\n    const onEditClick = () => {\r\n        setModalStatus(true)\r\n    }\r\n\r\n    const onPhotoClick = () => {\r\n        setChangePhoto(true)\r\n    }\r\n\r\n\r\n    if (!profilePage.profile) {\r\n        return <Preloader/>\r\n    } else {\r\n\r\n        return (\r\n            <>\r\n                <ProfileSettings\r\n                    visible={modalStatus}\r\n                    onSubmitClick={onSubmitClick}\r\n                    onCancelClick={onCancelClick}\r\n                    profile={profilePage}/>\r\n\r\n                <ProfilePhotoChange\r\n                    visible={changePhoto}\r\n                    onSubmitClick={onPhotoSubmitClick}\r\n                    onCancelClick={onPhotoCloseClick}\r\n                    selectPhoto={selectPhoto}/>\r\n\r\n                <div className={style.infoContainer}>\r\n                    <div className={style.mainInfo}>\r\n                        <div className={style.avaWrapper}>\r\n                            <Avatar\r\n                                size={100}\r\n                                alt={`${profilePage.profile.userId} user ava`}\r\n                                src={profilePage.profile.photos.small && profilePage.profile.photos.small}\r\n                                icon={!profilePage.profile.photos.small && <UserOutlined/>}/>\r\n                            {isProfileBelongsToUser && <Button\r\n                                type={'text'}\r\n                                icon={<EditOutlined/>}\r\n                                onClick={onPhotoClick}/>}\r\n                        </div>\r\n                        <div className={style.description}>\r\n\r\n                        <span className={style.fullName}>\r\n                            {profilePage.profile.fullName}\r\n                            {profilePage.profile.lookingForAJob &&\r\n                            <span className={style.workStatus}>\r\n                                (Open to work)\r\n                            </span>}\r\n                        </span>\r\n                            <ProfileStatus isProfileBelongsToUser={isProfileBelongsToUser} status={profilePage.status}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className={style.userDataContainer}>\r\n\r\n                        {isProfileBelongsToUser &&\r\n                        <Button\r\n                            type={'ghost'}\r\n                            className={style.editButton}\r\n                            onClick={onEditClick}>\r\n                            Edit Profile\r\n                        </Button>}\r\n\r\n                        {profilePage.profile.aboutMe &&\r\n                        <Card\r\n                            title={'About Me:'}\r\n                            className={style.aboutCard}>\r\n                            {profilePage.profile.aboutMe}\r\n                        </Card>}\r\n\r\n                        {profilePage.profile.contacts?.github &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.github}\r\n                            className={style.socialLink}>\r\n                            <GithubOutlined/>\r\n                            {`  ${profilePage.profile.contacts?.github}`}\r\n                        </a>}\r\n                        {profilePage.profile.contacts?.facebook &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.facebook}\r\n                            className={style.socialLink}>\r\n                            <FacebookOutlined/>\r\n                            {`  ${profilePage.profile.contacts?.facebook}`}\r\n                        </a>}\r\n\r\n                        {profilePage.profile.contacts?.instagram &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.twitter}\r\n                            className={style.socialLink}>\r\n                            <InstagramOutlined/>\r\n                            `{`  ${profilePage.profile.contacts?.instagram}`}\r\n                        </a>}\r\n\r\n                        {profilePage.profile.contacts?.twitter &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.twitter}\r\n                            className={style.socialLink}>\r\n                            <TwitterOutlined/>\r\n                            {`  ${profilePage.profile.contacts?.twitter}`}\r\n                        </a>}\r\n\r\n                        {profilePage.profile.contacts?.youtube &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.youtube}\r\n                            className={style.socialLink}>\r\n                            <YoutubeOutlined/>\r\n                            {`  ${profilePage.profile.contacts?.youtube}`}\r\n                        </a>}\r\n\r\n                        {profilePage.profile.contacts?.website &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.website}\r\n                            className={style.socialLink}>\r\n                            <GlobalOutlined/>\r\n                            {`  ${profilePage.profile.contacts?.website}`}\r\n                        </a>}\r\n\r\n                        {profilePage.profile.contacts?.mainLink &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.mainLink}\r\n                            className={style.socialLink}>\r\n                            <ShareAltOutlined/>\r\n                            {`  ${profilePage.profile.contacts?.mainLink}`}\r\n                        </a>}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileInfo","import React, {createElement, useState} from 'react';\r\nimport {PostType} from '../../../../redux/profilleReducer';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport {Avatar, Card, Comment, Tooltip} from \"antd\";\r\nimport {DislikeFilled, DislikeOutlined, LikeFilled, LikeOutlined, UserOutlined} from '@ant-design/icons';\r\nimport style from './Post.module.css'\r\nimport Linkify from 'react-linkify';\r\n\r\nfunction Post(props: PostType) {\r\n\r\n    const userImage = useSelector<AppStateType, string | undefined>(state => state.profilePage.profile.photos.small)\r\n    const userName = useSelector<AppStateType, string>(state => state.profilePage.profile.fullName)\r\n\r\n    const [likes, setLikes] = useState<number>(0);\r\n    const [dislikes, setDislikes] = useState<number>(0);\r\n    const [action, setAction] = useState<'liked' | 'disliked' | null>(null)\r\n\r\n    const like = () => {\r\n        setLikes(1);\r\n        setDislikes(0);\r\n        setAction('liked');\r\n    };\r\n\r\n    const dislike = () => {\r\n        setLikes(0);\r\n        setDislikes(1);\r\n        setAction('disliked');\r\n    }\r\n\r\n    const actions = [\r\n        <Tooltip key=\"comment-basic-like\" title=\"Like\">\r\n      <span onClick={like}>\r\n        {createElement(action === 'liked' ? LikeFilled : LikeOutlined)}\r\n          <span className=\"comment-action\">{likes}</span>\r\n      </span>\r\n        </Tooltip>,\r\n        <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\r\n      <span onClick={dislike}>\r\n        {createElement(action === 'disliked' ? DislikeFilled : DislikeOutlined)}\r\n          <span className=\"comment-action\">{dislikes}</span>\r\n      </span>\r\n        </Tooltip>,\r\n        <span key=\"comment-basic-reply-to\">Reply to</span>,\r\n    ]\r\n\r\n    return (\r\n        <Card size={'small'} className={style.item}>\r\n            <Comment\r\n                actions={actions}\r\n                author={<h3 style={{fontWeight: 'bold'}}>{userName}</h3>}\r\n                avatar={<Avatar size={'large'}\r\n                                src={userImage && userImage}\r\n                                icon={!userImage && <UserOutlined/>}\r\n                                alt={'userImage'}/>}\r\n                content={\r\n                    <p>\r\n                        <Linkify>{props.postContent}</Linkify>\r\n                    </p>\r\n                }\r\n            />\r\n        </Card>\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import React, {KeyboardEvent, MouseEvent} from 'react'\r\nimport style from './UserPosts.module.css'\r\nimport Post from \"./Post/Post\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addPost} from \"../../../redux/profilleReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {getCurrentUserId, getUserId, getUserPostsData} from \"../../../redux/Selectors\";\r\nimport {Button} from \"antd\";\r\nimport TextArea from 'antd/lib/input/TextArea';\r\n\r\n\r\nfunction UserPosts() {\r\n\r\n    const postData = useSelector(getUserPostsData)\r\n\r\n    const currentUserId = useSelector(getCurrentUserId)\r\n    const userId = useSelector(getUserId)\r\n\r\n    const isCurrentProfileBelongsToUser = currentUserId === userId\r\n\r\n    let postsElement = postData.map(m =>\r\n        <Post\r\n            key={m.id}\r\n            postContent={m.postContent}\r\n            postLikes={m.postLikes}\r\n            id={m.id}\r\n        />)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: ''\r\n        },\r\n        onSubmit: (values, action) => {\r\n            dispatch(addPost(values.post))\r\n            action.resetForm()\r\n        }\r\n    })\r\n\r\n    const onButtonClickHandler = (e: MouseEvent<HTMLElement>) => {\r\n        e.preventDefault()\r\n        formik.submitForm()\r\n    }\r\n\r\n    const onEnterPressHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault()\r\n            formik.submitForm()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.postsWrapper}>\r\n            <div className={style.userNewPosts}>\r\n                <form>\r\n                    {isCurrentProfileBelongsToUser &&\r\n                    <div className={style.formWrapper}>\r\n                        <TextArea\r\n                            onKeyPress={onEnterPressHandler}\r\n                            className={style.textArea}\r\n                            autoSize={{minRows: 1,}}\r\n                            placeholder={'Enter your new post'}\r\n                            {...formik.getFieldProps('post')}\r\n                        />\r\n                        <Button\r\n                            type={'primary'}\r\n                            className={style.submitBtn}\r\n                            onClick={onButtonClickHandler}\r\n                        >Post</Button>\r\n                    </div>}\r\n                </form>\r\n            </div>\r\n            {postsElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserPosts;","import React, {useEffect} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getProfile, getStatus} from \"../../redux/profilleReducer\";\r\nimport {useParams} from 'react-router-dom';\r\nimport UserPosts from \"./UserPosts/UserPosts\";\r\nimport {getCurrentUserId, getIsLoading} from \"../../redux/Selectors\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport style from './Profile.module.css'\r\n\r\ntype UserIdType = {\r\n    userId: string\r\n}\r\n\r\nexport const Profile = () => {\r\n\r\n    let params = useParams<UserIdType>()\r\n\r\n    const currentUserId = useSelector(getCurrentUserId)\r\n    const isLoading = useSelector(getIsLoading)\r\n    const dispatch = useDispatch()\r\n\r\n    const refreshProfile = () => {\r\n        let userId = params.userId\r\n        if (!userId) {\r\n            userId = currentUserId!\r\n        }\r\n        dispatch(getProfile(userId))\r\n        dispatch(getStatus(userId))\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshProfile()\r\n    }, [params.userId]);\r\n\r\n    useEffect(() => {\r\n        refreshProfile()\r\n    }, []);\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <Preloader/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={style.profileWrapper}>\r\n            <div className={style.infoWrapper}>\r\n                <ProfileInfo/>\r\n                <UserPosts/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {Button, Result} from \"antd\";\r\nimport {Link} from \"react-router-dom\";\r\nimport style from './ErrorPage.module.css'\r\n\r\nexport const ErrorPage = () => {\r\n    return (\r\n        <div className={style.errorWrapper}>\r\n            <Result\r\n                status=\"404\"\r\n                subTitle=\"Sorry, the page you visited still in progress.\"\r\n                extra={<Link to={'/social-network/profile/'}><Button type=\"primary\">Back Home</Button></Link>}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport {ErrorPage} from \"../common/ErrorPage/ErrorPage\";\r\n\r\n\r\nfunction Music() {\r\n    return (\r\n        <ErrorPage/>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport {ErrorPage} from \"../common/ErrorPage/ErrorPage\";\r\n\r\n\r\nfunction News() {\r\n    return (\r\n        <ErrorPage/>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport {ErrorPage} from \"../common/ErrorPage/ErrorPage\";\r\n\r\nfunction Settings() {\r\n\r\n\r\n    return (\r\n        <ErrorPage/>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport style from \"./UserPage.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {followUnfollow, UserType} from \"../../../redux/usersReducer\";\r\nimport {Avatar, Button, Card} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingUsers} from \"../../../redux/Selectors\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\n\r\n\r\ntype UserPagePropsType = {\r\n    user: UserType\r\n}\r\n\r\nexport const UserPage = React.memo(({\r\n                                        user,\r\n                                        ...restProps\r\n                                    }: UserPagePropsType) => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const followingUsers = useSelector(getFollowingUsers)\r\n\r\n        return (\r\n            <Card\r\n                key={user.id}\r\n                className={style.descriptionWrapper}>\r\n                <div className={style.linksWrapper}>\r\n                    <NavLink to={'/social-network/profile/' + user.id}>\r\n                        <Avatar\r\n                            size={104}\r\n                            src={user.photos.small && user.photos.small}\r\n                            icon={!user.photos.small && <UserOutlined/>}\r\n                            alt={user.id + ' avatar'}/>\r\n                    </NavLink>\r\n                    <NavLink\r\n                        to={'/social-network/profile/' + user.id}\r\n                        className={style.nameLink}>\r\n                        {user.name}\r\n                    </NavLink>\r\n                </div>\r\n                <div className={style.description}>\r\n                    <p className={style.userStatus}>{user.status}</p>\r\n                    <Button\r\n                        onClick={() => dispatch(followUnfollow(user.id, user.followed))}\r\n                        disabled={followingUsers.some(id => id === user.id)}\r\n                        className={style.followBtn}\r\n                        type={!user.followed ? \"primary\" : \"default\"}\r\n                        ghost={!user.followed}\r\n                    >\r\n                        {user.followed ? 'Unfollow' : 'Follow'}\r\n                    </Button>\r\n                </div>\r\n            </Card>\r\n        )\r\n    }\r\n)\r\n\r\n","import React, {useEffect} from 'react';\r\nimport style from \"./UsersPage.module.css\";\r\nimport {getUsers} from \"../../redux/usersReducer\";\r\nimport {UserPage} from \"./UserPage/UserPage\";\r\nimport {Pagination} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersData,\r\n    getUsersFetchingStatus\r\n} from \"../../redux/Selectors\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\n\r\nconst UsersPage: React.FC = () => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const users = useSelector(getUsersData)\r\n        const currentPage = useSelector(getCurrentPage)\r\n        const pageSize = useSelector(getPageSize)\r\n        const totalCount = useSelector(getTotalUsersCount)\r\n        const isFetching = useSelector(getUsersFetchingStatus)\r\n\r\n        useEffect(() => {\r\n            dispatch(getUsers(currentPage, pageSize))\r\n        }, [])\r\n\r\n        if (isFetching) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className={style.usersPage}>\r\n                <div className={style.usersList}>\r\n                    {users.map(m => <UserPage user={m} key={m.id}/>)}\r\n                </div>\r\n                <div className={style.pagination}>\r\n                    <Pagination\r\n                        current={currentPage}\r\n                        pageSize={pageSize}\r\n                        total={totalCount}\r\n                        responsive={true}\r\n                        pageSizeOptions={[]}\r\n                        onChange={(page) => dispatch(getUsers(page, pageSize))}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default UsersPage;","import React from \"react\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport {Profile} from \"../Profile/Profile\";\r\nimport Music from \"../Music/Music\";\r\nimport News from \"../News/News\";\r\nimport Settings from \"../Settings/Settings\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getIsAuth} from \"../../redux/Selectors\";\r\nimport UsersPage from \"../UsersPage/UsersPage\";\r\nimport {withSuspense} from \"../../HOC/withSuspense\";\r\n\r\n\r\nconst Dialogs = React.lazy(() => import('../Dialogs/Dialogs'))\r\n\r\nconst SuspendedDialogs = withSuspense(Dialogs)\r\n\r\nexport const RoutingComponent: React.FC = () => {\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/social-network/login'}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Route path={\"/social-network/dialogs\"} render={() => <SuspendedDialogs/>}/>\r\n            <Route path={\"/social-network/profile/:userId?\"} render={() => <Profile/>}/>\r\n            <Route path={\"/social-network/users-page\"} render={() => <UsersPage/>}/>\r\n            <Route path={\"/social-network/music\"} component={Music}/>\r\n            <Route path={\"/social-network/news\"} component={News}/>\r\n            <Route path={\"/social-network/settings\"} component={Settings}/>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport Preloader from \"../Components/common/Preloader/Preloader\";\r\n\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <WrappedComponent {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}","import React, {MouseEvent} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from 'formik';\r\nimport {loginUser} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getIsAuth} from \"../../redux/Selectors\";\r\nimport style from './Login.module.css'\r\nimport {Button, Card, Checkbox, Input} from \"antd\";\r\nimport './Login.css'\r\n\r\n\r\nexport type FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n            initialValues: {\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false\r\n            },\r\n            onSubmit: (values, actions) => {\r\n                dispatch(loginUser(values));\r\n                actions.resetForm()\r\n            },\r\n\r\n            validate: values => {\r\n                const errors: FormikErrorType = {};\r\n\r\n                if (!values.email) {\r\n                    errors.email = 'Required';\r\n                } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    errors.email = 'Invalid email address';\r\n                }\r\n\r\n                if (!values.password) {\r\n                    errors.password = 'Required';\r\n                } else if (!/^[A-Z0-9._%+-]{4,}$/i.test(values.password)) {\r\n                    errors.password = 'Password must be longer than 3 symbols';\r\n                }\r\n\r\n                return errors;\r\n\r\n            }\r\n        }\r\n    )\r\n\r\n    const onClick = (e: MouseEvent<HTMLElement>) => {\r\n        e.preventDefault()\r\n        formik.submitForm()\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/social-network/profile/:userId?'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.loginWrapper}>\r\n            <Card className={style.mainWrapper}>\r\n                <h1 className={style.title}>Login</h1>\r\n                <form\r\n                    className={style.formWrapper}\r\n                >\r\n                    <div>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}>\r\n                                {' here'}\r\n                            </a>\r\n                            <p>\r\n                                or use common test account credentials:\r\n                            </p>\r\n                        </p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </div>\r\n\r\n\r\n                    <div>\r\n                        <Input\r\n                            className={style.inputItem}\r\n                            placeholder={'Email'}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email && <p className={style.errorMessage}>{formik.errors.email}</p>}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <Input\r\n                            className={style.inputItem}\r\n                            type={'password'}\r\n                            placeholder={'Password'}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password && <p className={style.errorMessage}>{formik.errors.password}</p>}\r\n                    </div>\r\n\r\n\r\n                    <Checkbox\r\n                        {...formik.getFieldProps('rememberMe')}>\r\n                        RememberMe\r\n                    </Checkbox>\r\n                    <Button\r\n                        type={'primary'}\r\n                        className={style.submitBtn}\r\n                        onClick={onClick}>\r\n                        Login</Button>\r\n                </form>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Login;\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css'\r\nimport {Layout} from 'antd';\r\nimport LeftNavbar from \"./Components/Navbars/LeftNavbar/LeftNavbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {HeaderComponent} from \"./Components/Header/HeaderComponent\";\r\nimport {authUser} from \"./redux/authReducer\";\r\nimport {getIsInitialized} from \"./redux/Selectors\";\r\nimport {RoutingComponent} from \"./Components/RoutingComponent/RoutingComponent\";\r\nimport {Route} from \"react-router-dom\";\r\nimport Login from \"./Components/Login/Login\";\r\nimport Preloader from \"./Components/common/Preloader/Preloader\";\r\n\r\nconst {Content, Footer} = Layout;\r\n\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const isInitialized = useSelector(getIsInitialized)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authUser())\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HeaderComponent/>\r\n\r\n            <Layout style={{minHeight: '100vh'}}>\r\n\r\n                <LeftNavbar/>\r\n                <Layout className=\"site-layout\">\r\n                    <Content style={{margin: '0 16px'}}>\r\n                        <div className=\"site-layout-background\">\r\n                            <RoutingComponent/>\r\n                            <Route path={\"/social-network/login\"} component={Login}/>\r\n                        </div>\r\n                    </Content>\r\n                    <Footer style={{textAlign: 'center', marginRight: '80px'}}>Social Network ©2021 by\r\n                        Matumba125</Footer>\r\n                </Layout>\r\n            </Layout>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from \"./redux/reduxStore\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__1mmUk\",\"mainWrapper\":\"Login_mainWrapper__z_is1\",\"title\":\"Login_title__2GV52\",\"formWrapper\":\"Login_formWrapper__1XssD\",\"inputItem\":\"Login_inputItem__bFZGa\",\"checkBox\":\"Login_checkBox__2gcrN\",\"submitBtn\":\"Login_submitBtn__1AODj\",\"errorMessage\":\"Login_errorMessage__2C4Kb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionWrapper\":\"UserPage_descriptionWrapper__3yZxE\",\"description\":\"UserPage_description__3B2J7\",\"linksWrapper\":\"UserPage_linksWrapper__2iY8T\",\"nameLink\":\"UserPage_nameLink__g8IOo\",\"followBtn\":\"UserPage_followBtn__Nvy2P\",\"userStatus\":\"UserPage_userStatus__tcupG\"};"],"sourceRoot":""}