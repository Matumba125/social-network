{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/UsersPage/UsersPage.module.css","Components/Profile/UserPosts/Post/Post.module.css","Components/Profile/UserPosts/UserPosts.module.css","Components/Dialogs/DialogItem/DialogItem.module.css","Components/Dialogs/Message/Message.module.css","Components/Header/Header.module.css","reportWebVitals.ts","assets/img/userAvatar.jpg","api/api.ts","redux/profilleReducer.ts","assets/img/dimych.jpg","assets/img/andrey.jpg","assets/img/sveta.jpg","redux/dialogsReducer.ts","redux/rightNavbarReducer.ts","redux/usersReducer.ts","redux/authReducer.ts","redux/reduxStore.ts","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","HOC/WithAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","Components/UsersPage/UserPage/UserPage.tsx","Components/UsersPage/UsersPage.tsx","Components/common/Preloader/Preloader.tsx","Components/UsersPage/UsersPageContainer.tsx","Components/Music/Music.tsx","Components/News/News.tsx","Components/Settings/Settings.tsx","redux/Selectors.ts","Components/Login/Login.tsx","Components/Navbars/LeftNavbar/LeftNavbar.tsx","Components/Header/HeaderComponent.tsx","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/UserPosts/Post/Post.tsx","Components/Profile/UserPosts/UserPosts.tsx","Components/Profile/UserPosts/UserPostsContainer.tsx","Components/Profile/Profile.tsx","App.tsx","index.tsx","Components/UsersPage/UserPage/UserPage.module.css","Components/Login/Login.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","UsersAPI","currentPage","pageSize","get","response","data","FollowAPI","id","delete","post","ProfileAPI","userId","status","put","AuthorizeAPI","formData","ADD_POST","SET_STATUS","SET_USER_PROFILE","initialState","profile","photos","large","myPhoto","small","fullName","aboutMe","userID","postsData","v1","postContent","postLikes","setStatus","newText","type","getProfile","dispatch","updateStatus","newStatus","console","log","resultCode","profileReducer","state","action","newPost","newPostText","ADD_MESSAGE","dialogsData","userName","avatar","dimych","andrey","sveta","messageData","messageText","newMessageText","addMessage","newMessage","dialogsReducer","InitialState","contactsData","rightNavbarReducer","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","CHANGE_FETCHING_STATUS","CHANGE_RESPONSE_STATUS","users","totalCount","isFetching","responseInProgress","followingUsers","changeFetchingStatus","changeResponseStatus","usersReducer","map","m","followed","filter","email","login","isAuth","isInitialized","authReducer","rootReducer","combineReducers","profilePage","dialogsPage","rightNavbar","auth","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","DialogItem","props","path","className","style","dialog","src","alt","to","Message","message","AddMessageReduxForm","reduxForm","Field","name","component","placeholder","onClick","e","handleSubmit","reset","Dialogs","useDispatch","dialogsElement","u","messageElement","dialogs","dialogs_yaritems","messages","onSubmit","mapStateToProps","withAuthRedirect","Component","connect","restProps","compose","UserPage","React","memo","user","changeFollowStatus","onPageChanged","userInfo","ava","defaultImg","img","size","disabled","some","icon","UserDeleteOutlined","UserAddOutlined","shape","title","textDecoration","color","descriptionWrapper","description","fontSize","textAlign","UsersPage","pages","i","push","usersPage","pagination","selectedPage","antIcon","LoadingOutlined","spin","Preloader","display","width","justifyContent","indicator","UsersPageContainer","follow","followUnfollow","pageNumber","getUsers","this","setCurrentPage","items","following","unfollow","Music","News","Settings","getIsAuth","getIsInitialized","getProfilePage","getUserId","Login","useSelector","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","resetForm","formWrapper","onFinish","href","target","inputItem","Item","label","getFieldProps","formItem","touched","Password","checked","htmlType","Sider","Layout","LeftNavbar","useState","collapsed","setCollapsed","collapsible","onCollapse","theme","mode","NotificationOutlined","UserOutlined","MailOutlined","TeamOutlined","CustomerServiceOutlined","SettingOutlined","HeaderComponent","useEffect","onClickHandler","useCallback","extra","userStatus","backgroundColor","ProfileStatus","editMode","setEditMode","setNewStatus","height","autoFocus","onBlur","onKeyPress","key","onChange","currentTarget","value","onDoubleClick","ProfileInfo","infoContainer","mainInfo","Post","userImage","like","setLike","header","item","likes","HeartFilled","HeartOutlined","AddPostReduxForm","UserPosts","postsElement","userNewPosts","UserPostsContainer","Profile","getStatus","Content","Footer","App","setUserData","finally","minHeight","margin","padding","render","DialogsContainer","exact","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9bf6291a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__14t2F\",\"dialogs_items\":\"Dialogs_dialogs_items__2Qi4m\",\"messages\":\"Dialogs_messages__3ydIv\",\"addMessage\":\"Dialogs_addMessage__1GQ4N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPage\":\"UsersPage_usersPage__3wZfu\",\"selectedPage\":\"UsersPage_selectedPage__24X7K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Post_header__3-fyf\",\"item\":\"Post_item__yAHA8\",\"likes\":\"Post_likes__1y5HF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userNewPosts\":\"UserPosts_userNewPosts__3Atrz\",\"form\":\"UserPosts_form__RbOpr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__1SljY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1Kit1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userStatus\":\"Header_userStatus__3qXXs\"};","import {ReportHandler} from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export default __webpack_public_path__ + \"static/media/userAvatar.9ca0a8b7.jpg\";","import axios from \"axios\";\r\nimport {FormikErrorType} from \"../Components/Login/Login\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'd5ee63b2-b8ea-4e76-b89c-c960812b3f51'\r\n    }\r\n});\r\n\r\nexport const UsersAPI = {\r\n    getUsers: (currentPage: number, pageSize: number) => {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const FollowAPI = {\r\n    unfollowUser: (id: number) => {\r\n        return instance.delete(`follow/${id}`,).then(response => response.data)\r\n    },\r\n    followUser: (id: number) => {\r\n        return instance.post(`follow/${id}`).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfileInfo: (userId: string) => {\r\n        return instance.get(`profile/${userId}`).then(response => response.data)\r\n    },\r\n    getStatus: (userId: string) => {\r\n        return instance.get(`profile/status/${userId}`);\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return instance.put(`profile/status`, {\r\n            status: status\r\n        })\r\n    },\r\n}\r\n\r\nexport const AuthorizeAPI = {\r\n    authorizeUser: () => {\r\n        return instance.get(`auth/me`).then(response => response.data)\r\n    },\r\n\r\n    loginUser: (formData: FormikErrorType) => {\r\n        return instance.post('auth/login', formData)\r\n    },\r\n    logoutUser: () => {\r\n        return instance.delete('auth/login')\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {ActionTypes} from \"./reduxStore\";\r\nimport {PhotosType} from \"./usersReducer\";\r\nimport myPhoto from \"../assets/img/userAvatar.jpg\"\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileAPI} from \"../api/api\";\r\n\r\n\r\nexport type PostType = {\r\n    id: string\r\n    postContent: string\r\n    postLikes: number\r\n}\r\n\r\ntype ContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\n\r\n\r\nexport type ProfileDataType = {\r\n    aboutMe: string\r\n    contacts?: ContactsType\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    userID: string\r\n    photos: PhotosType\r\n    fullName: string\r\n}\r\n\r\nexport type ProfileInitialStateType = {\r\n    profile: ProfileDataType\r\n    status: string\r\n    postsData: Array<PostType>\r\n}\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_STATUS = 'SET-STATUS';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\n\r\nlet initialState: ProfileInitialStateType = {\r\n    profile: {\r\n        photos: {\r\n            large: myPhoto,\r\n            small: myPhoto,\r\n        },\r\n        fullName: 'Nikita',\r\n        aboutMe: 'Zdarova',\r\n        userID: '18309',\r\n    },\r\n    status: '',\r\n    postsData: [\r\n        {\r\n            id: v1(),\r\n            postContent: \"Hello World !!!\",\r\n            postLikes: 15,\r\n\r\n        },\r\n        {\r\n            id: v1(),\r\n            postContent: \"It's my first post!!\",\r\n            postLikes: 28\r\n        }\r\n    ],\r\n}\r\n\r\nconst profileReducer = (state: ProfileInitialStateType = initialState,\r\n                        action: ActionTypes): ProfileInitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: v1(),\r\n                postContent: action.newPostText,\r\n                postLikes: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                postsData: [newPost, ...state.postsData],\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.newText\r\n            }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPost = (newPostText: string) => ({\r\n    type: ADD_POST,\r\n    newPostText,\r\n} as const)\r\n\r\n\r\nexport const setUserProfile = (profile: ProfileDataType) => ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n} as const)\r\n\r\nexport const setStatus = (newText: string) => ({type: SET_STATUS, newText} as const)\r\n\r\nexport const getProfile = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.getProfileInfo(userId).then(data => {\r\n            dispatch(setUserProfile(data))\r\n        });\r\n    }\r\n}\r\nexport const getStatus = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.getStatus(userId).then(response => {\r\n            dispatch(setStatus(response.data))\r\n        });\r\n    }\r\n}\r\nexport const updateStatus = (newStatus: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.updateStatus(newStatus).then(response => {\r\n            console.log(response)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(newStatus))\r\n            }\r\n        })\r\n    };\r\n}\r\n\r\n\r\nexport default profileReducer","export default __webpack_public_path__ + \"static/media/dimych.4cfb0ddb.jpg\";","export default __webpack_public_path__ + \"static/media/andrey.05d81a41.jpg\";","export default __webpack_public_path__ + \"static/media/sveta.2e2af972.jpg\";","import {v1} from \"uuid\";\r\nimport dimych from \"../assets/img/dimych.jpg\";\r\nimport andrey from \"../assets/img/andrey.jpg\";\r\nimport sveta from \"../assets/img/sveta.jpg\";\r\nimport {ActionTypes} from \"./reduxStore\";\r\n\r\n\r\nexport type DialogsItemPropsType = {\r\n    id: string\r\n    userName: string\r\n    avatar?: string\r\n}\r\n\r\nexport type MessagePropsType = {\r\n    messageText: string\r\n    id: string\r\n}\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\n\r\nconst ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {id: '2', userName: \"Dimych\", avatar: dimych},\r\n        {id: v1(), userName: \"Andrey\", avatar: andrey},\r\n        {id: v1(), userName: \"Sveta\", avatar: sveta},\r\n        {id: v1(), userName: \"Sasha\"},\r\n        {id: v1(), userName: \"Viktor\"},\r\n        {id: v1(), userName: \"Valera\"}\r\n    ] as Array<DialogsItemPropsType>,\r\n\r\n    messageData: [\r\n        {id: v1(), messageText: \"HI\"},\r\n        {id: v1(), messageText: \"Hello\"},\r\n        {id: v1(), messageText: \"YO\"}\r\n    ] as Array<MessagePropsType>,\r\n\r\n    newMessageText: ''\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsInitialStateType = initialState,\r\n                        action: ActionTypes): DialogsInitialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const newMessage: MessagePropsType = {\r\n                id: v1(),\r\n                messageText: action.newMessage\r\n            };\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData, newMessage],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const addMessage = (newMessage: string) => ({\r\n    type: ADD_MESSAGE,\r\n    newMessage\r\n} as const)\r\n\r\n\r\nexport default dialogsReducer","import {v1} from \"uuid\";\r\nimport dimych from \"../assets/img/dimych.jpg\";\r\nimport andrey from \"../assets/img/andrey.jpg\";\r\nimport sveta from \"../assets/img/sveta.jpg\";\r\nimport {ActionTypes} from \"./reduxStore\";\r\n\r\ntype ContactsDataType = {\r\n    id: string\r\n    userName: string\r\n    avatar: string\r\n}\r\n\r\nexport type RightNavInitialStateType = typeof InitialState\r\n\r\nconst InitialState = {\r\n    contactsData: [\r\n        {id: v1(), userName: \"Dimych\", avatar: dimych},\r\n        {id: v1(), userName: \"Andrey\", avatar: andrey},\r\n        {id: v1(), userName: \"Sveta\", avatar: sveta}\r\n    ] as Array<ContactsDataType>\r\n}\r\n\r\nexport const rightNavbarReducer = (state: RightNavInitialStateType = InitialState, action: ActionTypes): RightNavInitialStateType => {\r\n\r\n    return state\r\n}\r\n\r\nexport default rightNavbarReducer","import {ActionTypes} from \"./reduxStore\";\r\nimport {FollowAPI, UsersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n/*type AddressType ={\r\n    country: string\r\n    city: string\r\n}*/\r\n\r\nexport type PhotosType = {\r\n    large: string\r\n    small: string\r\n}\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n    followed: boolean\r\n    status: string\r\n    photos: PhotosType\r\n    /*address: AddressType*/\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    responseInProgress: boolean\r\n    followingUsers: Array<number>\r\n}\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\r\nconst CHANGE_FETCHING_STATUS = 'CHANGE-FETCHING-STATUS';\r\nconst CHANGE_RESPONSE_STATUS = 'CHANGE-RESPONSE-STATUS';\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    responseInProgress: true,\r\n    followingUsers: [],\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState,\r\n                      action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(m =>\r\n                    m.id === action.id ? {...m, followed: true} : m),\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(m =>\r\n                    m.id === action.id ? {...m, followed: false} : m)\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case  SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n        case CHANGE_FETCHING_STATUS: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case CHANGE_RESPONSE_STATUS: {\r\n            return {\r\n                ...state,\r\n                followingUsers: action.responseInProgress\r\n                    ? [...state.followingUsers, action.id]\r\n                    : state.followingUsers.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const follow = (id: number) => ({\r\n    type: FOLLOW,\r\n    id\r\n} as const)\r\nexport const unfollow = (id: number) => ({\r\n    type: UNFOLLOW,\r\n    id\r\n} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({\r\n    type: SET_USERS,\r\n    users\r\n} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage\r\n} as const)\r\nexport const setTotalUsersCount = (totalCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalCount\r\n} as const)\r\nexport const changeFetchingStatus = (isFetching: boolean) => ({\r\n    type: CHANGE_FETCHING_STATUS,\r\n    isFetching\r\n} as const)\r\nexport const changeResponseStatus = (responseInProgress: boolean, id: number) => ({\r\n    type: CHANGE_RESPONSE_STATUS,\r\n    responseInProgress,\r\n    id,\r\n} as const)\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        dispatch(setCurrentPage(currentPage))\r\n        dispatch(changeFetchingStatus(true))\r\n        UsersAPI.getUsers(currentPage, pageSize)\r\n            .then(data => {\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setTotalUsersCount(data.items.totalCount))\r\n                dispatch(changeFetchingStatus(false))\r\n\r\n            });\r\n    }\r\n}\r\n\r\nexport const followUnfollow = (id: number, following: boolean) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        dispatch(changeResponseStatus(true, id))\r\n        if (following) {\r\n            FollowAPI.unfollowUser(id)\r\n                .then(data => {\r\n                    if (data.resultCode === 0) {\r\n                        dispatch(unfollow(id))\r\n                        dispatch(changeResponseStatus(false, id))\r\n                    }\r\n                })\r\n        } else {\r\n            FollowAPI.followUser(id)\r\n                .then(data => {\r\n                    if (data.resultCode === 0) {\r\n                        dispatch(follow(id))\r\n                        dispatch(changeResponseStatus(false, id))\r\n                    }\r\n                })\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default usersReducer","import {ActionTypes} from \"./reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AuthorizeAPI} from \"../api/api\";\r\nimport {FormikErrorType} from \"../Components/Login/Login\";\r\n\r\n\r\nexport type DataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n}\r\n\r\nexport type AuthInitialStateType = {\r\n    data: DataType\r\n    isAuth: boolean\r\n    isInitialized: boolean\r\n}\r\n\r\nlet initialState: AuthInitialStateType = {\r\n    data: {\r\n        id: null,\r\n        email: null,\r\n        login: null,\r\n    },\r\n    isAuth: false,\r\n    isInitialized: false\r\n}\r\n\r\nconst authReducer = (state: AuthInitialStateType = initialState,\r\n                     action: ActionTypes): AuthInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-USER-DATA':\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                isAuth: true,\r\n            }\r\n        case 'USER_BEEN_LOGINED':\r\n            return {\r\n                ...state,\r\n                isAuth: true\r\n            }\r\n        case 'USER_BEEN_LOGINED_OUT':\r\n            return {\r\n                ...state,\r\n                isAuth: false\r\n            }\r\n        case 'SET-APP-INITIALIZED':\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserData = (data: DataType) => ({\r\n    type: 'SET-USER-DATA',\r\n    data\r\n} as const)\r\nexport const setAppInitialized = (isInitialized: boolean) => ({\r\n    type: 'SET-APP-INITIALIZED',\r\n    isInitialized\r\n} as const)\r\n\r\nexport const userBeenLogined = () => ({\r\n    type: 'USER_BEEN_LOGINED'\r\n} as const)\r\n\r\nexport const userBeenLoginedOut = () => ({\r\n    type: 'USER_BEEN_LOGINED_OUT'\r\n} as const)\r\n\r\n\r\nexport const authUser = () => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        AuthorizeAPI.authorizeUser().then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(setUserData(data.data))\r\n            }\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppInitialized(true))\r\n            })\r\n    }\r\n}\r\n\r\nexport const loginUser = (formData: FormikErrorType) => {\r\n    return (dispatch: Dispatch) => {\r\n        AuthorizeAPI.loginUser(formData).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(userBeenLogined())\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const logoutUser = () => {\r\n    return (dispatch: Dispatch) => {\r\n        AuthorizeAPI.logoutUser().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(userBeenLoginedOut())\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default authReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {addPost, setStatus, setUserProfile} from \"./profilleReducer\";\r\nimport dialogsReducer, {addMessage} from \"./dialogsReducer\";\r\nimport rightNavbarReducer from \"./rightNavbarReducer\";\r\nimport usersReducer, {\r\n    changeFetchingStatus,\r\n    changeResponseStatus,\r\n    follow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    unfollow\r\n} from \"./usersReducer\";\r\nimport authReducer, {setAppInitialized, setUserData, userBeenLogined, userBeenLoginedOut} from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\n\r\n\r\nexport type ActionTypes =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof addMessage> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof changeFetchingStatus> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setUserData> |\r\n    ReturnType<typeof changeResponseStatus> |\r\n    ReturnType<typeof setStatus> |\r\n    ReturnType<typeof userBeenLogined> |\r\n    ReturnType<typeof userBeenLoginedOut>|\r\n    ReturnType<typeof setAppInitialized>\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    rightNavbar: rightNavbarReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store","import React from \"react\";\r\nimport style from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogsItemPropsType} from \"../../../redux/dialogsReducer\";\r\n\r\n\r\nconst DialogItem: React.FC<DialogsItemPropsType> = (props) => {\r\n    let path = \"/social-network/profile/\" + props.id;\r\n\r\n    return (\r\n        <div className={style.dialog}>\r\n            {props.avatar ? <img src={props.avatar} alt={'userImage'}/> : ''}\r\n            <NavLink to={path}>{props.userName}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport style from \"./Message.module.css\";\r\nimport {MessagePropsType} from \"../../../redux/dialogsReducer\";\r\n\r\nconst Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={style.message}>{props.messageText}</div>\r\n    );\r\n};\r\n\r\nexport default Message;","import React, {MouseEvent} from \"react\";\r\nimport style from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addMessage} from \"../../redux/dialogsReducer\";\r\nimport {Button} from \"antd\";\r\n\r\ntype AddMessageType = {\r\n    message: string\r\n}\r\n\r\nconst AddMessage: React.FC<InjectedFormProps<AddMessageType>> = (props) => {\r\n\r\n\r\n    const onClickHandler = (e: MouseEvent<HTMLButtonElement>) => {\r\n        props.handleSubmit(e)\r\n        props.reset()\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <Field name={'message'} component={'input'} placeholder={'Type your message'}/>\r\n            <div>\r\n                <Button onClick={onClickHandler}>Send</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<AddMessageType>({form: 'message'})(AddMessage)\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let dialogsElement = state.dialogsData.map(u => <DialogItem key={u.id} userName={u.userName} id={u.id}\r\n                                                                avatar={u.avatar}/>)\r\n\r\n    let messageElement = state.messageData.map(m => <Message key={m.id} messageText={m.messageText} id={m.id}/>)\r\n\r\n    const onSubmit = (formData: AddMessageType) => {\r\n        dispatch(addMessage(formData.message))\r\n    }\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogs_yaritems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={style.messages}>\r\n                {messageElement}\r\n                <div className={style.addMessage}>\r\n                    <AddMessageReduxForm onSubmit={onSubmit}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\nimport {ComponentType} from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/social-network/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n\r\n}","import {addMessage, DialogsInitialStateType} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsInitialStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: () => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addMessage}),\r\n    withAuthRedirect)(Dialogs)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport style from \"./UserPage.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport defaultImg from \"../../../assets/img/sveta.jpg\";\r\nimport {UserType} from \"../../../redux/usersReducer\";\r\nimport {Button, Card} from \"antd\";\r\nimport {UserAddOutlined, UserDeleteOutlined} from \"@ant-design/icons\";\r\n\r\n\r\ntype UserPagePropsType = {\r\n    user: UserType\r\n    followingUsers: number[]\r\n    onPageChanged: (pageNumber: number) => void\r\n    changeFollowStatus: (id: number, follow: boolean) => void\r\n}\r\n\r\nexport const UserPage = React.memo(({\r\n                                        user,\r\n                                        followingUsers,\r\n                                        changeFollowStatus,\r\n                                        onPageChanged,\r\n                                        ...restProps\r\n                                    }: UserPagePropsType) => {\r\n        return (\r\n            <div className={style.userInfo} key={user.id}>\r\n                <div className={style.ava}>\r\n                    <NavLink to={'/social-network/profile/' + user.id}>\r\n                        <img src={user.photos.small !== null ? user.photos.small : defaultImg}\r\n                             alt={user.id + ' avatar'}\r\n                             className={style.img}/>\r\n                    </NavLink>\r\n                    <Button size={'small'} onClick={() => changeFollowStatus(user.id, user.followed)}\r\n                            disabled={followingUsers.some(id => id === user.id)}\r\n                            icon={!user.followed ? <UserAddOutlined/> : <UserDeleteOutlined/>}\r\n                            shape={\"circle\"}\r\n                            type={'text'}\r\n                    >\r\n                    </Button>\r\n                </div>\r\n                <Card title={<NavLink to={'/social-network/profile/' + user.id}\r\n                                      style={{textDecoration: 'none', color: 'black'}}>{user.name}</NavLink>}\r\n                      className={style.descriptionWrapper}>\r\n\r\n                    <div className={style.description} style={{fontSize: \"13px\"}}>\r\n                        \" {user.status} \"\r\n                        <div style={{fontSize: \"15px\", textAlign: 'center'}}>\r\n                            <div>\r\n                                Belarus,\r\n                            </div>\r\n                            <div>\r\n                                Minsk\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n\r\n","import React from 'react';\r\nimport style from \"./UsersPage.module.css\";\r\nimport {UserType} from \"../../redux/usersReducer\";\r\nimport {UserPage} from \"./UserPage/UserPage\";\r\n\r\ntype UsersPagePropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    followingUsers: number[]\r\n    onPageChanged: (pageNumber: number) => void\r\n    changeFollowStatus: (id: number, follow: boolean) => void\r\n}\r\n\r\nconst UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n\r\n        // let pagesCount = Math.ceil(props.totalCount / props.pageSize)\r\n\r\n        let pages = [];\r\n        for (let i = 1; i <= 10; i++) {\r\n            pages.push(i)\r\n        }\r\n\r\n        return (\r\n            <div className={style.usersPage}>\r\n                {props.users.map(m => <UserPage user={m}\r\n                                                key={m.id}\r\n                                                followingUsers={props.followingUsers}\r\n                                                onPageChanged={props.onPageChanged}\r\n                                                changeFollowStatus={props.changeFollowStatus}/>)}\r\n                <div className={style.pagination}>\r\n                    {pages.map(m =>\r\n                        <span key={m} className={props.currentPage === m ? style.selectedPage : ''}\r\n                              onClick={(e) => {\r\n                                  props.onPageChanged(m)\r\n                              }}>{m} </span>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default UsersPage;","import {Space, Spin} from 'antd';\r\nimport React from 'react';\r\nimport {LoadingOutlined} from \"@ant-design/icons\";\r\n\r\nconst antIcon = <LoadingOutlined style={{fontSize: 48}} spin/>\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <Space style={{display: 'flex', width: '100%', justifyContent: \"center\"}} size=\"large\">\r\n            <Spin indicator={antIcon}/>\r\n        </Space>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import {connect} from \"react-redux\";\r\nimport {followUnfollow, getUsers, InitialStateType,} from \"../../redux/usersReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport React from \"react\";\r\nimport UsersPage from \"./UsersPage\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStatePropsType = {\r\n    usersPage: InitialStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    followUnfollow: (id: number, following: boolean) => void\r\n\r\n}\r\n\r\nexport type UsersPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nclass UsersPageContainer extends React.Component<UsersPropsType> {\r\n\r\n\r\n    changeFollowStatus = (id: number, follow: boolean) => {\r\n        this.props.followUnfollow(id, follow)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.usersPage.currentPage, this.props.usersPage.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.usersPage.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n\r\n            {this.props.usersPage.isFetching ? <Preloader/> : <UsersPage\r\n                users={this.props.usersPage.users}\r\n                totalCount={this.props.usersPage.totalCount}\r\n                currentPage={this.props.usersPage.currentPage}\r\n                pageSize={this.props.usersPage.pageSize}\r\n                followingUsers={this.props.usersPage.followingUsers}\r\n                onPageChanged={this.onPageChanged}\r\n                changeFollowStatus={this.changeFollowStatus}/>\r\n            }\r\n        </>\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        usersPage: state.users\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUsers, followUnfollow,}),\r\n    withAuthRedirect,\r\n)(UsersPageContainer)","import React from \"react\";\r\n\r\n\r\nfunction Music() {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\n\r\n\r\nfunction News() {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\n\r\nfunction Settings() {\r\n\r\n\r\n    return (\r\n        <>\r\n            Settings\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings;","import {AppStateType} from \"./reduxStore\";\r\nimport {ProfileInitialStateType} from \"./profilleReducer\";\r\n\r\nexport const getIsAuth = (state: AppStateType):boolean=>{\r\n    return state.auth.isAuth\r\n }\r\n export const getIsInitialized = (state: AppStateType):boolean=>{\r\n    return state.auth.isInitialized\r\n }\r\n\r\n export const getProfilePage = (state: AppStateType):ProfileInitialStateType=>{\r\n    return state.profilePage\r\n }\r\n export const getUserId = (state: AppStateType):string=>{\r\n    return state.profilePage.profile.userID\r\n }","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Button, Checkbox, Form, Input} from \"antd\";\r\nimport {useFormik} from 'formik';\r\nimport {loginUser} from \"../../redux/authReducer\";\r\nimport style from './Login.module.css'\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getIsAuth} from \"../../redux/Selectors\";\r\n\r\n\r\nexport type FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]{4,}$/i.test(values.password)) {\r\n                errors.password = 'Password must be longer than 3 symbols';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginUser(values));\r\n            formik.resetForm();\r\n            debugger\r\n        },\r\n    })\r\n\r\n    if(isAuth){\r\n        return <Redirect to={'/social-network/profile/:userId?'}/>\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            className={style.formWrapper}\r\n            onFinish={formik.handleSubmit}>\r\n\r\n            <p>To log in get registered\r\n                <a href={'https://social-network.samuraijs.com/'}\r\n                   target={'_blank'}>here\r\n                </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n\r\n            <div className={style.inputItem}>\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    {...formik.getFieldProps('email')}\r\n                    className={style.formItem}\r\n                >\r\n                    <Input/>\r\n                </Form.Item>\r\n                {formik.touched.email && formik.errors.email &&\r\n                <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n            </div>\r\n\r\n\r\n            <div className={style.inputItem}>\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    {...formik.getFieldProps('password')}\r\n                    className={style.formItem}\r\n                >\r\n                    <Input.Password/>\r\n                </Form.Item>\r\n                {formik.touched.password && formik.errors.password &&\r\n                <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n            </div>\r\n\r\n            <Form.Item>\r\n                <Checkbox\r\n                    checked={formik.values.rememberMe}\r\n                    {...formik.getFieldProps('rememberMe')}>RememberMe</Checkbox>\r\n            </Form.Item>\r\n            <Form.Item >\r\n                <Button htmlType={'submit'}>Login</Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\nexport default Login;\r\n\r\n","import React, {useState} from 'react';\r\nimport {Layout, Menu} from \"antd\";\r\nimport {\r\n    CustomerServiceOutlined,\r\n    MailOutlined,\r\n    NotificationOutlined,\r\n    SettingOutlined,\r\n    TeamOutlined,\r\n    UserOutlined\r\n} from \"@ant-design/icons\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst {Sider} = Layout;\r\n\r\nfunction LeftNavbar() {\r\n\r\n    const [collapsed, setCollapsed] = useState<boolean>(true)\r\n\r\n    const onCollapse = () => {\r\n        setCollapsed(!collapsed)\r\n    }\r\n\r\n    return (\r\n        <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\r\n            <Menu theme=\"dark\" mode=\"inline\">\r\n                <Menu.Item key=\"1\" icon={<NotificationOutlined/>}>\r\n                    <Link to=\"/social-network/news/\">News</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<UserOutlined/>}>\r\n                    <Link to=\"/social-network/profile/\">Profile</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" icon={<MailOutlined/>}>\r\n                    <Link to=\"/social-network/dialogs/\">Messages</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" icon={<TeamOutlined/>}>\r\n                    <Link to=\"/social-network/users-page\">Developers</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\" icon={<CustomerServiceOutlined/>}>\r\n                    <Link to=\"/social-network/music/\">Music</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"6\" icon={<SettingOutlined/>}>\r\n                    <Link to=\"/social-network/settings/\">Settings</Link>\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Sider>\r\n    );\r\n}\r\n\r\nexport default LeftNavbar;","import React, {useCallback, useEffect} from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {logoutUser} from \"../../redux/authReducer\";\r\nimport {Avatar, Button, PageHeader} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport style from './Header.module.css'\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\nexport const HeaderComponent = React.memo(() => {\r\n\r\n        const dispatch = useDispatch()\r\n        const isAuth = useSelector<AppStateType>(state => state.auth.isAuth)\r\n        const login = useSelector<AppStateType>(state => state.auth.data.login)\r\n\r\n        useEffect(()=>{},[isAuth, login])\r\n\r\n\r\n        const onClickHandler = useCallback(() => {\r\n            dispatch(logoutUser())\r\n        }, [dispatch])\r\n\r\n        return (\r\n            <PageHeader title={'Social Network'} extra={\r\n                isAuth ?\r\n                    <div className={style.userStatus}>\r\n                        <NavLink to=\"/social-network/profile\">\r\n                            <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                            {login}\r\n                        </NavLink>\r\n                        <Button onClick={onClickHandler}>Log Out</Button>\r\n                    </div>\r\n                    : <NavLink to=\"/social-network/login\">\r\n                        <Button color=\"primary\">Login</Button>\r\n                    </NavLink>\r\n            }/>\r\n        )\r\n    }\r\n)","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateStatus} from \"../../../../redux/profilleReducer\";\r\nimport {Input} from \"antd\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n}\r\n\r\nexport const ProfileStatus = React.memo(({status, ...restProps}: ProfileStatusPropsType) => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const [editMode, setEditMode] = useState<boolean>(false)\r\n        const [newStatus, setNewStatus] = useState<string>(status)\r\n\r\n        const onDoubleClickHandler = () => {\r\n            setEditMode(true)\r\n            setNewStatus(status)\r\n        }\r\n\r\n        const onBlurHandler = () => {\r\n            setEditMode(false)\r\n            dispatch(updateStatus(newStatus))\r\n        }\r\n\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(false)\r\n                dispatch(updateStatus(newStatus))\r\n            }\r\n        }\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setNewStatus(e.currentTarget.value)\r\n        }\r\n\r\n        return (\r\n            <div style={{height: '32px'}}>\r\n                {!editMode ?\r\n                    <span onDoubleClick={onDoubleClickHandler}>{status ? status : '-----'}</span> :\r\n                    <Input autoFocus={true}\r\n                           onBlur={onBlurHandler}\r\n                           onKeyPress={onKeyPressHandler}\r\n                           onChange={onChangeHandler}\r\n                           value={newStatus}>\r\n                    </Input>\r\n                }\r\n            </div>\r\n        );\r\n\r\n    }\r\n)","import React from \"react\";\r\nimport defaultImg from \"../../../assets/img/sveta.jpg\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport style from \"./ProfileInfo.module.css\"\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getProfilePage} from \"../../../redux/Selectors\";\r\n\r\nfunction ProfileInfo() {\r\n\r\n    const profilePage = useSelector(getProfilePage)\r\n\r\n    if (!profilePage.profile) {\r\n        return <Preloader/>\r\n    } else {\r\n\r\n        return (\r\n            <div className={style.infoContainer}>\r\n                <div className={style.mainInfo}>\r\n                    <img className={style.ava} alt={`${profilePage.profile.userID} user ava`}\r\n                         src={profilePage.profile.photos.small !== null ? profilePage.profile.photos.small : defaultImg}/>\r\n                    <div className={style.description}>\r\n                        <span className={style.fullName}>{profilePage.profile.fullName}</span>\r\n                        <ProfileStatus status={profilePage.status}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileInfo","import React, {useState} from 'react';\r\nimport style from './Post.module.css'\r\nimport {PostType} from '../../../../redux/profilleReducer';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport defaultImg from \"../../../../assets/img/sveta.jpg\";\r\nimport {Avatar, Button, Card} from \"antd\";\r\nimport {HeartFilled, HeartOutlined} from \"@ant-design/icons\"\r\n\r\n\r\nfunction Post(props: PostType) {\r\n\r\n    const userImage = useSelector<AppStateType, string>(state => state.profilePage.profile.photos.small)\r\n    const userName = useSelector<AppStateType, string>(state => state.profilePage.profile.fullName)\r\n\r\n    const [like, setLike] = useState<boolean>(false)\r\n\r\n    return (\r\n        <Card title={\r\n            <div className={style.header}>\r\n                <Avatar size={'large'} src={userImage !== null ? userImage : defaultImg} alt={'userImage'}/>\r\n                <span>{userName}</span>\r\n            </div>\r\n        } className={style.item}>\r\n            <div>\r\n                {props.postContent}\r\n            </div>\r\n            <div className={style.likes}>\r\n                <span>{props.postLikes}</span>\r\n                <Button icon={like ? <HeartFilled/> : <HeartOutlined/>}\r\n                        onClick={() => setLike(!like)}\r\n                        shape={\"circle\"}\r\n                        type={'text'}/>\r\n            </div>\r\n\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Post;","import React, {MouseEvent} from 'react'\r\nimport style from './UserPosts.module.css'\r\nimport Post from \"./Post/Post\"\r\nimport {UsersPostsPropsType} from \"./UserPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPost} from \"../../../redux/profilleReducer\";\r\nimport {Button} from 'antd';\r\n\r\ntype AddPostType = {\r\n    post: string\r\n}\r\n\r\n\r\nconst AddPost: React.FC<InjectedFormProps<AddPostType>> = (props) => {\r\n\r\n    const onClickHandler = (e: MouseEvent<HTMLButtonElement>) => {\r\n        props.handleSubmit(e)\r\n        props.reset()\r\n    }\r\n\r\n    return (\r\n        <form className={style.form}>\r\n            <Field name={'post'} component={'input'} placeholder={'Type your post'}/>\r\n            <div>\r\n                <Button onClick={onClickHandler}>Send</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostReduxForm = reduxForm<AddPostType>({form: 'post'})(AddPost)\r\n\r\nfunction UserPosts(props: UsersPostsPropsType) {\r\n\r\n    let state = props.profilePage\r\n\r\n\r\n    let postsElement = state.postsData.map(m =>\r\n        <Post\r\n            key={m.id}\r\n            postContent={m.postContent}\r\n            postLikes={m.postLikes}\r\n            id={m.id}\r\n        />)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: AddPostType) => {\r\n        dispatch(addPost(formData.post))\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.userNewPosts}>\r\n                <AddPostReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n            {postsElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserPosts;","import {ProfileInitialStateType} from \"../../../redux/profilleReducer\";\r\nimport UserPosts from \"./UserPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: ProfileInitialStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {}\r\n\r\nexport type UsersPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst UserPostsContainer = connect(mapStateToProps, {})(UserPosts);\r\n\r\n\r\nexport default UserPostsContainer;","import React, {useEffect} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport UserPostsContainer from \"./UserPosts/UserPostsContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getProfile, getStatus} from \"../../redux/profilleReducer\";\r\nimport {getIsAuth, getUserId} from \"../../redux/Selectors\";\r\n\r\nfunction Profile() {\r\n\r\n    let userId = useSelector(getUserId)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        if (!userId ||userId === \":userId\") {\r\n            userId = '18309';\r\n        }\r\n        dispatch(getProfile(userId))\r\n        dispatch(getStatus(userId))\r\n    },[])\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    if(!isAuth){\r\n        return <Redirect to={'/social-network/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ProfileInfo/>\r\n            <UserPostsContainer/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css'\r\nimport {Layout} from 'antd';\r\nimport {Route} from 'react-router-dom';\r\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\r\nimport UsersPageContainer from './Components/UsersPage/UsersPageContainer';\r\nimport Music from './Components/Music/Music';\r\nimport News from './Components/News/News';\r\nimport Settings from './Components/Settings/Settings';\r\nimport Login from './Components/Login/Login';\r\nimport LeftNavbar from \"./Components/Navbars/LeftNavbar/LeftNavbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoadingOutlined} from \"@ant-design/icons\";\r\nimport {HeaderComponent} from \"./Components/Header/HeaderComponent\";\r\nimport {authUser} from \"./redux/authReducer\";\r\nimport {getIsInitialized} from \"./redux/Selectors\";\r\nimport Profile from \"./Components/Profile/Profile\";\r\n\r\nconst {Content, Footer} = Layout;\r\n\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const isInitialized = useSelector(getIsInitialized)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authUser())\r\n    }, [])\r\n\r\n\r\n    if(!isInitialized){\r\n        return <LoadingOutlined style={{fontSize: \"48px\"}} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HeaderComponent/>\r\n\r\n            <Layout style={{minHeight: '100vh'}}>\r\n                <LeftNavbar/>\r\n                <Layout className=\"site-layout\">\r\n                    <Content style={{margin: '0 16px'}}>\r\n                        <div className=\"site-layout-background\" style={{padding: 24, minHeight: 360}}>\r\n                            <Route path={\"/social-network/dialogs\"} render={() => <DialogsContainer/>}/>\r\n\r\n                            <Route path={\"/social-network/profile/:userId?\"} render={() => <Profile/>}/>\r\n\r\n                            <Route path={\"/social-network/users-page\"} render={() => <UsersPageContainer/>}/>\r\n\r\n\r\n                            <Route path={\"/social-network/music\"} component={Music}/>\r\n                            <Route path={\"/social-network/news\"} component={News}/>\r\n                            <Route path={\"/social-network/settings\"} component={Settings}/>\r\n                            <Route exact path={\"/social-network/login\"} component={Login}/>\r\n                        </div>\r\n                    </Content>\r\n                    <Footer style={{textAlign: 'center'}}>Social Network ©2021 by Matumba125</Footer>\r\n                </Layout>\r\n            </Layout>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from \"./redux/reduxStore\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userInfo\":\"UserPage_userInfo__1DlE8\",\"img\":\"UserPage_img__3eEIc\",\"ava\":\"UserPage_ava__XYoxP\",\"descriptionWrapper\":\"UserPage_descriptionWrapper__1qNFJ\",\"description\":\"UserPage_description__2mX2r\",\"item\":\"UserPage_item__2WanN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"Login_formWrapper__Qq-gU\",\"inputItem\":\"Login_inputItem__N37h_\",\"formItem\":\"Login_formItem__2fyxt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoContainer\":\"ProfileInfo_infoContainer__1BEBN\",\"mainInfo\":\"ProfileInfo_mainInfo__150Qa\",\"description\":\"ProfileInfo_description__np7mD\",\"fullName\":\"ProfileInfo_fullName__1BFQY\",\"ava\":\"ProfileInfo_ava__3pWAT\"};"],"sourceRoot":""}