{"version":3,"sources":["Components/UsersPage/UserPage/UserPage.module.css","Components/Dialogs/Dialogs.module.css","Components/Profile/UserPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileSettings/ProfileSettings.module.css","Components/UsersPage/UsersPage.module.css","Components/Header/Header.module.css","Components/Profile/UserPosts/UserPosts.module.css","Components/Dialogs/DialogItem/DialogItem.module.css","Components/Dialogs/Message/Message.module.css","Components/Login/Login.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","reportWebVitals.ts","assets/img/userAvatar.jpg","api/api.ts","redux/profilleReducer.ts","assets/img/dimych.jpg","assets/img/andrey.jpg","assets/img/sveta.jpg","redux/dialogsReducer.ts","redux/rightNavbarReducer.ts","redux/usersReducer.ts","redux/authReducer.ts","redux/reduxStore.ts","Components/Navbars/LeftNavbar/LeftNavbar.tsx","Components/Header/HeaderComponent.tsx","redux/Selectors.ts","Components/common/Preloader/Preloader.tsx","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileSettings/ProfileSettings.tsx","Components/Profile/ProfileInfo/ProfilePhotoChange/ProfilePhotoChange.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/UserPosts/Post/Post.tsx","Components/Profile/UserPosts/UserPosts.tsx","Components/Profile/Profile.tsx","Components/Music/Music.tsx","Components/News/News.tsx","Components/Settings/Settings.tsx","Components/UsersPage/UserPage/UserPage.tsx","Components/UsersPage/UsersPage.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/RoutingComponent/RoutingComponent.tsx","Components/Login/Login.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","UsersAPI","currentPage","pageSize","get","response","data","FollowAPI","id","delete","post","ProfileAPI","userId","put","status","image","formData","FormData","append","AuthorizeAPI","ADD_POST","SET_STATUS","SET_USER_PROFILE","initialState","profile","photos","large","myPhoto","small","fullName","aboutMe","postsData","v1","postContent","postLikes","setStatus","newText","type","getProfile","dispatch","updateStatus","newStatus","console","log","resultCode","updateProfile","state","store","getState","updatedProfile","userID","profilePage","lookingForAJob","lookingForAJobDescription","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","auth","updatePhoto","profileReducer","action","newPost","newPostText","ADD_MESSAGE","dialogsData","userName","avatar","dimych","andrey","sveta","messageData","messageText","newMessageText","dialogsReducer","newMessage","InitialState","contactsData","rightNavbarReducer","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","CHANGE_FETCHING_STATUS","CHANGE_RESPONSE_STATUS","users","totalCount","isFetching","responseInProgress","followingUsers","changeFetchingStatus","changeResponseStatus","getUsers","items","setCurrentPage","followUnfollow","following","unfollow","follow","usersReducer","map","m","followed","filter","email","login","isAuth","isInitialized","authReducer","rootReducer","combineReducers","dialogsPage","rightNavbar","createStore","applyMiddleware","thunkMiddleware","Sider","Layout","LeftNavbar","useState","collapsed","setCollapsed","collapsible","onCollapse","theme","mode","Item","icon","NotificationOutlined","to","UserOutlined","MailOutlined","TeamOutlined","CustomerServiceOutlined","SettingOutlined","HeaderComponent","React","memo","useDispatch","useSelector","useEffect","onClickHandler","useCallback","title","extra","className","style","userStatus","backgroundColor","onClick","color","getIsAuth","getIsInitialized","getCurrentUserId","getProfilePage","getUserId","getUsersData","getTotalUsersCount","getPageSize","getCurrentPage","getFollowingUsers","getDialogsPageData","getUserPostsData","antIcon","LoadingOutlined","fontSize","spin","Preloader","display","width","justifyContent","size","indicator","ProfileStatus","editMode","setEditMode","setNewStatus","onDoubleClickHandler","height","autoFocus","onBlur","onKeyPress","e","key","onChange","currentTarget","value","onDoubleClick","EditOutlined","ProfileSettings","props","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","a","resetForm","onSubmitClick","visible","onOk","handleSubmit","onCancel","onCancelClick","form","placeholder","getFieldProps","checkbox","checked","ProfilePhotoChange","selectPhoto","ProfileInfo","modalStatus","setModalStatus","changePhoto","setChangePhoto","currentUserId","setImage","onPhotoSubmitClick","target","files","infoContainer","mainInfo","avaWrapper","ava","alt","src","defaultImg","description","workStatus","userDataContainer","editButton","GithubOutlined","socialLink","FacebookOutlined","InstagramOutlined","TwitterOutlined","YoutubeOutlined","GlobalOutlined","ShareAltOutlined","Post","userImage","like","setLike","header","item","likes","HeartFilled","HeartOutlined","shape","UserPosts","postData","isCurrentProfileBelongsToUser","postsElement","userNewPosts","render","label","name","TextArea","Profile","useParams","getStatus","Music","News","Settings","UserPage","user","userInfo","img","disabled","some","UserDeleteOutlined","UserAddOutlined","textDecoration","descriptionWrapper","textAlign","UsersPage","usersPage","pagination","current","total","page","DialogItem","path","dialog","Message","message","Dialogs","dialogsPageData","dialogsElement","u","messageElement","dialogs","dialogs_items","messages","addMessage","RoutingComponent","component","Login","password","rememberMe","actions","validate","errors","test","formWrapper","href","Password","Content","Footer","App","setUserData","finally","minHeight","margin","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a1290f67.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userInfo\":\"UserPage_userInfo__3MLXv\",\"img\":\"UserPage_img__156KE\",\"ava\":\"UserPage_ava__1gQrB\",\"descriptionWrapper\":\"UserPage_descriptionWrapper__3yZxE\",\"description\":\"UserPage_description__3B2J7\",\"item\":\"UserPage_item__9Qja0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2goUN\",\"dialogs_items\":\"Dialogs_dialogs_items__1JDUH\",\"messages\":\"Dialogs_messages__iGu3o\",\"addMessage\":\"Dialogs_addMessage__165qa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Post_header__1tqHL\",\"item\":\"Post_item__24f3h\",\"likes\":\"Post_likes__1RzjT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileSettings_form__1rSQL\",\"checkbox\":\"ProfileSettings_checkbox__9ERdH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPage\":\"UsersPage_usersPage__2_3I7\",\"selectedPage\":\"UsersPage_selectedPage__2Cul_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userStatus\":\"Header_userStatus__2PMWF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userNewPosts\":\"UserPosts_userNewPosts__2GPsv\",\"form\":\"UserPosts_form__2ZqT6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__V9wTe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1p5Lb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"Login_formWrapper__1XssD\",\"inputItem\":\"Login_inputItem__bFZGa\",\"formItem\":\"Login_formItem__2MqJa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoContainer\":\"ProfileInfo_infoContainer__225Sp\",\"mainInfo\":\"ProfileInfo_mainInfo__2kUCl\",\"description\":\"ProfileInfo_description__1VwtT\",\"fullName\":\"ProfileInfo_fullName__3V4m3\",\"avaWrapper\":\"ProfileInfo_avaWrapper__3WCOi\",\"ava\":\"ProfileInfo_ava__3LKTB\",\"workStatus\":\"ProfileInfo_workStatus__26r-F\",\"userDataContainer\":\"ProfileInfo_userDataContainer__1q0FO\",\"socialLink\":\"ProfileInfo_socialLink__34X4A\",\"editButton\":\"ProfileInfo_editButton__1Z8aA\"};","import {ReportHandler} from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export default __webpack_public_path__ + \"static/media/userAvatar.9ca0a8b7.jpg\";","import axios from \"axios\";\r\nimport {FormikErrorType} from \"../Components/Login/Login\";\r\nimport {ProfileUpdatingType} from \"../redux/profilleReducer\";\r\nimport {UploadChangeParam} from \"antd/lib/upload\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'd5ee63b2-b8ea-4e76-b89c-c960812b3f51'\r\n    }\r\n});\r\n\r\nexport const UsersAPI = {\r\n    getUsers: (currentPage: number, pageSize: number) => {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const FollowAPI = {\r\n    unfollowUser: (id: string) => {\r\n        return instance.delete(`follow/${id}`,).then(response => response.data)\r\n    },\r\n    followUser: (id: string) => {\r\n        return instance.post(`follow/${id}`).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfileInfo: (userId: string) => {\r\n        return instance.get(`profile/${userId}`).then(response => response.data)\r\n    },\r\n    getStatus: (userId: string) => {\r\n        return instance.get(`profile/status/${userId}`);\r\n    },\r\n    updateProfile: (data: ProfileUpdatingType) => {\r\n        return instance.put(`profile`, data)\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return instance.put(`profile/status`, {\r\n            status: status\r\n        })\r\n    },\r\n    updatePhoto: (image: File) => {\r\n        const formData = new FormData()\r\n        //@ts-ignore\r\n        formData.append('image', image)\r\n        return instance.put('profile/photo', formData,\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const AuthorizeAPI = {\r\n    authorizeUser: () => {\r\n        return instance.get(`auth/me`).then(response => response.data)\r\n    },\r\n\r\n    loginUser: (formData: FormikErrorType) => {\r\n        return instance.post('auth/login', formData)\r\n    },\r\n    logoutUser: () => {\r\n        return instance.delete('auth/login')\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport store, {ActionTypes} from \"./reduxStore\";\r\nimport {PhotosType} from \"./usersReducer\";\r\nimport myPhoto from \"../assets/img/userAvatar.jpg\"\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileAPI} from \"../api/api\";\r\nimport {UploadChangeParam} from \"antd/lib/upload\";\r\nimport {UploadFile} from \"antd/es/upload/interface\";\r\n\r\n\r\nexport type PostType = {\r\n    id: string\r\n    postContent: string\r\n    postLikes: number\r\n}\r\n\r\ntype ContactsType = {\r\n    facebook?: string\r\n    website?: string\r\n    vk?: string\r\n    twitter?: string\r\n    instagram?: string\r\n    youtube?: string\r\n    github?: string\r\n    mainLink?: string\r\n}\r\n\r\n\r\ntype AdditionalUpdatingType = {\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    fullName: string\r\n    aboutMe: string\r\n}\r\n\r\nexport type ProfileUpdatingType = ContactsType & AdditionalUpdatingType\r\n\r\n\r\nexport type ProfileDataType = {\r\n    aboutMe: string\r\n    contacts?: ContactsType\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    userId: string\r\n    photos: PhotosType\r\n    fullName: string\r\n}\r\n\r\nexport type ProfileInitialStateType = {\r\n    profile: ProfileDataType\r\n    status: string\r\n    postsData: Array<PostType>\r\n}\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_STATUS = 'SET-STATUS';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\n\r\nlet initialState: ProfileInitialStateType = {\r\n    profile: {\r\n        photos: {\r\n            large: myPhoto,\r\n            small: myPhoto,\r\n        },\r\n        fullName: '',\r\n        aboutMe: '',\r\n        userId: '',\r\n    },\r\n    status: '',\r\n    postsData: [\r\n        {\r\n            id: v1(),\r\n            postContent: \"Hello World !!!\",\r\n            postLikes: 15,\r\n\r\n        },\r\n        {\r\n            id: v1(),\r\n            postContent: \"It's my first post!!\",\r\n            postLikes: 28\r\n        }\r\n    ],\r\n}\r\n\r\nconst profileReducer = (state: ProfileInitialStateType = initialState,\r\n                        action: ActionTypes): ProfileInitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: v1(),\r\n                postContent: action.newPostText,\r\n                postLikes: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                postsData: [newPost, ...state.postsData],\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.newText\r\n            }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPost = (newPostText: string) => ({\r\n    type: ADD_POST,\r\n    newPostText,\r\n} as const)\r\n\r\n\r\nexport const setUserProfile = (profile: ProfileDataType) => ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n} as const)\r\n\r\nexport const setStatus = (newText: string) => ({type: SET_STATUS, newText} as const)\r\n\r\nexport const getProfile = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.getProfileInfo(userId).then(data => {\r\n            dispatch(setUserProfile(data))\r\n        });\r\n    }\r\n}\r\nexport const getStatus = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.getStatus(userId).then(response => {\r\n            dispatch(setStatus(response.data))\r\n        });\r\n    }\r\n}\r\nexport const updateStatus = (newStatus: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.updateStatus(newStatus).then(response => {\r\n            console.log(response)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(newStatus))\r\n            }\r\n        })\r\n    };\r\n}\r\n\r\nexport const updateProfile = (data: ProfileUpdatingType) => {\r\n    const state = store.getState()\r\n    const updatedProfile = {\r\n        userID: state.profilePage.profile.userId,\r\n        lookingForAJob: data.lookingForAJob,\r\n        lookingForAJobDescription: data.lookingForAJobDescription ? data.lookingForAJobDescription : '-',\r\n        fullName: data.fullName,\r\n        aboutMe: data.aboutMe ? data.aboutMe : '-',\r\n        contacts: {\r\n            github: data.github,\r\n            vk: data.vk,\r\n            facebook: data.facebook,\r\n            instagram: data.instagram,\r\n            twitter: data.twitter,\r\n            website: data.website,\r\n            youtube: data.youtube,\r\n            mainLink: data.mainLink,\r\n        },\r\n    }\r\n    return (dispatch: Dispatch) =>{\r\n       ProfileAPI.updateProfile(updatedProfile)\r\n           .then(()=>{\r\n               //@ts-ignore\r\n               dispatch(getProfile(state.auth.data.id))\r\n           })\r\n    }\r\n}\r\n\r\nexport const updatePhoto = (image: File) =>{\r\n    const userId = store.getState().auth.data.id\r\n    return (dispatch: Dispatch)=>{\r\n        ProfileAPI.updatePhoto(image)\r\n            .then(()=>{\r\n                //@ts-ignore\r\n                dispatch(getProfile(userId))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer","export default __webpack_public_path__ + \"static/media/dimych.4cfb0ddb.jpg\";","export default __webpack_public_path__ + \"static/media/andrey.05d81a41.jpg\";","export default __webpack_public_path__ + \"static/media/sveta.2e2af972.jpg\";","import {v1} from \"uuid\";\r\nimport dimych from \"../assets/img/dimych.jpg\";\r\nimport andrey from \"../assets/img/andrey.jpg\";\r\nimport sveta from \"../assets/img/sveta.jpg\";\r\nimport {ActionTypes} from \"./reduxStore\";\r\n\r\n\r\nexport type DialogsItemPropsType = {\r\n    id: string\r\n    userName: string\r\n    avatar?: string\r\n}\r\n\r\nexport type MessagePropsType = {\r\n    messageText: string\r\n    id: string\r\n}\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\n\r\nconst ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {id: '2', userName: \"Dimych\", avatar: dimych},\r\n        {id: v1(), userName: \"Andrey\", avatar: andrey},\r\n        {id: v1(), userName: \"Sveta\", avatar: sveta},\r\n        {id: v1(), userName: \"Sasha\"},\r\n        {id: v1(), userName: \"Viktor\"},\r\n        {id: v1(), userName: \"Valera\"}\r\n    ] as Array<DialogsItemPropsType>,\r\n\r\n    messageData: [\r\n        {id: v1(), messageText: \"HI\"},\r\n        {id: v1(), messageText: \"Hello\"},\r\n        {id: v1(), messageText: \"YO\"}\r\n    ] as Array<MessagePropsType>,\r\n\r\n    newMessageText: ''\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsInitialStateType = initialState,\r\n                        action: ActionTypes): DialogsInitialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const newMessage: MessagePropsType = {\r\n                id: v1(),\r\n                messageText: action.newMessage\r\n            };\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData, newMessage],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const addMessage = (newMessage: string) => ({\r\n    type: ADD_MESSAGE,\r\n    newMessage\r\n} as const)\r\n\r\n\r\nexport default dialogsReducer","import {v1} from \"uuid\";\r\nimport dimych from \"../assets/img/dimych.jpg\";\r\nimport andrey from \"../assets/img/andrey.jpg\";\r\nimport sveta from \"../assets/img/sveta.jpg\";\r\nimport {ActionTypes} from \"./reduxStore\";\r\n\r\ntype ContactsDataType = {\r\n    id: string\r\n    userName: string\r\n    avatar: string\r\n}\r\n\r\nexport type RightNavInitialStateType = typeof InitialState\r\n\r\nconst InitialState = {\r\n    contactsData: [\r\n        {id: v1(), userName: \"Dimych\", avatar: dimych},\r\n        {id: v1(), userName: \"Andrey\", avatar: andrey},\r\n        {id: v1(), userName: \"Sveta\", avatar: sveta}\r\n    ] as Array<ContactsDataType>\r\n}\r\n\r\nexport const rightNavbarReducer = (state: RightNavInitialStateType = InitialState, action: ActionTypes): RightNavInitialStateType => {\r\n\r\n    return state\r\n}\r\n\r\nexport default rightNavbarReducer","import {ActionTypes} from \"./reduxStore\";\r\nimport {FollowAPI, UsersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type PhotosType = {\r\n    large?: string\r\n    small?: string\r\n}\r\n\r\nexport type UserType = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n    followed: boolean\r\n    status: string\r\n    photos: PhotosType\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    responseInProgress: boolean\r\n    followingUsers: Array<string>\r\n}\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\r\nconst CHANGE_FETCHING_STATUS = 'CHANGE-FETCHING-STATUS';\r\nconst CHANGE_RESPONSE_STATUS = 'CHANGE-RESPONSE-STATUS';\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    responseInProgress: true,\r\n    followingUsers: [],\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState,\r\n                      action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(m =>\r\n                    m.id === action.id ? {...m, followed: true} : m),\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(m =>\r\n                    m.id === action.id ? {...m, followed: false} : m)\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case  SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n        case CHANGE_FETCHING_STATUS: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case CHANGE_RESPONSE_STATUS: {\r\n            return {\r\n                ...state,\r\n                followingUsers: action.responseInProgress\r\n                    ? [...state.followingUsers, action.id]\r\n                    : state.followingUsers.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const follow = (id: string) => ({\r\n    type: FOLLOW,\r\n    id\r\n} as const)\r\nexport const unfollow = (id: string) => ({\r\n    type: UNFOLLOW,\r\n    id\r\n} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({\r\n    type: SET_USERS,\r\n    users\r\n} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage\r\n} as const)\r\nexport const setTotalUsersCount = (totalCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalCount\r\n} as const)\r\nexport const changeFetchingStatus = (isFetching: boolean) => ({\r\n    type: CHANGE_FETCHING_STATUS,\r\n    isFetching\r\n} as const)\r\nexport const changeResponseStatus = (responseInProgress: boolean, id: string) => ({\r\n    type: CHANGE_RESPONSE_STATUS,\r\n    responseInProgress,\r\n    id,\r\n} as const)\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        dispatch(changeFetchingStatus(true))\r\n        UsersAPI.getUsers(currentPage, pageSize)\r\n            .then(data => {\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setCurrentPage(currentPage))\r\n                dispatch(setTotalUsersCount(data.totalCount))\r\n                dispatch(changeFetchingStatus(false))\r\n\r\n            });\r\n    }\r\n}\r\n\r\nexport const followUnfollow = (id: string, following: boolean) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        dispatch(changeResponseStatus(true, id))\r\n        if (following) {\r\n            FollowAPI.unfollowUser(id)\r\n                .then(data => {\r\n                    if (data.resultCode === 0) {\r\n                        dispatch(unfollow(id))\r\n                        dispatch(changeResponseStatus(false, id))\r\n                    }\r\n                })\r\n        } else {\r\n            FollowAPI.followUser(id)\r\n                .then(data => {\r\n                    if (data.resultCode === 0) {\r\n                        dispatch(follow(id))\r\n                        dispatch(changeResponseStatus(false, id))\r\n                    }\r\n                })\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default usersReducer","import {ActionTypes} from \"./reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AuthorizeAPI} from \"../api/api\";\r\nimport {FormikErrorType} from \"../Components/Login/Login\";\r\n\r\n\r\nexport type DataType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type AuthInitialStateType = {\r\n    data: DataType\r\n    isAuth: boolean\r\n    isInitialized: boolean\r\n}\r\n\r\nlet initialState: AuthInitialStateType = {\r\n    data: {\r\n        id: '',\r\n        email: '',\r\n        login: '',\r\n    },\r\n    isAuth: false,\r\n    isInitialized: false\r\n}\r\n\r\nconst authReducer = (state: AuthInitialStateType = initialState,\r\n                     action: ActionTypes): AuthInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-USER-DATA':\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                isAuth: true,\r\n            }\r\n        case 'USER_BEEN_LOGINED':\r\n            return {\r\n                ...state,\r\n                isAuth: true\r\n            }\r\n        case 'USER_BEEN_LOGINED_OUT':\r\n            return {\r\n                ...state,\r\n                isAuth: false\r\n            }\r\n        case 'SET-APP-INITIALIZED':\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserData = (data: DataType) => ({\r\n    type: 'SET-USER-DATA',\r\n    data\r\n} as const)\r\nexport const setAppInitialized = (isInitialized: boolean) => ({\r\n    type: 'SET-APP-INITIALIZED',\r\n    isInitialized\r\n} as const)\r\n\r\nexport const userBeenLogined = () => ({\r\n    type: 'USER_BEEN_LOGINED'\r\n} as const)\r\n\r\nexport const userBeenLoginedOut = () => ({\r\n    type: 'USER_BEEN_LOGINED_OUT'\r\n} as const)\r\n\r\n\r\nexport const authUser = () => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        AuthorizeAPI.authorizeUser().then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(setUserData(data.data))\r\n            }\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppInitialized(true))\r\n            })\r\n    }\r\n}\r\n\r\nexport const loginUser = (formData: FormikErrorType) => {\r\n    return (dispatch: Dispatch) => {\r\n        AuthorizeAPI.loginUser(formData).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(userBeenLogined())\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const logoutUser = () => {\r\n    return (dispatch: Dispatch) => {\r\n        AuthorizeAPI.logoutUser().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(userBeenLoginedOut())\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default authReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {addPost, getProfile, setStatus, setUserProfile} from \"./profilleReducer\";\r\nimport dialogsReducer, {addMessage} from \"./dialogsReducer\";\r\nimport rightNavbarReducer from \"./rightNavbarReducer\";\r\nimport usersReducer, {\r\n    changeFetchingStatus,\r\n    changeResponseStatus,\r\n    follow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    unfollow\r\n} from \"./usersReducer\";\r\nimport authReducer, {setAppInitialized, setUserData, userBeenLogined, userBeenLoginedOut} from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\n\r\nexport type ActionTypes =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof addMessage> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof changeFetchingStatus> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setUserData> |\r\n    ReturnType<typeof changeResponseStatus> |\r\n    ReturnType<typeof setStatus> |\r\n    ReturnType<typeof userBeenLogined> |\r\n    ReturnType<typeof userBeenLoginedOut> |\r\n    ReturnType<typeof setAppInitialized>\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    rightNavbar: rightNavbarReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store","import React, {useState} from 'react';\r\nimport {Layout, Menu} from \"antd\";\r\nimport {\r\n    CustomerServiceOutlined,\r\n    MailOutlined,\r\n    NotificationOutlined,\r\n    SettingOutlined,\r\n    TeamOutlined,\r\n    UserOutlined\r\n} from \"@ant-design/icons\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst {Sider} = Layout;\r\n\r\nfunction LeftNavbar() {\r\n\r\n    const [collapsed, setCollapsed] = useState<boolean>(true)\r\n\r\n    const onCollapse = () => {\r\n        setCollapsed(!collapsed)\r\n    }\r\n\r\n    return (\r\n        <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\r\n            <Menu theme=\"dark\" mode=\"inline\">\r\n                <Menu.Item key=\"1\" icon={<NotificationOutlined/>}>\r\n                    <Link to=\"/social-network/news/\">News</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<UserOutlined/>}>\r\n                    <Link to=\"/social-network/profile/18309\">Profile</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" icon={<MailOutlined/>}>\r\n                    <Link to=\"/social-network/dialogs/\">Messages</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" icon={<TeamOutlined/>}>\r\n                    <Link to=\"/social-network/users-page\">Developers</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\" icon={<CustomerServiceOutlined/>}>\r\n                    <Link to=\"/social-network/music/\">Music</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"6\" icon={<SettingOutlined/>}>\r\n                    <Link to=\"/social-network/settings/\">Settings</Link>\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Sider>\r\n    );\r\n}\r\n\r\nexport default LeftNavbar;","import React, {useCallback, useEffect} from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {logoutUser} from \"../../redux/authReducer\";\r\nimport {Avatar, Button, PageHeader} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport style from './Header.module.css'\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\nexport const HeaderComponent = React.memo(() => {\r\n\r\n        const dispatch = useDispatch()\r\n        const isAuth = useSelector<AppStateType>(state => state.auth.isAuth)\r\n        const login = useSelector<AppStateType>(state => state.auth.data.login)\r\n\r\n        useEffect(()=>{},[isAuth, login])\r\n\r\n\r\n        const onClickHandler = useCallback(() => {\r\n            dispatch(logoutUser())\r\n        }, [dispatch])\r\n\r\n        return (\r\n            <PageHeader title={'Social Network'} extra={\r\n                isAuth ?\r\n                    <div className={style.userStatus}>\r\n                        <NavLink to=\"/social-network/profile\">\r\n                            <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                            {login}\r\n                        </NavLink>\r\n                        <Button onClick={onClickHandler}>Log Out</Button>\r\n                    </div>\r\n                    : <NavLink to=\"/social-network/login\">\r\n                        <Button color=\"primary\">Login</Button>\r\n                    </NavLink>\r\n            }/>\r\n        )\r\n    }\r\n)","import {AppStateType} from \"./reduxStore\";\r\nimport {PostType, ProfileInitialStateType} from \"./profilleReducer\";\r\nimport {UserType} from \"./usersReducer\";\r\nimport {DialogsInitialStateType} from \"./dialogsReducer\";\r\n\r\nexport const getIsAuth = (state: AppStateType): boolean => {\r\n    return state.auth.isAuth\r\n}\r\nexport const getIsInitialized = (state: AppStateType): boolean => {\r\n    return state.auth.isInitialized\r\n}\r\nexport const getCurrentUserId = (state: AppStateType): string => {\r\n    return state.auth.data.id\r\n}\r\n\r\nexport const getProfilePage = (state: AppStateType): ProfileInitialStateType => {\r\n    return state.profilePage\r\n}\r\nexport const getUserId = (state: AppStateType): string => {\r\n    return state.profilePage.profile.userId\r\n}\r\n\r\nexport const getUsersData = (state: AppStateType): Array<UserType> => {\r\n    return state.users.users\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType): number => {\r\n    return state.users.totalCount\r\n}\r\nexport const getPageSize = (state: AppStateType): number => {\r\n    return state.users.pageSize\r\n}\r\nexport const getCurrentPage = (state: AppStateType): number => {\r\n    return state.users.currentPage\r\n}\r\nexport const getFollowingUsers = (state: AppStateType): string[] => {\r\n    return state.users.followingUsers\r\n}\r\nexport const getDialogsPageData = (state: AppStateType): DialogsInitialStateType => {\r\n    return state.dialogsPage\r\n}\r\nexport const getUserPostsData = (state: AppStateType): PostType[] => {\r\n    return state.profilePage.postsData\r\n}\r\n\r\n","import {Space, Spin} from 'antd';\r\nimport React from 'react';\r\nimport {LoadingOutlined} from \"@ant-design/icons\";\r\n\r\nconst antIcon = <LoadingOutlined style={{fontSize: 48}} spin/>\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <Space style={{display: 'flex', width: '100%', justifyContent: \"center\"}} size=\"large\">\r\n            <Spin indicator={antIcon}/>\r\n        </Space>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateStatus} from \"../../../../redux/profilleReducer\";\r\nimport {Button, Input} from \"antd\";\r\nimport {EditOutlined} from \"@ant-design/icons\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n}\r\n\r\nexport const ProfileStatus = React.memo(({status, ...restProps}: ProfileStatusPropsType) => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const [editMode, setEditMode] = useState<boolean>(false)\r\n        const [newStatus, setNewStatus] = useState<string>(status)\r\n\r\n        const onDoubleClickHandler = () => {\r\n            setEditMode(true)\r\n            setNewStatus(status)\r\n        }\r\n\r\n        const onBlurHandler = () => {\r\n            setEditMode(false)\r\n            dispatch(updateStatus(newStatus))\r\n        }\r\n\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(false)\r\n                dispatch(updateStatus(newStatus))\r\n            }\r\n        }\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setNewStatus(e.currentTarget.value)\r\n        }\r\n\r\n        return (\r\n            <div style={{height: '32px'}}>\r\n                {!editMode ?\r\n                    <div>\r\n                        <span onDoubleClick={onDoubleClickHandler}>{status ? status : '-----'}</span>\r\n                        <Button type={'text'} icon={<EditOutlined/>} onClick={onDoubleClickHandler}/>\r\n                    </div> :\r\n                    <Input autoFocus={true}\r\n                           onBlur={onBlurHandler}\r\n                           onKeyPress={onKeyPressHandler}\r\n                           onChange={onChangeHandler}\r\n                           value={newStatus}>\r\n                    </Input>\r\n                }\r\n            </div>\r\n        );\r\n\r\n    }\r\n)","import Modal from 'antd/lib/modal/Modal';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {ProfileInitialStateType, updateProfile} from \"../../../../redux/profilleReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Button, Checkbox, Input, Upload} from \"antd\";\r\nimport style from './ProfileSettings.module.css'\r\nimport {UploadOutlined} from \"@ant-design/icons/lib/icons\";\r\nimport {UploadFile} from \"antd/es/upload/interface\";\r\n\r\ntype ProfileSettingsPropsType = {\r\n    visible: boolean\r\n    onCancelClick: () => void\r\n    onSubmitClick: () => void\r\n    profile: ProfileInitialStateType\r\n}\r\n\r\nconst ProfileSettings: React.FC<ProfileSettingsPropsType> = props => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            fullName: props.profile.profile.fullName,\r\n            lookingForAJobDescription: props.profile.profile.lookingForAJobDescription === '-' ? '' : props.profile.profile.lookingForAJobDescription,\r\n            lookingForAJob: props.profile.profile.lookingForAJob,\r\n            aboutMe: props.profile.profile.aboutMe === '-' ? '' : props.profile.profile.aboutMe,\r\n            github: props.profile.profile.contacts?.github,\r\n            vk: props.profile.profile.contacts?.vk,\r\n            facebook: props.profile.profile.contacts?.facebook,\r\n            instagram: props.profile.profile.contacts?.instagram,\r\n            twitter: props.profile.profile.contacts?.twitter,\r\n            website: props.profile.profile.contacts?.website,\r\n            youtube: props.profile.profile.contacts?.youtube,\r\n            mainLink: props.profile.profile.contacts?.mainLink,\r\n        },\r\n        onSubmit: async (values) => {\r\n            formik.resetForm();\r\n            await dispatch(updateProfile(values));\r\n            props.onSubmitClick()\r\n        },\r\n    })\r\n\r\n    const submitForm = () => {\r\n        formik.handleSubmit()\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Modal title={'Profile settings'} visible={props.visible} onOk={submitForm} onCancel={props.onCancelClick}>\r\n            <form className={style.form}>\r\n                <div>\r\n                    <h4>Full Name</h4>\r\n                    <Input\r\n                        placeholder={'Full Name'}\r\n                        {...formik.getFieldProps('fullName')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>About Me</h4>\r\n                    <Input\r\n                        placeholder={'About Me'}\r\n                        {...formik.getFieldProps('aboutMe')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Additional information for employers</h4>\r\n                    <Input\r\n                        placeholder={'Additional information for employers'}\r\n                        {...formik.getFieldProps('lookingForAJobDescription')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>GitHub</h4>\r\n                    <Input\r\n                        placeholder={'GitHub'}\r\n                        {...formik.getFieldProps('github')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>VK</h4>\r\n                    <Input\r\n                        placeholder={'VK'}\r\n                        {...formik.getFieldProps('vk')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Facebook</h4>\r\n                    <Input\r\n                        placeholder={'Facebook'}\r\n                        {...formik.getFieldProps('facebook')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Instagram</h4>\r\n                    <Input\r\n                        placeholder={'Instagram'}\r\n                        {...formik.getFieldProps('instagram')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Twitter</h4>\r\n                    <Input\r\n                        placeholder={'Twitter'}\r\n                        {...formik.getFieldProps('twitter')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Website</h4>\r\n                    <Input\r\n                        placeholder={'Website'}\r\n                        {...formik.getFieldProps('website')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>YouTube</h4>\r\n                    <Input\r\n                        placeholder={'YouTube'}\r\n                        {...formik.getFieldProps('youtube')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Main Link</h4>\r\n                    <Input\r\n                        placeholder={'Main Link'}\r\n                        {...formik.getFieldProps('mainLink')}\r\n                    />\r\n                </div>\r\n                <Checkbox\r\n                    className={style.checkbox}\r\n                    checked={formik.values.lookingForAJob}\r\n                    {...formik.getFieldProps('lookingForAJob')}\r\n                >I'm open to work</Checkbox>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ProfileSettings;","import React, {ChangeEvent} from 'react';\r\nimport {Modal} from \"antd\";\r\n\r\ntype ProfilePhotoPropsType = {\r\n    visible: boolean\r\n    onCancelClick: () => void\r\n    onSubmitClick: () => void\r\n    selectPhoto: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst ProfilePhotoChange: React.FC<ProfilePhotoPropsType> = props => {\r\n    return (\r\n        <Modal  visible={props.visible} onOk={props.onSubmitClick} onCancel={props.onCancelClick}>\r\n            <input onChange={props.selectPhoto} type={'file'}/>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ProfilePhotoChange;","import React, {ChangeEvent, useState} from \"react\";\r\nimport defaultImg from \"../../../assets/img/sveta.jpg\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport style from \"./ProfileInfo.module.css\"\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentUserId, getProfilePage} from \"../../../redux/Selectors\";\r\nimport ProfileSettings from \"./ProfileSettings/ProfileSettings\";\r\nimport {Avatar, Badge, Button} from \"antd\";\r\nimport {updatePhoto} from \"../../../redux/profilleReducer\";\r\nimport ProfilePhotoChange from \"./ProfilePhotoChange/ProfilePhotoChange\";\r\nimport {\r\n    EditOutlined, FacebookOutlined, GithubOutlined,\r\n    GlobalOutlined, InstagramOutlined, ShareAltOutlined, TwitterOutlined, YoutubeOutlined\r\n} from \"@ant-design/icons\";\r\n\r\nfunction ProfileInfo() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [modalStatus, setModalStatus] = useState<boolean>(false)\r\n    const [changePhoto, setChangePhoto] = useState<boolean>(false)\r\n\r\n    const profilePage = useSelector(getProfilePage)\r\n    const currentUserId = useSelector(getCurrentUserId)\r\n\r\n    const [image, setImage] = useState<File>()\r\n\r\n\r\n    const onCancelClick = () => {\r\n        setModalStatus(false)\r\n    }\r\n    const onSubmitClick = () => {\r\n        setModalStatus(false)\r\n    }\r\n\r\n    const onPhotoSubmitClick = async () => {\r\n        setChangePhoto(false)\r\n        image && await dispatch(updatePhoto(image))\r\n    }\r\n\r\n    const onPhotoCloseClick = () => {\r\n        setChangePhoto(false)\r\n    }\r\n\r\n    const selectPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        //@ts-ignore\r\n        setImage(e.target.files[0])\r\n    }\r\n\r\n    const onEditClick = () => {\r\n        setModalStatus(true)\r\n    }\r\n\r\n    const onPhotoClick = () => {\r\n        setChangePhoto(true)\r\n    }\r\n\r\n\r\n    if (!profilePage.profile) {\r\n        return <Preloader/>\r\n    } else {\r\n\r\n        return (\r\n            <>\r\n                <ProfileSettings visible={modalStatus} onSubmitClick={onSubmitClick} onCancelClick={onCancelClick}\r\n                                 profile={profilePage}/>\r\n                <ProfilePhotoChange visible={changePhoto} onSubmitClick={onPhotoSubmitClick}\r\n                                    onCancelClick={onPhotoCloseClick} selectPhoto={selectPhoto}/>\r\n                <div className={style.infoContainer}>\r\n                    <div className={style.mainInfo}>\r\n                        <div className={style.avaWrapper}>\r\n                            <Avatar className={style.ava} alt={`${profilePage.profile.userId} user ava`}\r\n                                    src={profilePage.profile.photos.small !== null ? profilePage.profile.photos.small : defaultImg}/>\r\n                            <Button type={'text'} icon={<EditOutlined/>} onClick={onPhotoClick}/>\r\n                        </div>\r\n                        <div className={style.description}>\r\n                        <span className={style.fullName}>{profilePage.profile.fullName}\r\n                            {profilePage.profile.lookingForAJob &&\r\n                            <span className={style.workStatus}>(Open to work)</span>}\r\n                        </span>\r\n                            <ProfileStatus status={profilePage.status}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className={style.userDataContainer}>\r\n                        {(profilePage.profile.userId === currentUserId) &&\r\n                        <Button className={style.editButton} onClick={onEditClick}>Edit Profile</Button>}\r\n                        {profilePage.profile.contacts?.github &&\r\n                        <p><GithubOutlined/> <a className={style.socialLink}>{profilePage.profile.contacts?.github}</a>\r\n                        </p>}\r\n                        {profilePage.profile.contacts?.facebook && <p><FacebookOutlined/> <a\r\n                            className={style.socialLink}>{profilePage.profile.contacts?.facebook}</a></p>}\r\n                        {profilePage.profile.contacts?.instagram && <p><InstagramOutlined/> <a\r\n                            className={style.socialLink}>{profilePage.profile.contacts?.instagram}</a></p>}\r\n                        {profilePage.profile.contacts?.twitter && <p><TwitterOutlined/> <a\r\n                            className={style.socialLink}>{profilePage.profile.contacts?.twitter}</a></p>}\r\n                        {profilePage.profile.contacts?.youtube && <p><YoutubeOutlined/> <a\r\n                            className={style.socialLink}>{profilePage.profile.contacts?.youtube}</a></p>}\r\n                        {profilePage.profile.contacts?.website &&\r\n                        <p><GlobalOutlined/> <a className={style.socialLink}>{profilePage.profile.contacts?.website}</a>\r\n                        </p>}\r\n                        {profilePage.profile.contacts?.mainLink && <p><ShareAltOutlined/> <a\r\n                            className={style.socialLink}>{profilePage.profile.contacts?.mainLink}</a></p>}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileInfo","import React, {useState} from 'react';\r\nimport style from './Post.module.css'\r\nimport {PostType} from '../../../../redux/profilleReducer';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport defaultImg from \"../../../../assets/img/sveta.jpg\";\r\nimport {Avatar, Button, Card} from \"antd\";\r\nimport {HeartFilled, HeartOutlined} from \"@ant-design/icons\"\r\n\r\n\r\nfunction Post(props: PostType) {\r\n\r\n    const userImage = useSelector<AppStateType, string | undefined>(state => state.profilePage.profile.photos.small)\r\n    const userName = useSelector<AppStateType, string>(state => state.profilePage.profile.fullName)\r\n\r\n    const [like, setLike] = useState<boolean>(false)\r\n\r\n    return (\r\n        <Card title={\r\n            <div className={style.header}>\r\n                <Avatar size={'large'} src={userImage !== null ? userImage : defaultImg} alt={'userImage'}/>\r\n                <span>{userName}</span>\r\n            </div>\r\n        } className={style.item}>\r\n            <div>\r\n                {props.postContent}\r\n            </div>\r\n            <div className={style.likes}>\r\n                <span>{props.postLikes}</span>\r\n                <Button icon={like ? <HeartFilled/> : <HeartOutlined/>}\r\n                        onClick={() => setLike(!like)}\r\n                        shape={\"circle\"}\r\n                        type={'text'}/>\r\n            </div>\r\n\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\nimport style from './UserPosts.module.css'\r\nimport Post from \"./Post/Post\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addPost} from \"../../../redux/profilleReducer\";\r\nimport {Formik} from \"formik\";\r\nimport {Form, FormItem, Input, SubmitButton} from \"formik-antd\";\r\nimport {getCurrentUserId, getProfilePage, getUserId, getUserPostsData} from \"../../../redux/Selectors\";\r\n\r\n\r\nfunction UserPosts() {\r\n\r\n    const postData = useSelector(getUserPostsData)\r\n\r\n\r\n    const currentUserId = useSelector(getCurrentUserId)\r\n    const userId = useSelector(getUserId)\r\n\r\n    const isCurrentProfileBelongsToUser = currentUserId === userId\r\n\r\n    let postsElement = postData.map(m =>\r\n        <Post\r\n            key={m.id}\r\n            postContent={m.postContent}\r\n            postLikes={m.postLikes}\r\n            id={m.id}\r\n        />)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.userNewPosts}>\r\n                <Formik\r\n                    initialValues={{\r\n                        post: ''\r\n                    }}\r\n                    onSubmit={(values, action) => {\r\n                        dispatch(addPost(values.post))\r\n                        action.resetForm()\r\n                    }}\r\n                    render={() => (\r\n                        <Form>\r\n                            {isCurrentProfileBelongsToUser && <div>\r\n                                <FormItem\r\n                                    label={'Your Post'}\r\n                                    name={'post'}\r\n                                >\r\n                                    <Input.TextArea name={'post'}/>\r\n                                </FormItem>\r\n                                <SubmitButton>Post</SubmitButton>\r\n                            </div>}\r\n                        </Form>\r\n                    )}\r\n                />\r\n            </div>\r\n            {postsElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserPosts;","import React, {useEffect} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getProfile, getStatus} from \"../../redux/profilleReducer\";\r\nimport {useParams} from 'react-router-dom';\r\nimport UserPosts from \"./UserPosts/UserPosts\";\r\nimport {getCurrentUserId} from \"../../redux/Selectors\";\r\n\r\n\r\ntype UserIdType = {\r\n    userId: string\r\n}\r\n\r\nexport const Profile = () => {\r\n\r\n    let params = useParams<UserIdType>()\r\n\r\n    let userId = params.userId\r\n\r\n    const currentUserId = useSelector(getCurrentUserId)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        if (!userId ||userId === \":userId\") {\r\n            userId = currentUserId;\r\n        }\r\n        dispatch(getProfile(userId))\r\n        dispatch(getStatus(userId))\r\n    },[userId])\r\n\r\n    return (\r\n        <>\r\n            <ProfileInfo/>\r\n            <UserPosts/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\n\r\n\r\nfunction Music() {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\n\r\n\r\nfunction News() {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\n\r\nfunction Settings() {\r\n\r\n\r\n    return (\r\n        <>\r\n            Settings\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport style from \"./UserPage.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport defaultImg from \"../../../assets/img/sveta.jpg\";\r\nimport {followUnfollow, UserType} from \"../../../redux/usersReducer\";\r\nimport {Button, Card} from \"antd\";\r\nimport {UserAddOutlined, UserDeleteOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingUsers} from \"../../../redux/Selectors\";\r\n\r\n\r\ntype UserPagePropsType = {\r\n    user: UserType\r\n}\r\n\r\nexport const UserPage = React.memo(({\r\n                                        user,\r\n                                        ...restProps\r\n                                    }: UserPagePropsType) => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const followingUsers = useSelector(getFollowingUsers)\r\n\r\n        return (\r\n            <div className={style.userInfo} key={user.id}>\r\n                <div className={style.ava}>\r\n                    <NavLink to={'/social-network/profile/' + user.id}\r\n                    >\r\n                        <img src={user.photos.small !== null ? user.photos.small : defaultImg}\r\n                             alt={user.id + ' avatar'}\r\n                             className={style.img}/>\r\n                    </NavLink>\r\n                    <Button size={'small'} onClick={() => dispatch(followUnfollow(user.id, user.followed))}\r\n                            disabled={followingUsers.some(id => id === user.id)}\r\n                            icon={!user.followed ? <UserAddOutlined/> : <UserDeleteOutlined/>}\r\n                            shape={\"circle\"}\r\n                            type={'text'}\r\n                    >\r\n                    </Button>\r\n                </div>\r\n                <Card title={<NavLink to={'/social-network/profile/'+ user.id}\r\n                                      style={{textDecoration: 'none', color: 'black'}}>{user.name}</NavLink>}\r\n                      className={style.descriptionWrapper}>\r\n\r\n                    <div className={style.description} style={{fontSize: \"13px\"}}>\r\n                        \" {user.status} \"\r\n                        <div style={{fontSize: \"15px\", textAlign: 'center'}}>\r\n                            <div>\r\n                                Belarus,\r\n                            </div>\r\n                            <div>\r\n                                Minsk\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n\r\n","import React, {useEffect} from 'react';\r\nimport style from \"./UsersPage.module.css\";\r\nimport {getUsers} from \"../../redux/usersReducer\";\r\nimport {UserPage} from \"./UserPage/UserPage\";\r\nimport {Pagination} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentPage, getPageSize, getTotalUsersCount, getUsersData} from \"../../redux/Selectors\";\r\n\r\n\r\nconst UsersPage: React.FC = () => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const users = useSelector(getUsersData)\r\n        const currentPage = useSelector(getCurrentPage)\r\n        const pageSize = useSelector(getPageSize)\r\n        const totalCount = useSelector(getTotalUsersCount)\r\n\r\n        useEffect(()=>{\r\n                dispatch(getUsers(currentPage,pageSize))\r\n        },[currentPage, pageSize])\r\n\r\n        return (\r\n            <div className={style.usersPage}>\r\n                {users.map(m => <UserPage user={m} key={m.id}/>)}\r\n                <div className={style.pagination}>\r\n                        <Pagination\r\n                            current={currentPage}\r\n                            pageSize={pageSize}\r\n                            total={totalCount}\r\n                            onChange={(page)=>dispatch(getUsers(page, pageSize))}\r\n                        />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default UsersPage;","import React from \"react\";\r\nimport style from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogsItemPropsType} from \"../../../redux/dialogsReducer\";\r\n\r\n\r\nconst DialogItem: React.FC<DialogsItemPropsType> = (props) => {\r\n    let path = \"/social-network/profile/\" + props.id;\r\n\r\n    return (\r\n        <div className={style.dialog}>\r\n            {props.avatar ? <img src={props.avatar} alt={'userImage'}/> : ''}\r\n            <NavLink to={path}>{props.userName}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport style from \"./Message.module.css\";\r\nimport {MessagePropsType} from \"../../../redux/dialogsReducer\";\r\n\r\nconst Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={style.message}>{props.messageText}</div>\r\n    );\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport style from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addMessage} from \"../../redux/dialogsReducer\";\r\nimport {getDialogsPageData} from \"../../redux/Selectors\";\r\nimport {Formik} from \"formik\";\r\nimport {Form, FormItem, Input, SubmitButton} from \"formik-antd\";\r\n\r\nconst Dialogs: React.FC = (props) => {\r\n\r\n    let dialogsPageData = useSelector(getDialogsPageData)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let dialogsElement = dialogsPageData.dialogsData.map(u => <DialogItem key={u.id} userName={u.userName} id={u.id}\r\n                                                                          avatar={u.avatar}/>)\r\n\r\n    let messageElement = dialogsPageData.messageData.map(m => <Message key={m.id} messageText={m.messageText}\r\n                                                                       id={m.id}/>)\r\n\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogs_items}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={style.messages}>\r\n                {messageElement}\r\n                <div className={style.addMessage}>\r\n                    <Formik\r\n                        initialValues={{\r\n                            message: ''\r\n                        }}\r\n                        onSubmit={(values, action) => {\r\n                            dispatch(addMessage(values.message))\r\n                            action.resetForm()\r\n                        }}\r\n                        render={() => (\r\n                            <Form>\r\n                                <FormItem\r\n                                    label={'Message'}\r\n                                    name={'message'}\r\n                                >\r\n                                    <Input name={'message'}/>\r\n                                </FormItem>\r\n                                <SubmitButton>Send</SubmitButton>\r\n                            </Form>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport {Profile} from \"../Profile/Profile\";\r\nimport Music from \"../Music/Music\";\r\nimport News from \"../News/News\";\r\nimport Settings from \"../Settings/Settings\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getIsAuth} from \"../../redux/Selectors\";\r\nimport UsersPage from \"../UsersPage/UsersPage\";\r\nimport Dialogs from \"../Dialogs/Dialogs\";\r\n\r\nexport const RoutingComponent: React.FC = () => {\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/social-network/login'}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Route path={\"/social-network/dialogs\"} render={() => <Dialogs/>}/>\r\n            <Route path={\"/social-network/profile/:userId?\"} render={() => <Profile/>}/>\r\n            <Route path={\"/social-network/users-page\"} render={() => <UsersPage/>}/>\r\n            <Route path={\"/social-network/music\"} component={Music}/>\r\n            <Route path={\"/social-network/news\"} component={News}/>\r\n            <Route path={\"/social-network/settings\"} component={Settings}/>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Formik} from 'formik';\r\nimport {loginUser} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getIsAuth} from \"../../redux/Selectors\";\r\nimport {Checkbox, Form, FormItem, Input, SubmitButton} from \"formik-antd\";\r\nimport style from './Login.module.css'\r\n\r\n\r\nexport type FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/social-network/profile/:userId?'}/>\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false\r\n            }}\r\n            onSubmit={(values, actions) => {\r\n                dispatch(loginUser(values));\r\n                actions.resetForm()\r\n            }\r\n            }\r\n            validate={values => {\r\n                const errors: FormikErrorType = {};\r\n\r\n                if (!values.email) {\r\n                    errors.email = 'Required';\r\n                } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    errors.email = 'Invalid email address';\r\n                }\r\n\r\n                if (!values.password) {\r\n                    errors.password = 'Required';\r\n                } else if (!/^[A-Z0-9._%+-]{4,}$/i.test(values.password)) {\r\n                    errors.password = 'Password must be longer than 3 symbols';\r\n                }\r\n\r\n                return errors;\r\n            }}\r\n            render={() => (\r\n                <Form\r\n                    className={style.formWrapper}\r\n                >\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n\r\n                    <FormItem\r\n                        label=\"Email\"\r\n                        name={'email'}\r\n                    >\r\n                        <Input name={'email'}/>\r\n                    </FormItem>\r\n\r\n\r\n                    <FormItem\r\n                        label=\"Password\"\r\n                        name={'password'}\r\n                    >\r\n                        <Input.Password name={'password'}/>\r\n                    </FormItem>\r\n\r\n                    <FormItem\r\n                        name={'rememberMe'}\r\n                    >\r\n                        <Checkbox name={'rememberMe'}>RememberMe</Checkbox>\r\n                    </FormItem>\r\n                    <SubmitButton>Login</SubmitButton>\r\n                </Form>\r\n            )\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default Login;\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css'\r\nimport {Layout} from 'antd';\r\nimport LeftNavbar from \"./Components/Navbars/LeftNavbar/LeftNavbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoadingOutlined} from \"@ant-design/icons\";\r\nimport {HeaderComponent} from \"./Components/Header/HeaderComponent\";\r\nimport {authUser} from \"./redux/authReducer\";\r\nimport {getIsInitialized} from \"./redux/Selectors\";\r\nimport {RoutingComponent} from \"./Components/RoutingComponent/RoutingComponent\";\r\nimport {Route} from \"react-router-dom\";\r\nimport Login from \"./Components/Login/Login\";\r\n\r\nconst {Content, Footer} = Layout;\r\n\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const isInitialized = useSelector(getIsInitialized)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authUser())\r\n    }, [])\r\n\r\n\r\n    if(!isInitialized){\r\n        return <LoadingOutlined style={{fontSize: \"48px\"}} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HeaderComponent/>\r\n\r\n            <Layout style={{minHeight: '100vh'}}>\r\n                <LeftNavbar/>\r\n                <Layout className=\"site-layout\">\r\n                    <Content style={{margin: '0 16px'}}>\r\n                        <div className=\"site-layout-background\">\r\n                            <RoutingComponent/>\r\n                            <Route path={\"/social-network/login\"} component={Login}/>\r\n                        </div>\r\n                    </Content>\r\n                    <Footer style={{textAlign: 'center'}}>Social Network ©2021 by Matumba125</Footer>\r\n                </Layout>\r\n            </Layout>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from \"./redux/reduxStore\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}