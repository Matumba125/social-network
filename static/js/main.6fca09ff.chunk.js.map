{"version":3,"sources":["Components/Profile/UserPosts/Post/Post.module.css","Components/UsersPage/UsersPage.module.css","Components/Profile/ProfileInfo/ProfileSettings/ProfileSettings.module.css","api/chat-api.ts","redux/chatReducer.ts","Components/Header/Header.module.css","Components/Profile/UserPosts/UserPosts.module.css","Components/Login/Login.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","reportWebVitals.ts","assets/img/userAvatar.jpg","api/api.ts","redux/profilleReducer.ts","assets/img/dimych.jpg","assets/img/andrey.jpg","assets/img/sveta.jpg","redux/dialogsReducer.ts","redux/rightNavbarReducer.ts","redux/usersReducer.ts","redux/authReducer.ts","redux/reduxStore.ts","Components/Navbars/LeftNavbar/LeftNavbar.tsx","Components/Header/HeaderComponent.tsx","redux/Selectors.ts","Components/common/Preloader/Preloader.tsx","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileSettings/ProfileSettings.tsx","Components/Profile/ProfileInfo/ProfilePhotoChange/ProfilePhotoChange.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/UserPosts/Post/Post.tsx","Components/Profile/UserPosts/UserPosts.tsx","Components/Profile/Profile.tsx","Components/Music/Music.tsx","Components/News/News.tsx","Components/Settings/Settings.tsx","Components/UsersPage/UserPage/UserPage.tsx","Components/UsersPage/UsersPage.tsx","Components/RoutingComponent/RoutingComponent.tsx","HOC/withSuspense.tsx","Components/Login/Login.tsx","App.tsx","index.tsx","Components/UsersPage/UserPage/UserPage.module.css"],"names":["module","exports","ws","subscribers","statusNotify","status","forEach","s","closeHandler","console","log","setTimeout","createChannel","openHandler","messageHandler","e","newMessages","JSON","parse","data","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","event","callback","push","filter","message","send","initialState","messages","isReady","_newMessageHandler","newMessageHandler","dispatch","type","setMessages","_statusHandler","statusHandler","startChat","a","stopChat","sendMessage","chatReducer","state","action","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","UsersAPI","currentPage","pageSize","get","response","FollowAPI","id","delete","post","ProfileAPI","userId","put","image","formData","FormData","append","AuthorizeAPI","ADD_POST","SET_STATUS","SET_USER_PROFILE","profile","photos","large","myPhoto","small","fullName","aboutMe","postsData","v1","postContent","postLikes","setStatus","newText","getProfile","updateStatus","newStatus","resultCode","updateProfile","store","getState","updatedProfile","userID","profilePage","lookingForAJob","lookingForAJobDescription","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","auth","updatePhoto","profileReducer","newPost","newPostText","dialogsData","userName","avatar","dimych","andrey","sveta","dialogsReducer","InitialState","contactsData","rightNavbarReducer","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","CHANGE_FETCHING_STATUS","CHANGE_RESPONSE_STATUS","users","totalCount","isFetching","responseInProgress","followingUsers","changeFetchingStatus","changeResponseStatus","getUsers","items","setCurrentPage","followUnfollow","following","unfollow","follow","usersReducer","map","m","followed","email","login","isAuth","isInitialized","authReducer","rootReducer","combineReducers","dialogsPage","rightNavbar","chat","createStore","applyMiddleware","thunkMiddleware","Sider","Layout","LeftNavbar","useState","collapsed","setCollapsed","collapsible","onCollapse","theme","mode","Item","icon","NotificationOutlined","to","UserOutlined","MailOutlined","TeamOutlined","CustomerServiceOutlined","SettingOutlined","HeaderComponent","React","memo","useDispatch","useSelector","useEffect","onClickHandler","useCallback","title","extra","className","style","userStatus","backgroundColor","onClick","color","getIsAuth","getIsInitialized","getCurrentUserId","getProfilePage","getUserId","getUsersData","getTotalUsersCount","getPageSize","getCurrentPage","getFollowingUsers","getUserPostsData","antIcon","LoadingOutlined","fontSize","spin","Preloader","display","width","justifyContent","size","indicator","ProfileStatus","isProfileBelongsToUser","editMode","setEditMode","setNewStatus","onDoubleClickHandler","height","autoFocus","onBlur","onKeyPress","key","onChange","currentTarget","value","onDoubleClick","EditOutlined","ProfileSettings","props","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","resetForm","onSubmitClick","visible","onOk","handleSubmit","onCancel","onCancelClick","form","placeholder","getFieldProps","checkbox","checked","ProfilePhotoChange","selectPhoto","ProfileInfo","modalStatus","setModalStatus","changePhoto","setChangePhoto","currentUserId","setImage","onPhotoSubmitClick","target","files","infoContainer","mainInfo","avaWrapper","ava","alt","src","description","workStatus","userDataContainer","editButton","aboutCard","href","socialLink","GithubOutlined","FacebookOutlined","InstagramOutlined","TwitterOutlined","YoutubeOutlined","GlobalOutlined","ShareAltOutlined","Post","userImage","like","setLike","header","defaultImg","item","likes","HeartFilled","HeartOutlined","shape","UserPosts","postData","isCurrentProfileBelongsToUser","postsElement","userNewPosts","render","label","name","TextArea","Profile","useParams","getStatus","Music","News","Settings","UserPage","user","descriptionWrapper","linksWrapper","nameLink","disabled","some","followBtn","ghost","UsersPage","usersPage","usersList","pagination","current","total","responsive","pageSizeOptions","page","WrappedComponent","SuspendedDialogs","lazy","Suspense","fallback","RoutingComponent","path","component","Login","password","rememberMe","actions","validate","errors","test","formWrapper","Password","Content","Footer","App","setUserData","finally","minHeight","margin","textAlign","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6fca09ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Post_header__1tqHL\",\"item\":\"Post_item__24f3h\",\"likes\":\"Post_likes__1RzjT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPage\":\"UsersPage_usersPage__2_3I7\",\"usersList\":\"UsersPage_usersList__3e0rU\",\"selectedPage\":\"UsersPage_selectedPage__2Cul_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileSettings_form__1rSQL\",\"checkbox\":\"ProfileSettings_checkbox__9ERdH\"};","let subscribers = {\r\n    'messagesReceived': [] as MessageReceivedSubscriberType[],\r\n    'statusChanged': [] as StatusChangedSubscriberType []\r\n}\r\n\r\nlet ws: WebSocket\r\n\r\nconst statusNotify = (status: boolean) =>{\r\n    subscribers['statusChanged'].forEach(s => s(status))\r\n}\r\n\r\nconst closeHandler = () => {\r\n    console.log('closed')\r\n    statusNotify(false)\r\n    setTimeout(createChannel, 3000);\r\n};\r\n\r\nconst openHandler = () => {\r\n    statusNotify(true)\r\n};\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data);\r\n    subscribers['messagesReceived'].forEach(s => s(newMessages))\r\n\r\n};\r\n\r\nconst cleanUp = () =>{\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n    statusNotify(false)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n}\r\n\r\nexport const chatAPI = {\r\n    start(){\r\n        createChannel()\r\n    },\r\n    stop(){\r\n        subscribers['messagesReceived'] = []\r\n        subscribers['statusChanged'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(event: EventsNames, callback: CallbacksType) {\r\n        // @ts-ignore\r\n        subscribers[event].push(callback)\r\n    },\r\n    unsubscribe(event: EventsNames, callback: CallbacksType) {\r\n        // @ts-ignore\r\n        subscribers[event] = subscribers[event].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws.send(message)\r\n    }\r\n}\r\n\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: string\r\n    userName: string\r\n    first?: boolean\r\n    last?: boolean\r\n    unique?: boolean\r\n}\r\n\r\ntype MessageReceivedSubscriberType = (messages: ChatMessageType[]) => void\r\ntype StatusChangedSubscriberType = (isReady: boolean) => void\r\n\r\ntype CallbacksType = MessageReceivedSubscriberType | StatusChangedSubscriberType\r\n\r\ntype EventsNames = 'messagesReceived' | 'statusChanged'\r\n","import {ActionTypes} from \"./reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {chatAPI, ChatMessageType} from \"../api/chat-api\";\r\n\r\n\r\ntype ChatInitialStateType = {\r\n    messages: ChatMessageType[]\r\n    isReady: boolean\r\n}\r\n\r\nconst initialState: ChatInitialStateType = {\r\n    messages: [],\r\n    isReady: false\r\n}\r\n\r\nconst chatReducer = (state: ChatInitialStateType = initialState,\r\n                     action: ActionTypes): ChatInitialStateType => {\r\n    switch (action.type) {\r\n        case 'chat/SET-MESSAGES':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.messages]\r\n            }\r\n        case 'chat/SET-IS-READY':\r\n            return {\r\n                ...state,\r\n                isReady: action.isReady\r\n            }\r\n        case \"chat/STOP-CHAT\":\r\n            return {\r\n                ...state,\r\n                messages: []\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setMessages = (messages: ChatMessageType[]) => ({\r\n    type: 'chat/SET-MESSAGES',\r\n    messages\r\n} as const)\r\nexport const setIsReady = (isReady: boolean) => ({\r\n    type: 'chat/SET-IS-READY',\r\n    isReady\r\n} as const)\r\n\r\nexport const stopChatAC = () =>({\r\n    type: 'chat/STOP-CHAT'\r\n} as const)\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageType[]) => void) | null = null\r\nconst newMessageHandler = (dispatch: Dispatch<ActionTypes>) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(setMessages(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusHandler: ((status: boolean) => void) | null = null\r\nconst statusHandler = (dispatch: Dispatch<ActionTypes>) => {\r\n    if (_statusHandler === null) {\r\n        _statusHandler = (status) => {\r\n            dispatch(setIsReady(status))\r\n        }\r\n    }\r\n    return _statusHandler\r\n}\r\n\r\n\r\nexport const startChat = () => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        chatAPI.start()\r\n        chatAPI.subscribe('messagesReceived',newMessageHandler(dispatch));\r\n        chatAPI.subscribe('statusChanged',statusHandler(dispatch));\r\n    }\r\n}\r\n\r\nexport const stopChat = () => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        chatAPI.unsubscribe('messagesReceived',newMessageHandler(dispatch));\r\n        chatAPI.unsubscribe('statusChanged',statusHandler(dispatch));\r\n        dispatch(stopChatAC())\r\n        chatAPI.stop()\r\n    }\r\n}\r\n\r\nexport const sendMessage = (message: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        chatAPI.sendMessage(message)\r\n    }\r\n}\r\n\r\nexport default chatReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userStatus\":\"Header_userStatus__2PMWF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userNewPosts\":\"UserPosts_userNewPosts__2GPsv\",\"form\":\"UserPosts_form__2ZqT6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"Login_formWrapper__1XssD\",\"inputItem\":\"Login_inputItem__bFZGa\",\"formItem\":\"Login_formItem__2MqJa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoContainer\":\"ProfileInfo_infoContainer__225Sp\",\"mainInfo\":\"ProfileInfo_mainInfo__2kUCl\",\"description\":\"ProfileInfo_description__1VwtT\",\"fullName\":\"ProfileInfo_fullName__3V4m3\",\"avaWrapper\":\"ProfileInfo_avaWrapper__3WCOi\",\"ava\":\"ProfileInfo_ava__3LKTB\",\"workStatus\":\"ProfileInfo_workStatus__26r-F\",\"userDataContainer\":\"ProfileInfo_userDataContainer__1q0FO\",\"socialLink\":\"ProfileInfo_socialLink__34X4A\",\"editButton\":\"ProfileInfo_editButton__1Z8aA\",\"aboutCard\":\"ProfileInfo_aboutCard__1MNtW\"};","import {ReportHandler} from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export default __webpack_public_path__ + \"static/media/userAvatar.9ca0a8b7.jpg\";","import axios from \"axios\";\r\nimport {FormikErrorType} from \"../Components/Login/Login\";\r\nimport {ProfileUpdatingType} from \"../redux/profilleReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'd5ee63b2-b8ea-4e76-b89c-c960812b3f51'\r\n    }\r\n});\r\n\r\nexport const UsersAPI = {\r\n    getUsers: (currentPage: number, pageSize: number) => {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const FollowAPI = {\r\n    unfollowUser: (id: string) => {\r\n        return instance.delete(`follow/${id}`,).then(response => response.data)\r\n    },\r\n    followUser: (id: string) => {\r\n        return instance.post(`follow/${id}`).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfileInfo: (userId: string) => {\r\n        return instance.get(`profile/${userId}`).then(response => response.data)\r\n    },\r\n    getStatus: (userId: string) => {\r\n        return instance.get(`profile/status/${userId}`);\r\n    },\r\n    updateProfile: (data: ProfileUpdatingType) => {\r\n        return instance.put(`profile`, data)\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return instance.put(`profile/status`, {\r\n            status: status\r\n        })\r\n    },\r\n    updatePhoto: (image: File) => {\r\n        const formData = new FormData()\r\n        //@ts-ignore\r\n        formData.append('image', image)\r\n        return instance.put('profile/photo', formData,\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const AuthorizeAPI = {\r\n    authorizeUser: () => {\r\n        return instance.get(`auth/me`).then(response => response.data)\r\n    },\r\n\r\n    loginUser: (formData: FormikErrorType) => {\r\n        return instance.post('auth/login', formData)\r\n    },\r\n    logoutUser: () => {\r\n        return instance.delete('auth/login')\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport store, {ActionTypes} from \"./reduxStore\";\r\nimport {PhotosType} from \"./usersReducer\";\r\nimport myPhoto from \"../assets/img/userAvatar.jpg\"\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileAPI} from \"../api/api\";\r\n\r\n\r\nexport type PostType = {\r\n    id: string\r\n    postContent: string\r\n    postLikes: number\r\n}\r\n\r\ntype ContactsType = {\r\n    facebook?: string\r\n    website?: string\r\n    vk?: string\r\n    twitter?: string\r\n    instagram?: string\r\n    youtube?: string\r\n    github?: string\r\n    mainLink?: string\r\n}\r\n\r\n\r\ntype AdditionalUpdatingType = {\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    fullName: string\r\n    aboutMe: string\r\n}\r\n\r\nexport type ProfileUpdatingType = ContactsType & AdditionalUpdatingType\r\n\r\n\r\nexport type ProfileDataType = {\r\n    aboutMe: string\r\n    contacts?: ContactsType\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    userId: string\r\n    photos: PhotosType\r\n    fullName: string\r\n}\r\n\r\nexport type ProfileInitialStateType = {\r\n    profile: ProfileDataType\r\n    status: string\r\n    postsData: Array<PostType>\r\n}\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_STATUS = 'SET-STATUS';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\n\r\nlet initialState: ProfileInitialStateType = {\r\n    profile: {\r\n        photos: {\r\n            large: myPhoto,\r\n            small: myPhoto,\r\n        },\r\n        fullName: '',\r\n        aboutMe: '',\r\n        userId: '',\r\n    },\r\n    status: '',\r\n    postsData: [\r\n        {\r\n            id: v1(),\r\n            postContent: \"Hello World !!!\",\r\n            postLikes: 15,\r\n\r\n        },\r\n        {\r\n            id: v1(),\r\n            postContent: \"It's my first post!!\",\r\n            postLikes: 28\r\n        }\r\n    ],\r\n}\r\n\r\nconst profileReducer = (state: ProfileInitialStateType = initialState,\r\n                        action: ActionTypes): ProfileInitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: v1(),\r\n                postContent: action.newPostText,\r\n                postLikes: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                postsData: [newPost, ...state.postsData],\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.newText\r\n            }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPost = (newPostText: string) => ({\r\n    type: ADD_POST,\r\n    newPostText,\r\n} as const)\r\n\r\n\r\nexport const setUserProfile = (profile: ProfileDataType) => ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n} as const)\r\n\r\nexport const setStatus = (newText: string) => ({type: SET_STATUS, newText} as const)\r\n\r\nexport const getProfile = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.getProfileInfo(userId).then(data => {\r\n            dispatch(setUserProfile(data))\r\n        });\r\n    }\r\n}\r\nexport const getStatus = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.getStatus(userId).then(response => {\r\n            dispatch(setStatus(response.data))\r\n        });\r\n    }\r\n}\r\nexport const updateStatus = (newStatus: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.updateStatus(newStatus).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(newStatus))\r\n            }\r\n        })\r\n    };\r\n}\r\n\r\nexport const updateProfile = (data: ProfileUpdatingType) => {\r\n    const state = store.getState()\r\n    const updatedProfile = {\r\n        userID: state.profilePage.profile.userId,\r\n        lookingForAJob: data.lookingForAJob,\r\n        lookingForAJobDescription: data.lookingForAJobDescription ? data.lookingForAJobDescription : '-',\r\n        fullName: data.fullName,\r\n        aboutMe: data.aboutMe ? data.aboutMe : '-',\r\n        contacts: {\r\n            github: data.github,\r\n            vk: data.vk,\r\n            facebook: data.facebook,\r\n            instagram: data.instagram,\r\n            twitter: data.twitter,\r\n            website: data.website,\r\n            youtube: data.youtube,\r\n            mainLink: data.mainLink,\r\n        },\r\n    }\r\n    return (dispatch: Dispatch) => {\r\n        ProfileAPI.updateProfile(updatedProfile)\r\n            .then(() => {\r\n                //@ts-ignore\r\n                dispatch(getProfile(state.auth.data.id))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updatePhoto = (image: File) => {\r\n    const userId = store.getState().auth.data.id\r\n    return (dispatch: Dispatch) => {\r\n        ProfileAPI.updatePhoto(image)\r\n            .then(() => {\r\n                //@ts-ignore\r\n                dispatch(getProfile(userId))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer","export default __webpack_public_path__ + \"static/media/dimych.4cfb0ddb.jpg\";","export default __webpack_public_path__ + \"static/media/andrey.05d81a41.jpg\";","export default __webpack_public_path__ + \"static/media/sveta.2e2af972.jpg\";","import {v1} from \"uuid\";\r\nimport dimych from \"../assets/img/dimych.jpg\";\r\nimport andrey from \"../assets/img/andrey.jpg\";\r\nimport sveta from \"../assets/img/sveta.jpg\";\r\nimport {ActionTypes} from \"./reduxStore\";\r\n\r\n\r\nexport type DialogsItemPropsType = {\r\n    id: string\r\n    userName: string\r\n    avatar?: string\r\n}\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\n\r\nconst ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {id: '2', userName: \"Dimych\", avatar: dimych},\r\n        {id: v1(), userName: \"Andrey\", avatar: andrey},\r\n        {id: v1(), userName: \"Sveta\", avatar: sveta},\r\n        {id: v1(), userName: \"Sasha\"},\r\n        {id: v1(), userName: \"Viktor\"},\r\n        {id: v1(), userName: \"Valera\"}\r\n    ] as Array<DialogsItemPropsType>,\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsInitialStateType = initialState,\r\n                        action: ActionTypes): DialogsInitialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const addMessage = (newMessage: string) => ({\r\n    type: ADD_MESSAGE,\r\n    newMessage\r\n} as const)\r\n\r\n\r\nexport default dialogsReducer","import {v1} from \"uuid\";\r\nimport dimych from \"../assets/img/dimych.jpg\";\r\nimport andrey from \"../assets/img/andrey.jpg\";\r\nimport sveta from \"../assets/img/sveta.jpg\";\r\nimport {ActionTypes} from \"./reduxStore\";\r\n\r\ntype ContactsDataType = {\r\n    id: string\r\n    userName: string\r\n    avatar: string\r\n}\r\n\r\nexport type RightNavInitialStateType = typeof InitialState\r\n\r\nconst InitialState = {\r\n    contactsData: [\r\n        {id: v1(), userName: \"Dimych\", avatar: dimych},\r\n        {id: v1(), userName: \"Andrey\", avatar: andrey},\r\n        {id: v1(), userName: \"Sveta\", avatar: sveta}\r\n    ] as Array<ContactsDataType>\r\n}\r\n\r\nexport const rightNavbarReducer = (state: RightNavInitialStateType = InitialState, action: ActionTypes): RightNavInitialStateType => {\r\n\r\n    return state\r\n}\r\n\r\nexport default rightNavbarReducer","import {ActionTypes} from \"./reduxStore\";\r\nimport {FollowAPI, UsersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type PhotosType = {\r\n    large?: string\r\n    small?: string\r\n}\r\n\r\nexport type UserType = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n    followed: boolean\r\n    status: string\r\n    photos: PhotosType\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    responseInProgress: boolean\r\n    followingUsers: Array<string>\r\n}\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\r\nconst CHANGE_FETCHING_STATUS = 'CHANGE-FETCHING-STATUS';\r\nconst CHANGE_RESPONSE_STATUS = 'CHANGE-RESPONSE-STATUS';\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 16,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    responseInProgress: true,\r\n    followingUsers: [],\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState,\r\n                      action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(m =>\r\n                    m.id === action.id ? {...m, followed: true} : m),\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(m =>\r\n                    m.id === action.id ? {...m, followed: false} : m)\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case  SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n        case CHANGE_FETCHING_STATUS: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case CHANGE_RESPONSE_STATUS: {\r\n            return {\r\n                ...state,\r\n                followingUsers: action.responseInProgress\r\n                    ? [...state.followingUsers, action.id]\r\n                    : state.followingUsers.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const follow = (id: string) => ({\r\n    type: FOLLOW,\r\n    id\r\n} as const)\r\nexport const unfollow = (id: string) => ({\r\n    type: UNFOLLOW,\r\n    id\r\n} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({\r\n    type: SET_USERS,\r\n    users\r\n} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage\r\n} as const)\r\nexport const setTotalUsersCount = (totalCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalCount\r\n} as const)\r\nexport const changeFetchingStatus = (isFetching: boolean) => ({\r\n    type: CHANGE_FETCHING_STATUS,\r\n    isFetching\r\n} as const)\r\nexport const changeResponseStatus = (responseInProgress: boolean, id: string) => ({\r\n    type: CHANGE_RESPONSE_STATUS,\r\n    responseInProgress,\r\n    id,\r\n} as const)\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        dispatch(changeFetchingStatus(true))\r\n        UsersAPI.getUsers(currentPage, pageSize)\r\n            .then(data => {\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setCurrentPage(currentPage))\r\n                dispatch(setTotalUsersCount(data.totalCount))\r\n                dispatch(changeFetchingStatus(false))\r\n\r\n            });\r\n    }\r\n}\r\n\r\nexport const followUnfollow = (id: string, following: boolean) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        dispatch(changeResponseStatus(true, id))\r\n        if (following) {\r\n            FollowAPI.unfollowUser(id)\r\n                .then(data => {\r\n                    if (data.resultCode === 0) {\r\n                        dispatch(unfollow(id))\r\n                        dispatch(changeResponseStatus(false, id))\r\n                    }\r\n                })\r\n        } else {\r\n            FollowAPI.followUser(id)\r\n                .then(data => {\r\n                    if (data.resultCode === 0) {\r\n                        dispatch(follow(id))\r\n                        dispatch(changeResponseStatus(false, id))\r\n                    }\r\n                })\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default usersReducer","import {ActionTypes} from \"./reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AuthorizeAPI} from \"../api/api\";\r\nimport {FormikErrorType} from \"../Components/Login/Login\";\r\n\r\n\r\nexport type DataType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type AuthInitialStateType = {\r\n    data: DataType\r\n    isAuth: boolean\r\n    isInitialized: boolean\r\n}\r\n\r\nlet initialState: AuthInitialStateType = {\r\n    data: {\r\n        id: '',\r\n        email: '',\r\n        login: '',\r\n    },\r\n    isAuth: false,\r\n    isInitialized: false\r\n}\r\n\r\nconst authReducer = (state: AuthInitialStateType = initialState,\r\n                     action: ActionTypes): AuthInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-USER-DATA':\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                isAuth: true,\r\n            }\r\n        case 'USER_BEEN_LOGINED':\r\n            return {\r\n                ...state,\r\n                isAuth: true\r\n            }\r\n        case 'USER_BEEN_LOGINED_OUT':\r\n            return {\r\n                ...state,\r\n                isAuth: false\r\n            }\r\n        case 'SET-APP-INITIALIZED':\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserData = (data: DataType) => ({\r\n    type: 'SET-USER-DATA',\r\n    data\r\n} as const)\r\nexport const setAppInitialized = (isInitialized: boolean) => ({\r\n    type: 'SET-APP-INITIALIZED',\r\n    isInitialized\r\n} as const)\r\n\r\nexport const userBeenLogined = () => ({\r\n    type: 'USER_BEEN_LOGINED'\r\n} as const)\r\n\r\nexport const userBeenLoginedOut = () => ({\r\n    type: 'USER_BEEN_LOGINED_OUT'\r\n} as const)\r\n\r\n\r\nexport const authUser = () => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        AuthorizeAPI.authorizeUser().then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(setUserData(data.data))\r\n            }\r\n        })\r\n            .finally(() => {\r\n                dispatch(setAppInitialized(true))\r\n            })\r\n    }\r\n}\r\n\r\nexport const loginUser = (formData: FormikErrorType) => {\r\n    return (dispatch: Dispatch) => {\r\n        AuthorizeAPI.loginUser(formData).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(userBeenLogined())\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const logoutUser = () => {\r\n    return (dispatch: Dispatch) => {\r\n        AuthorizeAPI.logoutUser().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(userBeenLoginedOut())\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default authReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {addPost, setStatus, setUserProfile} from \"./profilleReducer\";\r\nimport dialogsReducer, {addMessage} from \"./dialogsReducer\";\r\nimport rightNavbarReducer from \"./rightNavbarReducer\";\r\nimport usersReducer, {\r\n    changeFetchingStatus,\r\n    changeResponseStatus,\r\n    follow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    unfollow\r\n} from \"./usersReducer\";\r\nimport authReducer, {setAppInitialized, setUserData, userBeenLogined, userBeenLoginedOut} from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport chatReducer, {setIsReady, setMessages, stopChatAC} from \"./chatReducer\";\r\n\r\n\r\nexport type ActionTypes =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof addMessage> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof changeFetchingStatus> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setUserData> |\r\n    ReturnType<typeof changeResponseStatus> |\r\n    ReturnType<typeof setStatus> |\r\n    ReturnType<typeof userBeenLogined> |\r\n    ReturnType<typeof userBeenLoginedOut> |\r\n    ReturnType<typeof setAppInitialized>|\r\n    ReturnType<typeof setMessages>|\r\n    ReturnType<typeof setIsReady>|\r\n    ReturnType<typeof stopChatAC>\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    rightNavbar: rightNavbarReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    chat: chatReducer,\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store","import React, {useState} from 'react';\r\nimport {Layout, Menu} from \"antd\";\r\nimport {\r\n    CustomerServiceOutlined,\r\n    MailOutlined,\r\n    NotificationOutlined,\r\n    SettingOutlined,\r\n    TeamOutlined,\r\n    UserOutlined\r\n} from \"@ant-design/icons\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst {Sider} = Layout;\r\n\r\nfunction LeftNavbar() {\r\n\r\n    const [collapsed, setCollapsed] = useState<boolean>(true)\r\n\r\n    const onCollapse = () => {\r\n        setCollapsed(!collapsed)\r\n    }\r\n\r\n    return (\r\n        <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\r\n            <Menu theme=\"dark\" mode=\"inline\">\r\n                <Menu.Item key=\"1\" icon={<NotificationOutlined/>}>\r\n                    <Link to=\"/social-network/news/\">News</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<UserOutlined/>}>\r\n                    <Link to=\"/social-network/profile/18309\">Profile</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" icon={<MailOutlined/>}>\r\n                    <Link to=\"/social-network/dialogs/\">Messages</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" icon={<TeamOutlined/>}>\r\n                    <Link to=\"/social-network/users-page\">Developers</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\" icon={<CustomerServiceOutlined/>}>\r\n                    <Link to=\"/social-network/music/\">Music</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"6\" icon={<SettingOutlined/>}>\r\n                    <Link to=\"/social-network/settings/\">Settings</Link>\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Sider>\r\n    );\r\n}\r\n\r\nexport default LeftNavbar;","import React, {useCallback, useEffect} from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {logoutUser} from \"../../redux/authReducer\";\r\nimport {Avatar, Button, PageHeader} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport style from './Header.module.css'\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\nexport const HeaderComponent = React.memo(() => {\r\n\r\n        const dispatch = useDispatch()\r\n        const isAuth = useSelector<AppStateType>(state => state.auth.isAuth)\r\n        const login = useSelector<AppStateType>(state => state.auth.data.login)\r\n\r\n        useEffect(() => {\r\n        }, [isAuth, login])\r\n\r\n\r\n        const onClickHandler = useCallback(() => {\r\n            dispatch(logoutUser())\r\n        }, [dispatch])\r\n\r\n        return (\r\n            <PageHeader title={'Social Network'} extra={\r\n                isAuth ?\r\n                    <div className={style.userStatus}>\r\n                        <NavLink to=\"/social-network/profile\">\r\n                            <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                            {login}\r\n                        </NavLink>\r\n                        <Button onClick={onClickHandler}>Log Out</Button>\r\n                    </div>\r\n                    : <NavLink to=\"/social-network/login\">\r\n                        <Button color=\"primary\">Login</Button>\r\n                    </NavLink>\r\n            }/>\r\n        )\r\n    }\r\n)","import {AppStateType} from \"./reduxStore\";\r\nimport {PostType, ProfileInitialStateType} from \"./profilleReducer\";\r\nimport {UserType} from \"./usersReducer\";\r\nimport {DialogsInitialStateType} from \"./dialogsReducer\";\r\n\r\nexport const getIsAuth = (state: AppStateType): boolean => {\r\n    return state.auth.isAuth\r\n}\r\nexport const getIsInitialized = (state: AppStateType): boolean => {\r\n    return state.auth.isInitialized\r\n}\r\nexport const getCurrentUserId = (state: AppStateType): string => {\r\n    return state.auth.data.id\r\n}\r\n\r\nexport const getProfilePage = (state: AppStateType): ProfileInitialStateType => {\r\n    return state.profilePage\r\n}\r\nexport const getUserId = (state: AppStateType): string => {\r\n    return state.profilePage.profile.userId\r\n}\r\n\r\nexport const getUsersData = (state: AppStateType): Array<UserType> => {\r\n    return state.users.users\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType): number => {\r\n    return state.users.totalCount\r\n}\r\nexport const getPageSize = (state: AppStateType): number => {\r\n    return state.users.pageSize\r\n}\r\nexport const getCurrentPage = (state: AppStateType): number => {\r\n    return state.users.currentPage\r\n}\r\nexport const getFollowingUsers = (state: AppStateType): string[] => {\r\n    return state.users.followingUsers\r\n}\r\nexport const getDialogsPageData = (state: AppStateType): DialogsInitialStateType => {\r\n    return state.dialogsPage\r\n}\r\nexport const getUserPostsData = (state: AppStateType): PostType[] => {\r\n    return state.profilePage.postsData\r\n}\r\n\r\n","import {Space, Spin} from 'antd';\r\nimport React from 'react';\r\nimport {LoadingOutlined} from \"@ant-design/icons\";\r\n\r\nconst antIcon = <LoadingOutlined style={{fontSize: 48}} spin/>\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <Space style={{display: 'flex', width: '100%', justifyContent: \"center\"}} size=\"large\">\r\n            <Spin indicator={antIcon}/>\r\n        </Space>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateStatus} from \"../../../../redux/profilleReducer\";\r\nimport {Button, Input} from \"antd\";\r\nimport {EditOutlined} from \"@ant-design/icons\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    isProfileBelongsToUser: boolean\r\n}\r\n\r\nexport const ProfileStatus = React.memo(({status, isProfileBelongsToUser, ...restProps}: ProfileStatusPropsType) => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const [editMode, setEditMode] = useState<boolean>(false)\r\n        const [newStatus, setNewStatus] = useState<string>(status)\r\n\r\n        const onDoubleClickHandler = () => {\r\n            setEditMode(true)\r\n            setNewStatus(status)\r\n        }\r\n\r\n        const onBlurHandler = () => {\r\n            setEditMode(false)\r\n            dispatch(updateStatus(newStatus))\r\n        }\r\n\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(false)\r\n                dispatch(updateStatus(newStatus))\r\n            }\r\n        }\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setNewStatus(e.currentTarget.value)\r\n        }\r\n\r\n        return (\r\n            <div style={{height: '32px'}}>\r\n                {!editMode ?\r\n                    <div>\r\n                        <span onDoubleClick={onDoubleClickHandler}>{status ? status : '-----'}</span>\r\n                        {isProfileBelongsToUser &&\r\n                        <Button\r\n                            type={'text'}\r\n                            icon={<EditOutlined/>}\r\n                            onClick={onDoubleClickHandler}/>}\r\n                    </div> :\r\n                    <Input autoFocus={true}\r\n                           onBlur={onBlurHandler}\r\n                           onKeyPress={onKeyPressHandler}\r\n                           onChange={onChangeHandler}\r\n                           value={newStatus}>\r\n                    </Input>\r\n                }\r\n            </div>\r\n        );\r\n\r\n    }\r\n)","import Modal from 'antd/lib/modal/Modal';\r\nimport React from 'react';\r\nimport {ProfileInitialStateType, updateProfile} from \"../../../../redux/profilleReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Checkbox, Input} from \"antd\";\r\nimport style from './ProfileSettings.module.css'\r\n\r\ntype ProfileSettingsPropsType = {\r\n    visible: boolean\r\n    onCancelClick: () => void\r\n    onSubmitClick: () => void\r\n    profile: ProfileInitialStateType\r\n}\r\n\r\nconst ProfileSettings: React.FC<ProfileSettingsPropsType> = props => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            fullName: props.profile.profile.fullName,\r\n            lookingForAJobDescription: props.profile.profile.lookingForAJobDescription === '-' ? '' : props.profile.profile.lookingForAJobDescription,\r\n            lookingForAJob: props.profile.profile.lookingForAJob,\r\n            aboutMe: props.profile.profile.aboutMe === '-' ? '' : props.profile.profile.aboutMe,\r\n            github: props.profile.profile.contacts?.github,\r\n            vk: props.profile.profile.contacts?.vk,\r\n            facebook: props.profile.profile.contacts?.facebook,\r\n            instagram: props.profile.profile.contacts?.instagram,\r\n            twitter: props.profile.profile.contacts?.twitter,\r\n            website: props.profile.profile.contacts?.website,\r\n            youtube: props.profile.profile.contacts?.youtube,\r\n            mainLink: props.profile.profile.contacts?.mainLink,\r\n        },\r\n        onSubmit: async (values) => {\r\n            formik.resetForm();\r\n            await dispatch(updateProfile(values));\r\n            props.onSubmitClick()\r\n        },\r\n    })\r\n\r\n    const submitForm = () => {\r\n        formik.handleSubmit()\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal title={'Profile settings'} visible={props.visible} onOk={submitForm} onCancel={props.onCancelClick}>\r\n            <form className={style.form}>\r\n                <div>\r\n                    <h4>Full Name</h4>\r\n                    <Input\r\n                        placeholder={'Full Name'}\r\n                        {...formik.getFieldProps('fullName')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>About Me</h4>\r\n                    <Input\r\n                        placeholder={'About Me'}\r\n                        {...formik.getFieldProps('aboutMe')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Additional information for employers</h4>\r\n                    <Input\r\n                        placeholder={'Additional information for employers'}\r\n                        {...formik.getFieldProps('lookingForAJobDescription')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>GitHub</h4>\r\n                    <Input\r\n                        placeholder={'GitHub'}\r\n                        {...formik.getFieldProps('github')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>VK</h4>\r\n                    <Input\r\n                        placeholder={'VK'}\r\n                        {...formik.getFieldProps('vk')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Facebook</h4>\r\n                    <Input\r\n                        placeholder={'Facebook'}\r\n                        {...formik.getFieldProps('facebook')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Instagram</h4>\r\n                    <Input\r\n                        placeholder={'Instagram'}\r\n                        {...formik.getFieldProps('instagram')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Twitter</h4>\r\n                    <Input\r\n                        placeholder={'Twitter'}\r\n                        {...formik.getFieldProps('twitter')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Website</h4>\r\n                    <Input\r\n                        placeholder={'Website'}\r\n                        {...formik.getFieldProps('website')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>YouTube</h4>\r\n                    <Input\r\n                        placeholder={'YouTube'}\r\n                        {...formik.getFieldProps('youtube')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>Main Link</h4>\r\n                    <Input\r\n                        placeholder={'Main Link'}\r\n                        {...formik.getFieldProps('mainLink')}\r\n                    />\r\n                </div>\r\n                <Checkbox\r\n                    className={style.checkbox}\r\n                    checked={formik.values.lookingForAJob}\r\n                    {...formik.getFieldProps('lookingForAJob')}\r\n                >I'm open to work</Checkbox>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ProfileSettings;","import React, {ChangeEvent} from 'react';\r\nimport {Modal} from \"antd\";\r\n\r\ntype ProfilePhotoPropsType = {\r\n    visible: boolean\r\n    onCancelClick: () => void\r\n    onSubmitClick: () => void\r\n    selectPhoto: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst ProfilePhotoChange: React.FC<ProfilePhotoPropsType> = props => {\r\n    return (\r\n        <Modal visible={props.visible} onOk={props.onSubmitClick} onCancel={props.onCancelClick}>\r\n            <input onChange={props.selectPhoto} type={'file'}/>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ProfilePhotoChange;","import React, {ChangeEvent, useState} from \"react\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport style from \"./ProfileInfo.module.css\"\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentUserId, getProfilePage} from \"../../../redux/Selectors\";\r\nimport ProfileSettings from \"./ProfileSettings/ProfileSettings\";\r\nimport {Avatar, Button, Card} from \"antd\";\r\nimport {updatePhoto} from \"../../../redux/profilleReducer\";\r\nimport ProfilePhotoChange from \"./ProfilePhotoChange/ProfilePhotoChange\";\r\nimport {\r\n    EditOutlined,\r\n    FacebookOutlined,\r\n    GithubOutlined,\r\n    GlobalOutlined,\r\n    InstagramOutlined,\r\n    ShareAltOutlined,\r\n    TwitterOutlined,\r\n    UserOutlined,\r\n    YoutubeOutlined\r\n} from \"@ant-design/icons\";\r\n\r\nfunction ProfileInfo() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [modalStatus, setModalStatus] = useState<boolean>(false)\r\n    const [changePhoto, setChangePhoto] = useState<boolean>(false)\r\n\r\n    const profilePage = useSelector(getProfilePage)\r\n    const currentUserId = useSelector(getCurrentUserId)\r\n    const isProfileBelongsToUser = profilePage.profile.userId === currentUserId\r\n\r\n    const [image, setImage] = useState<File>()\r\n\r\n\r\n    const onCancelClick = () => {\r\n        setModalStatus(false)\r\n    }\r\n    const onSubmitClick = () => {\r\n        setModalStatus(false)\r\n    }\r\n\r\n    const onPhotoSubmitClick = async () => {\r\n        setChangePhoto(false)\r\n        image && await dispatch(updatePhoto(image))\r\n    }\r\n\r\n    const onPhotoCloseClick = () => {\r\n        setChangePhoto(false)\r\n    }\r\n\r\n    const selectPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        //@ts-ignore\r\n        setImage(e.target.files[0])\r\n    }\r\n\r\n    const onEditClick = () => {\r\n        setModalStatus(true)\r\n    }\r\n\r\n    const onPhotoClick = () => {\r\n        setChangePhoto(true)\r\n    }\r\n\r\n\r\n    if (!profilePage.profile) {\r\n        return <Preloader/>\r\n    } else {\r\n\r\n        return (\r\n            <>\r\n                <ProfileSettings\r\n                    visible={modalStatus}\r\n                    onSubmitClick={onSubmitClick}\r\n                    onCancelClick={onCancelClick}\r\n                    profile={profilePage}/>\r\n\r\n                <ProfilePhotoChange\r\n                    visible={changePhoto}\r\n                    onSubmitClick={onPhotoSubmitClick}\r\n                    onCancelClick={onPhotoCloseClick}\r\n                    selectPhoto={selectPhoto}/>\r\n\r\n                <div className={style.infoContainer}>\r\n                    <div className={style.mainInfo}>\r\n                        <div className={style.avaWrapper}>\r\n                            <Avatar\r\n                                className={style.ava}\r\n                                alt={`${profilePage.profile.userId} user ava`}\r\n                                src={profilePage.profile.photos.small && profilePage.profile.photos.small}\r\n                                icon={!profilePage.profile.photos.small && <UserOutlined/>}/>\r\n                            {isProfileBelongsToUser && <Button\r\n                                type={'text'}\r\n                                icon={<EditOutlined/>}\r\n                                onClick={onPhotoClick}/>}\r\n                        </div>\r\n                        <div className={style.description}>\r\n\r\n                        <span className={style.fullName}>\r\n                            {profilePage.profile.fullName}\r\n                            {profilePage.profile.lookingForAJob &&\r\n                            <span className={style.workStatus}>\r\n                                (Open to work)\r\n                            </span>}\r\n                        </span>\r\n                            <ProfileStatus isProfileBelongsToUser={isProfileBelongsToUser}  status={profilePage.status}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className={style.userDataContainer}>\r\n\r\n                        {isProfileBelongsToUser &&\r\n                        <Button\r\n                            className={style.editButton}\r\n                            onClick={onEditClick}>\r\n                            Edit Profile\r\n                        </Button>}\r\n\r\n                        {profilePage.profile.aboutMe &&\r\n                        <Card\r\n                            title={'About Me:'}\r\n                            className={style.aboutCard}>\r\n                            {profilePage.profile.aboutMe}\r\n                        </Card>}\r\n\r\n                        {profilePage.profile.contacts?.github &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.github}\r\n                            className={style.socialLink}>\r\n                            <GithubOutlined/>\r\n                            {`  ${profilePage.profile.contacts?.github}`}\r\n                        </a>}\r\n                        {profilePage.profile.contacts?.facebook &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.facebook}\r\n                            className={style.socialLink}>\r\n                            <FacebookOutlined/>\r\n                            {`  ${profilePage.profile.contacts?.facebook}`}\r\n                        </a>}\r\n\r\n                        {profilePage.profile.contacts?.instagram &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.twitter}\r\n                            className={style.socialLink}>\r\n                            <InstagramOutlined/>\r\n                            `{`  ${profilePage.profile.contacts?.instagram}`}\r\n                        </a>}\r\n\r\n                        {profilePage.profile.contacts?.twitter &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.twitter}\r\n                            className={style.socialLink}>\r\n                            <TwitterOutlined/>\r\n                            {`  ${profilePage.profile.contacts?.twitter}`}\r\n                        </a>}\r\n\r\n                        {profilePage.profile.contacts?.youtube &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.youtube}\r\n                            className={style.socialLink}>\r\n                            <YoutubeOutlined/>\r\n                            {`  ${profilePage.profile.contacts?.youtube}`}\r\n                        </a>}\r\n\r\n                        {profilePage.profile.contacts?.website &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.website}\r\n                            className={style.socialLink}>\r\n                            <GlobalOutlined/>\r\n                            {`  ${profilePage.profile.contacts?.website}`}\r\n                        </a>}\r\n\r\n                        {profilePage.profile.contacts?.mainLink &&\r\n                        <a\r\n                            href={profilePage.profile.contacts?.mainLink}\r\n                            className={style.socialLink}>\r\n                            <ShareAltOutlined/>\r\n                            {`  ${profilePage.profile.contacts?.mainLink}`}\r\n                        </a>}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileInfo","import React, {useState} from 'react';\r\nimport style from './Post.module.css'\r\nimport {PostType} from '../../../../redux/profilleReducer';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport defaultImg from \"../../../../assets/img/sveta.jpg\";\r\nimport {Avatar, Button, Card} from \"antd\";\r\nimport {HeartFilled, HeartOutlined} from \"@ant-design/icons\"\r\n\r\n\r\nfunction Post(props: PostType) {\r\n\r\n    const userImage = useSelector<AppStateType, string | undefined>(state => state.profilePage.profile.photos.small)\r\n    const userName = useSelector<AppStateType, string>(state => state.profilePage.profile.fullName)\r\n\r\n    const [like, setLike] = useState<boolean>(false)\r\n\r\n    return (\r\n        <Card title={\r\n            <div className={style.header}>\r\n                <Avatar size={'large'} src={userImage !== null ? userImage : defaultImg} alt={'userImage'}/>\r\n                <span>{userName}</span>\r\n            </div>\r\n        } className={style.item}>\r\n            <div>\r\n                {props.postContent}\r\n            </div>\r\n            <div className={style.likes}>\r\n                <span>{props.postLikes}</span>\r\n                <Button icon={like ? <HeartFilled/> : <HeartOutlined/>}\r\n                        onClick={() => setLike(!like)}\r\n                        shape={\"circle\"}\r\n                        type={'text'}/>\r\n            </div>\r\n\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\nimport style from './UserPosts.module.css'\r\nimport Post from \"./Post/Post\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addPost} from \"../../../redux/profilleReducer\";\r\nimport {Formik} from \"formik\";\r\nimport {Form, FormItem, Input, SubmitButton} from \"formik-antd\";\r\nimport {getCurrentUserId, getUserId, getUserPostsData} from \"../../../redux/Selectors\";\r\n\r\n\r\nfunction UserPosts() {\r\n\r\n    const postData = useSelector(getUserPostsData)\r\n\r\n\r\n    const currentUserId = useSelector(getCurrentUserId)\r\n    const userId = useSelector(getUserId)\r\n\r\n    const isCurrentProfileBelongsToUser = currentUserId === userId\r\n\r\n    let postsElement = postData.map(m =>\r\n        <Post\r\n            key={m.id}\r\n            postContent={m.postContent}\r\n            postLikes={m.postLikes}\r\n            id={m.id}\r\n        />)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.userNewPosts}>\r\n                <Formik\r\n                    initialValues={{\r\n                        post: ''\r\n                    }}\r\n                    onSubmit={(values, action) => {\r\n                        dispatch(addPost(values.post))\r\n                        action.resetForm()\r\n                    }}\r\n                    render={() => (\r\n                        <Form>\r\n                            {isCurrentProfileBelongsToUser && <div>\r\n                                <FormItem\r\n                                    label={'Your Post'}\r\n                                    name={'post'}\r\n                                >\r\n                                    <Input.TextArea name={'post'}/>\r\n                                </FormItem>\r\n                                <SubmitButton>Post</SubmitButton>\r\n                            </div>}\r\n                        </Form>\r\n                    )}\r\n                />\r\n            </div>\r\n            {postsElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserPosts;","import React, {useEffect} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getProfile, getStatus} from \"../../redux/profilleReducer\";\r\nimport {useParams} from 'react-router-dom';\r\nimport UserPosts from \"./UserPosts/UserPosts\";\r\nimport {getCurrentUserId} from \"../../redux/Selectors\";\r\n\r\n\r\ntype UserIdType = {\r\n    userId: string\r\n}\r\n\r\nexport const Profile = () => {\r\n\r\n    let params = useParams<UserIdType>()\r\n\r\n    let userId = params.userId\r\n\r\n    const currentUserId = useSelector(getCurrentUserId)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!userId || userId === \":userId\") {\r\n            userId = currentUserId;\r\n        }\r\n        dispatch(getProfile(userId))\r\n        dispatch(getStatus(userId))\r\n    }, [userId])\r\n\r\n    return (\r\n        <>\r\n            <ProfileInfo/>\r\n            <UserPosts/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\n\r\n\r\nfunction Music() {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\n\r\n\r\nfunction News() {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\n\r\nfunction Settings() {\r\n\r\n\r\n    return (\r\n        <>\r\n            Settings\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport style from \"./UserPage.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {followUnfollow, UserType} from \"../../../redux/usersReducer\";\r\nimport {Avatar, Button, Card} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingUsers} from \"../../../redux/Selectors\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\n\r\n\r\ntype UserPagePropsType = {\r\n    user: UserType\r\n}\r\n\r\nexport const UserPage = React.memo(({\r\n                                        user,\r\n                                        ...restProps\r\n                                    }: UserPagePropsType) => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const followingUsers = useSelector(getFollowingUsers)\r\n\r\n        return (\r\n            <Card\r\n                key={user.id}\r\n                className={style.descriptionWrapper}>\r\n                <div className={style.linksWrapper}>\r\n                    <NavLink to={'/social-network/profile/' + user.id}>\r\n                        <Avatar\r\n                            size={104}\r\n                            src={user.photos.small && user.photos.small}\r\n                            icon={!user.photos.small && <UserOutlined/>}\r\n                            alt={user.id + ' avatar'}/>\r\n                    </NavLink>\r\n                    <NavLink\r\n                        to={'/social-network/profile/' + user.id}\r\n                        className={style.nameLink}>\r\n                        {user.name}\r\n                    </NavLink>\r\n                </div>\r\n                <div className={style.description}>\r\n                    <p className={style.userStatus}>{user.status}</p>\r\n                    <Button\r\n                        onClick={() => dispatch(followUnfollow(user.id, user.followed))}\r\n                        disabled={followingUsers.some(id => id === user.id)}\r\n                        className={style.followBtn}\r\n                        type={!user.followed ? \"primary\" : \"default\"}\r\n                        ghost={!user.followed}\r\n                    >\r\n                        {user.followed ? 'Unfollow' : 'Follow'}\r\n                    </Button>\r\n                </div>\r\n            </Card>\r\n        )\r\n    }\r\n)\r\n\r\n","import React, {useEffect} from 'react';\r\nimport style from \"./UsersPage.module.css\";\r\nimport {getUsers} from \"../../redux/usersReducer\";\r\nimport {UserPage} from \"./UserPage/UserPage\";\r\nimport {Pagination} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentPage, getPageSize, getTotalUsersCount, getUsersData} from \"../../redux/Selectors\";\r\n\r\n\r\nconst UsersPage: React.FC = () => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const users = useSelector(getUsersData)\r\n        const currentPage = useSelector(getCurrentPage)\r\n        const pageSize = useSelector(getPageSize)\r\n        const totalCount = useSelector(getTotalUsersCount)\r\n\r\n        useEffect(() => {\r\n            dispatch(getUsers(currentPage, pageSize))\r\n        }, [])\r\n\r\n        return (\r\n            <div className={style.usersPage}>\r\n                <div className={style.usersList}>\r\n                    {users.map(m => <UserPage user={m} key={m.id}/>)}\r\n                </div>\r\n                <div className={style.pagination}>\r\n                    <Pagination\r\n                        current={currentPage}\r\n                        pageSize={pageSize}\r\n                        total={totalCount}\r\n                        responsive={true}\r\n                        pageSizeOptions={[]}\r\n                        onChange={(page) => dispatch(getUsers(page, pageSize))}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default UsersPage;","import React from \"react\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport {Profile} from \"../Profile/Profile\";\r\nimport Music from \"../Music/Music\";\r\nimport News from \"../News/News\";\r\nimport Settings from \"../Settings/Settings\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getIsAuth} from \"../../redux/Selectors\";\r\nimport UsersPage from \"../UsersPage/UsersPage\";\r\nimport {withSuspense} from \"../../HOC/withSuspense\";\r\n\r\n\r\nconst Dialogs = React.lazy(()=> import('../Dialogs/Dialogs'))\r\n\r\nconst SuspendedDialogs = withSuspense(Dialogs)\r\n\r\nexport const RoutingComponent: React.FC = () => {\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/social-network/login'}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Route path={\"/social-network/dialogs\"} render={() => <SuspendedDialogs/>}/>\r\n            <Route path={\"/social-network/profile/:userId?\"} render={() => <Profile/>}/>\r\n            <Route path={\"/social-network/users-page\"} render={() => <UsersPage/>}/>\r\n            <Route path={\"/social-network/music\"} component={Music}/>\r\n            <Route path={\"/social-network/news\"} component={News}/>\r\n            <Route path={\"/social-network/settings\"} component={Settings}/>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>){\r\n    return(props: WCP) =>{\r\n        return <React.Suspense fallback={<div>loading...</div>}>\r\n            <WrappedComponent {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Formik} from 'formik';\r\nimport {loginUser} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getIsAuth} from \"../../redux/Selectors\";\r\nimport {Checkbox, Form, FormItem, Input, SubmitButton} from \"formik-antd\";\r\nimport style from './Login.module.css'\r\n\r\n\r\nexport type FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/social-network/profile/:userId?'}/>\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false\r\n            }}\r\n            onSubmit={(values, actions) => {\r\n                dispatch(loginUser(values));\r\n                actions.resetForm()\r\n            }\r\n            }\r\n            validate={values => {\r\n                const errors: FormikErrorType = {};\r\n\r\n                if (!values.email) {\r\n                    errors.email = 'Required';\r\n                } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    errors.email = 'Invalid email address';\r\n                }\r\n\r\n                if (!values.password) {\r\n                    errors.password = 'Required';\r\n                } else if (!/^[A-Z0-9._%+-]{4,}$/i.test(values.password)) {\r\n                    errors.password = 'Password must be longer than 3 symbols';\r\n                }\r\n\r\n                return errors;\r\n            }}\r\n            render={() => (\r\n                <Form\r\n                    className={style.formWrapper}\r\n                >\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n\r\n                    <FormItem\r\n                        label=\"Email\"\r\n                        name={'email'}\r\n                    >\r\n                        <Input name={'email'}/>\r\n                    </FormItem>\r\n\r\n\r\n                    <FormItem\r\n                        label=\"Password\"\r\n                        name={'password'}\r\n                    >\r\n                        <Input.Password name={'password'}/>\r\n                    </FormItem>\r\n\r\n                    <FormItem\r\n                        name={'rememberMe'}\r\n                    >\r\n                        <Checkbox name={'rememberMe'}>RememberMe</Checkbox>\r\n                    </FormItem>\r\n                    <SubmitButton>Login</SubmitButton>\r\n                </Form>\r\n            )\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default Login;\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css'\r\nimport {Layout} from 'antd';\r\nimport LeftNavbar from \"./Components/Navbars/LeftNavbar/LeftNavbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoadingOutlined} from \"@ant-design/icons\";\r\nimport {HeaderComponent} from \"./Components/Header/HeaderComponent\";\r\nimport {authUser} from \"./redux/authReducer\";\r\nimport {getIsInitialized} from \"./redux/Selectors\";\r\nimport {RoutingComponent} from \"./Components/RoutingComponent/RoutingComponent\";\r\nimport {Route} from \"react-router-dom\";\r\nimport Login from \"./Components/Login/Login\";\r\n\r\nconst {Content, Footer} = Layout;\r\n\r\n\r\n\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const isInitialized = useSelector(getIsInitialized)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authUser())\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <LoadingOutlined style={{fontSize: \"48px\"}}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HeaderComponent/>\r\n\r\n            <Layout style={{minHeight: '100vh'}}>\r\n                <LeftNavbar/>\r\n                <Layout className=\"site-layout\">\r\n                    <Content style={{margin: '0 16px'}}>\r\n                        <div className=\"site-layout-background\">\r\n                            <RoutingComponent/>\r\n                            <Route path={\"/social-network/login\"} component={Login}/>\r\n                        </div>\r\n                    </Content>\r\n                    <Footer style={{textAlign: 'center'}}>Social Network ©2021 by Matumba125</Footer>\r\n                </Layout>\r\n            </Layout>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from \"./redux/reduxStore\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionWrapper\":\"UserPage_descriptionWrapper__3yZxE\",\"description\":\"UserPage_description__3B2J7\",\"linksWrapper\":\"UserPage_linksWrapper__2iY8T\",\"nameLink\":\"UserPage_nameLink__g8IOo\",\"followBtn\":\"UserPage_followBtn__Nvy2P\",\"userStatus\":\"UserPage_userStatus__tcupG\"};"],"sourceRoot":""}