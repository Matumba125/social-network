{"version":3,"sources":["Components/Profile/UserPosts/Post/Post.module.css","Components/UsersPage/UsersPage.module.css","Components/Header/Header.module.css","Components/Profile/UserPosts/UserPosts.module.css","Components/Dialogs/DialogItem/DialogItem.module.css","Components/Dialogs/Message/Message.module.css","Components/Login/Login.module.css","reportWebVitals.ts","assets/img/userAvatar.jpg","api/api.ts","redux/profilleReducer.ts","assets/img/dimych.jpg","assets/img/andrey.jpg","assets/img/sveta.jpg","redux/dialogsReducer.ts","redux/rightNavbarReducer.ts","redux/usersReducer.ts","redux/authReducer.ts","redux/reduxStore.ts","Components/Navbars/LeftNavbar/LeftNavbar.tsx","Components/Header/HeaderComponent.tsx","redux/Selectors.ts","Components/common/Preloader/Preloader.tsx","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/UserPosts/Post/Post.tsx","Components/Profile/UserPosts/UserPosts.tsx","Components/Profile/Profile.tsx","Components/Music/Music.tsx","Components/News/News.tsx","Components/Settings/Settings.tsx","Components/UsersPage/UserPage/UserPage.tsx","Components/UsersPage/UsersPage.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/RoutingComponent/RoutingComponent.tsx","Components/Login/Login.tsx","App.tsx","index.tsx","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/UsersPage/UserPage/UserPage.module.css","Components/Dialogs/Dialogs.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","UsersAPI","currentPage","pageSize","get","response","data","FollowAPI","id","delete","post","ProfileAPI","userId","status","put","AuthorizeAPI","formData","ADD_POST","SET_STATUS","SET_USER_PROFILE","initialState","profile","photos","large","myPhoto","small","fullName","aboutMe","userID","postsData","v1","postContent","postLikes","setStatus","newText","type","getProfile","dispatch","updateStatus","newStatus","console","log","resultCode","profileReducer","state","action","newPost","newPostText","ADD_MESSAGE","dialogsData","userName","avatar","dimych","andrey","sveta","messageData","messageText","newMessageText","dialogsReducer","newMessage","InitialState","contactsData","rightNavbarReducer","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","CHANGE_FETCHING_STATUS","CHANGE_RESPONSE_STATUS","users","totalCount","isFetching","responseInProgress","followingUsers","changeFetchingStatus","changeResponseStatus","getUsers","setCurrentPage","items","followUnfollow","following","unfollow","follow","usersReducer","map","m","followed","filter","email","login","isAuth","isInitialized","authReducer","rootReducer","combineReducers","profilePage","dialogsPage","rightNavbar","auth","store","createStore","applyMiddleware","thunkMiddleware","Sider","Layout","LeftNavbar","useState","collapsed","setCollapsed","collapsible","onCollapse","theme","mode","Item","icon","NotificationOutlined","to","UserOutlined","MailOutlined","TeamOutlined","CustomerServiceOutlined","SettingOutlined","HeaderComponent","React","memo","useDispatch","useSelector","useEffect","onClickHandler","useCallback","title","extra","className","style","userStatus","backgroundColor","onClick","color","getIsAuth","getIsInitialized","getProfilePage","getUsersData","getTotalUsersCount","getPageSize","getCurrentPage","getFollowingUsers","getDialogsPageData","getUserPostsData","antIcon","LoadingOutlined","fontSize","spin","Preloader","display","width","justifyContent","size","indicator","ProfileStatus","editMode","setEditMode","setNewStatus","height","autoFocus","onBlur","onKeyPress","e","key","onChange","currentTarget","value","onDoubleClick","ProfileInfo","infoContainer","mainInfo","ava","alt","src","defaultImg","description","Post","props","userImage","like","setLike","header","item","likes","HeartFilled","HeartOutlined","shape","UserPosts","postsElement","userNewPosts","initialValues","onSubmit","values","resetForm","render","label","name","TextArea","Profile","useParams","getStatus","Music","News","Settings","UserPage","user","userInfo","img","disabled","some","UserDeleteOutlined","UserAddOutlined","textDecoration","descriptionWrapper","textAlign","UsersPage","usersPage","pagination","current","total","page","DialogItem","path","dialog","Message","message","Dialogs","dialogsPageData","dialogsElement","u","messageElement","dialogs","dialogs_items","messages","addMessage","RoutingComponent","component","Login","password","rememberMe","actions","validate","errors","test","formWrapper","href","target","Password","Content","Footer","App","setUserData","finally","minHeight","margin","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2ce11547.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Post_header__3-fyf\",\"item\":\"Post_item__yAHA8\",\"likes\":\"Post_likes__1y5HF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPage\":\"UsersPage_usersPage__3wZfu\",\"selectedPage\":\"UsersPage_selectedPage__24X7K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userStatus\":\"Header_userStatus__3qXXs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userNewPosts\":\"UserPosts_userNewPosts__3Atrz\",\"form\":\"UserPosts_form__RbOpr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__1SljY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1Kit1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"Login_formWrapper__Qq-gU\",\"inputItem\":\"Login_inputItem__N37h_\",\"formItem\":\"Login_formItem__2fyxt\"};","import {ReportHandler} from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export default __webpack_public_path__ + \"static/media/userAvatar.9ca0a8b7.jpg\";","import axios from \"axios\";\r\nimport {FormikErrorType} from \"../Components/Login/Login\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'd5ee63b2-b8ea-4e76-b89c-c960812b3f51'\r\n    }\r\n});\r\n\r\nexport const UsersAPI = {\r\n    getUsers: (currentPage: number, pageSize: number) => {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const FollowAPI = {\r\n    unfollowUser: (id: string) => {\r\n        return instance.delete(`follow/${id}`,).then(response => response.data)\r\n    },\r\n    followUser: (id: string) => {\r\n        return instance.post(`follow/${id}`).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfileInfo: (userId: string) => {\r\n        return instance.get(`profile/${userId}`).then(response => response.data)\r\n    },\r\n    getStatus: (userId: string) => {\r\n        return instance.get(`profile/status/${userId}`);\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return instance.put(`profile/status`, {\r\n            status: status\r\n        })\r\n    },\r\n}\r\n\r\nexport const AuthorizeAPI = {\r\n    authorizeUser: () => {\r\n        return instance.get(`auth/me`).then(response => response.data)\r\n    },\r\n\r\n    loginUser: (formData: FormikErrorType) => {\r\n        return instance.post('auth/login', formData)\r\n    },\r\n    logoutUser: () => {\r\n        return instance.delete('auth/login')\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {ActionTypes} from \"./reduxStore\";\r\nimport {PhotosType} from \"./usersReducer\";\r\nimport myPhoto from \"../assets/img/userAvatar.jpg\"\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileAPI} from \"../api/api\";\r\n\r\n\r\nexport type PostType = {\r\n    id: string\r\n    postContent: string\r\n    postLikes: number\r\n}\r\n\r\ntype ContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\n\r\n\r\nexport type ProfileDataType = {\r\n    aboutMe: string\r\n    contacts?: ContactsType\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    userID: string\r\n    photos: PhotosType\r\n    fullName: string\r\n}\r\n\r\nexport type ProfileInitialStateType = {\r\n    profile: ProfileDataType\r\n    status: string\r\n    postsData: Array<PostType>\r\n}\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_STATUS = 'SET-STATUS';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\n\r\nlet initialState: ProfileInitialStateType = {\r\n    profile: {\r\n        photos: {\r\n            large: myPhoto,\r\n            small: myPhoto,\r\n        },\r\n        fullName: 'Nikita',\r\n        aboutMe: 'Zdarova',\r\n        userID: '18309',\r\n    },\r\n    status: '',\r\n    postsData: [\r\n        {\r\n            id: v1(),\r\n            postContent: \"Hello World !!!\",\r\n            postLikes: 15,\r\n\r\n        },\r\n        {\r\n            id: v1(),\r\n            postContent: \"It's my first post!!\",\r\n            postLikes: 28\r\n        }\r\n    ],\r\n}\r\n\r\nconst profileReducer = (state: ProfileInitialStateType = initialState,\r\n                        action: ActionTypes): ProfileInitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: v1(),\r\n                postContent: action.newPostText,\r\n                postLikes: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                postsData: [newPost, ...state.postsData],\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.newText\r\n            }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPost = (newPostText: string) => ({\r\n    type: ADD_POST,\r\n    newPostText,\r\n} as const)\r\n\r\n\r\nexport const setUserProfile = (profile: ProfileDataType) => ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n} as const)\r\n\r\nexport const setStatus = (newText: string) => ({type: SET_STATUS, newText} as const)\r\n\r\nexport const getProfile = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.getProfileInfo(userId).then(data => {\r\n            dispatch(setUserProfile(data))\r\n        });\r\n    }\r\n}\r\nexport const getStatus = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.getStatus(userId).then(response => {\r\n            dispatch(setStatus(response.data))\r\n        });\r\n    }\r\n}\r\nexport const updateStatus = (newStatus: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        ProfileAPI.updateStatus(newStatus).then(response => {\r\n            console.log(response)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(newStatus))\r\n            }\r\n        })\r\n    };\r\n}\r\n\r\n\r\nexport default profileReducer","export default __webpack_public_path__ + \"static/media/dimych.4cfb0ddb.jpg\";","export default __webpack_public_path__ + \"static/media/andrey.05d81a41.jpg\";","export default __webpack_public_path__ + \"static/media/sveta.2e2af972.jpg\";","import {v1} from \"uuid\";\r\nimport dimych from \"../assets/img/dimych.jpg\";\r\nimport andrey from \"../assets/img/andrey.jpg\";\r\nimport sveta from \"../assets/img/sveta.jpg\";\r\nimport {ActionTypes} from \"./reduxStore\";\r\n\r\n\r\nexport type DialogsItemPropsType = {\r\n    id: string\r\n    userName: string\r\n    avatar?: string\r\n}\r\n\r\nexport type MessagePropsType = {\r\n    messageText: string\r\n    id: string\r\n}\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\n\r\nconst ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {id: '2', userName: \"Dimych\", avatar: dimych},\r\n        {id: v1(), userName: \"Andrey\", avatar: andrey},\r\n        {id: v1(), userName: \"Sveta\", avatar: sveta},\r\n        {id: v1(), userName: \"Sasha\"},\r\n        {id: v1(), userName: \"Viktor\"},\r\n        {id: v1(), userName: \"Valera\"}\r\n    ] as Array<DialogsItemPropsType>,\r\n\r\n    messageData: [\r\n        {id: v1(), messageText: \"HI\"},\r\n        {id: v1(), messageText: \"Hello\"},\r\n        {id: v1(), messageText: \"YO\"}\r\n    ] as Array<MessagePropsType>,\r\n\r\n    newMessageText: ''\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsInitialStateType = initialState,\r\n                        action: ActionTypes): DialogsInitialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const newMessage: MessagePropsType = {\r\n                id: v1(),\r\n                messageText: action.newMessage\r\n            };\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData, newMessage],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const addMessage = (newMessage: string) => ({\r\n    type: ADD_MESSAGE,\r\n    newMessage\r\n} as const)\r\n\r\n\r\nexport default dialogsReducer","import {v1} from \"uuid\";\r\nimport dimych from \"../assets/img/dimych.jpg\";\r\nimport andrey from \"../assets/img/andrey.jpg\";\r\nimport sveta from \"../assets/img/sveta.jpg\";\r\nimport {ActionTypes} from \"./reduxStore\";\r\n\r\ntype ContactsDataType = {\r\n    id: string\r\n    userName: string\r\n    avatar: string\r\n}\r\n\r\nexport type RightNavInitialStateType = typeof InitialState\r\n\r\nconst InitialState = {\r\n    contactsData: [\r\n        {id: v1(), userName: \"Dimych\", avatar: dimych},\r\n        {id: v1(), userName: \"Andrey\", avatar: andrey},\r\n        {id: v1(), userName: \"Sveta\", avatar: sveta}\r\n    ] as Array<ContactsDataType>\r\n}\r\n\r\nexport const rightNavbarReducer = (state: RightNavInitialStateType = InitialState, action: ActionTypes): RightNavInitialStateType => {\r\n\r\n    return state\r\n}\r\n\r\nexport default rightNavbarReducer","import {ActionTypes} from \"./reduxStore\";\r\nimport {FollowAPI, UsersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n/*type AddressType ={\r\n    country: string\r\n    city: string\r\n}*/\r\n\r\nexport type PhotosType = {\r\n    large: string\r\n    small: string\r\n}\r\n\r\nexport type UserType = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n    followed: boolean\r\n    status: string\r\n    photos: PhotosType\r\n    /*address: AddressType*/\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    responseInProgress: boolean\r\n    followingUsers: Array<string>\r\n}\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\r\nconst CHANGE_FETCHING_STATUS = 'CHANGE-FETCHING-STATUS';\r\nconst CHANGE_RESPONSE_STATUS = 'CHANGE-RESPONSE-STATUS';\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    responseInProgress: true,\r\n    followingUsers: [],\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState,\r\n                      action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(m =>\r\n                    m.id === action.id ? {...m, followed: true} : m),\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(m =>\r\n                    m.id === action.id ? {...m, followed: false} : m)\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case  SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n        case CHANGE_FETCHING_STATUS: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case CHANGE_RESPONSE_STATUS: {\r\n            return {\r\n                ...state,\r\n                followingUsers: action.responseInProgress\r\n                    ? [...state.followingUsers, action.id]\r\n                    : state.followingUsers.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const follow = (id: string) => ({\r\n    type: FOLLOW,\r\n    id\r\n} as const)\r\nexport const unfollow = (id: string) => ({\r\n    type: UNFOLLOW,\r\n    id\r\n} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({\r\n    type: SET_USERS,\r\n    users\r\n} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage\r\n} as const)\r\nexport const setTotalUsersCount = (totalCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalCount\r\n} as const)\r\nexport const changeFetchingStatus = (isFetching: boolean) => ({\r\n    type: CHANGE_FETCHING_STATUS,\r\n    isFetching\r\n} as const)\r\nexport const changeResponseStatus = (responseInProgress: boolean, id: string) => ({\r\n    type: CHANGE_RESPONSE_STATUS,\r\n    responseInProgress,\r\n    id,\r\n} as const)\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        dispatch(setCurrentPage(currentPage))\r\n        dispatch(changeFetchingStatus(true))\r\n        UsersAPI.getUsers(currentPage, pageSize)\r\n            .then(data => {\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setTotalUsersCount(data.totalCount))\r\n                dispatch(changeFetchingStatus(false))\r\n\r\n            });\r\n    }\r\n}\r\n\r\nexport const followUnfollow = (id: string, following: boolean) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        dispatch(changeResponseStatus(true, id))\r\n        if (following) {\r\n            FollowAPI.unfollowUser(id)\r\n                .then(data => {\r\n                    if (data.resultCode === 0) {\r\n                        dispatch(unfollow(id))\r\n                        dispatch(changeResponseStatus(false, id))\r\n                    }\r\n                })\r\n        } else {\r\n            FollowAPI.followUser(id)\r\n                .then(data => {\r\n                    if (data.resultCode === 0) {\r\n                        dispatch(follow(id))\r\n                        dispatch(changeResponseStatus(false, id))\r\n                    }\r\n                })\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default usersReducer","import {ActionTypes} from \"./reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AuthorizeAPI} from \"../api/api\";\r\nimport {FormikErrorType} from \"../Components/Login/Login\";\r\n\r\n\r\nexport type DataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n}\r\n\r\nexport type AuthInitialStateType = {\r\n    data: DataType\r\n    isAuth: boolean\r\n    isInitialized: boolean\r\n}\r\n\r\nlet initialState: AuthInitialStateType = {\r\n    data: {\r\n        id: null,\r\n        email: null,\r\n        login: null,\r\n    },\r\n    isAuth: false,\r\n    isInitialized: false\r\n}\r\n\r\nconst authReducer = (state: AuthInitialStateType = initialState,\r\n                     action: ActionTypes): AuthInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-USER-DATA':\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                isAuth: true,\r\n            }\r\n        case 'USER_BEEN_LOGINED':\r\n            return {\r\n                ...state,\r\n                isAuth: true\r\n            }\r\n        case 'USER_BEEN_LOGINED_OUT':\r\n            return {\r\n                ...state,\r\n                isAuth: false\r\n            }\r\n        case 'SET-APP-INITIALIZED':\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserData = (data: DataType) => ({\r\n    type: 'SET-USER-DATA',\r\n    data\r\n} as const)\r\nexport const setAppInitialized = (isInitialized: boolean) => ({\r\n    type: 'SET-APP-INITIALIZED',\r\n    isInitialized\r\n} as const)\r\n\r\nexport const userBeenLogined = () => ({\r\n    type: 'USER_BEEN_LOGINED'\r\n} as const)\r\n\r\nexport const userBeenLoginedOut = () => ({\r\n    type: 'USER_BEEN_LOGINED_OUT'\r\n} as const)\r\n\r\n\r\nexport const authUser = () => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        AuthorizeAPI.authorizeUser().then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(setUserData(data.data))\r\n            }\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppInitialized(true))\r\n            })\r\n    }\r\n}\r\n\r\nexport const loginUser = (formData: FormikErrorType) => {\r\n    return (dispatch: Dispatch) => {\r\n        AuthorizeAPI.loginUser(formData).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(userBeenLogined())\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const logoutUser = () => {\r\n    return (dispatch: Dispatch) => {\r\n        AuthorizeAPI.logoutUser().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(userBeenLoginedOut())\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default authReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {addPost, setStatus, setUserProfile} from \"./profilleReducer\";\r\nimport dialogsReducer, {addMessage} from \"./dialogsReducer\";\r\nimport rightNavbarReducer from \"./rightNavbarReducer\";\r\nimport usersReducer, {\r\n    changeFetchingStatus,\r\n    changeResponseStatus,\r\n    follow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    unfollow\r\n} from \"./usersReducer\";\r\nimport authReducer, {setAppInitialized, setUserData, userBeenLogined, userBeenLoginedOut} from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\n\r\nexport type ActionTypes =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof addMessage> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof changeFetchingStatus> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setUserData> |\r\n    ReturnType<typeof changeResponseStatus> |\r\n    ReturnType<typeof setStatus> |\r\n    ReturnType<typeof userBeenLogined> |\r\n    ReturnType<typeof userBeenLoginedOut>|\r\n    ReturnType<typeof setAppInitialized>\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    rightNavbar: rightNavbarReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store","import React, {useState} from 'react';\r\nimport {Layout, Menu} from \"antd\";\r\nimport {\r\n    CustomerServiceOutlined,\r\n    MailOutlined,\r\n    NotificationOutlined,\r\n    SettingOutlined,\r\n    TeamOutlined,\r\n    UserOutlined\r\n} from \"@ant-design/icons\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst {Sider} = Layout;\r\n\r\nfunction LeftNavbar() {\r\n\r\n    const [collapsed, setCollapsed] = useState<boolean>(true)\r\n\r\n    const onCollapse = () => {\r\n        setCollapsed(!collapsed)\r\n    }\r\n\r\n    return (\r\n        <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\r\n            <Menu theme=\"dark\" mode=\"inline\">\r\n                <Menu.Item key=\"1\" icon={<NotificationOutlined/>}>\r\n                    <Link to=\"/social-network/news/\">News</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<UserOutlined/>}>\r\n                    <Link to=\"/social-network/profile/18309\">Profile</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" icon={<MailOutlined/>}>\r\n                    <Link to=\"/social-network/dialogs/\">Messages</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" icon={<TeamOutlined/>}>\r\n                    <Link to=\"/social-network/users-page\">Developers</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\" icon={<CustomerServiceOutlined/>}>\r\n                    <Link to=\"/social-network/music/\">Music</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"6\" icon={<SettingOutlined/>}>\r\n                    <Link to=\"/social-network/settings/\">Settings</Link>\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Sider>\r\n    );\r\n}\r\n\r\nexport default LeftNavbar;","import React, {useCallback, useEffect} from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {logoutUser} from \"../../redux/authReducer\";\r\nimport {Avatar, Button, PageHeader} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport style from './Header.module.css'\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\nexport const HeaderComponent = React.memo(() => {\r\n\r\n        const dispatch = useDispatch()\r\n        const isAuth = useSelector<AppStateType>(state => state.auth.isAuth)\r\n        const login = useSelector<AppStateType>(state => state.auth.data.login)\r\n\r\n        useEffect(()=>{},[isAuth, login])\r\n\r\n\r\n        const onClickHandler = useCallback(() => {\r\n            dispatch(logoutUser())\r\n        }, [dispatch])\r\n\r\n        return (\r\n            <PageHeader title={'Social Network'} extra={\r\n                isAuth ?\r\n                    <div className={style.userStatus}>\r\n                        <NavLink to=\"/social-network/profile\">\r\n                            <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                            {login}\r\n                        </NavLink>\r\n                        <Button onClick={onClickHandler}>Log Out</Button>\r\n                    </div>\r\n                    : <NavLink to=\"/social-network/login\">\r\n                        <Button color=\"primary\">Login</Button>\r\n                    </NavLink>\r\n            }/>\r\n        )\r\n    }\r\n)","import {AppStateType} from \"./reduxStore\";\r\nimport {PostType, ProfileInitialStateType} from \"./profilleReducer\";\r\nimport {UserType} from \"./usersReducer\";\r\nimport {DialogsInitialStateType} from \"./dialogsReducer\";\r\n\r\nexport const getIsAuth = (state: AppStateType):boolean=>{\r\n    return state.auth.isAuth\r\n }\r\n export const getIsInitialized = (state: AppStateType):boolean=>{\r\n    return state.auth.isInitialized\r\n }\r\n\r\n export const getProfilePage = (state: AppStateType):ProfileInitialStateType=>{\r\n    return state.profilePage\r\n }\r\n export const getUserId = (state: AppStateType):string=>{\r\n    return state.profilePage.profile.userID\r\n }\r\n\r\n type UsersType = Array<UserType>\r\n\r\n export const getUsersData = (state: AppStateType): UsersType=>{\r\n    return state.users.users\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType): number =>{\r\n    return state.users.totalCount\r\n}\r\nexport const getPageSize= (state: AppStateType): number =>{\r\n    return state.users.pageSize\r\n}\r\nexport const getCurrentPage= (state: AppStateType): number =>{\r\n    return state.users.currentPage\r\n}\r\nexport const getFollowingUsers= (state: AppStateType): string[] =>{\r\n    return state.users.followingUsers\r\n}\r\nexport const getDialogsPageData= (state: AppStateType): DialogsInitialStateType =>{\r\n    return state.dialogsPage\r\n}\r\nexport const getUserPostsData= (state: AppStateType): PostType[] =>{\r\n    return state.profilePage.postsData\r\n}\r\n\r\n","import {Space, Spin} from 'antd';\r\nimport React from 'react';\r\nimport {LoadingOutlined} from \"@ant-design/icons\";\r\n\r\nconst antIcon = <LoadingOutlined style={{fontSize: 48}} spin/>\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <Space style={{display: 'flex', width: '100%', justifyContent: \"center\"}} size=\"large\">\r\n            <Spin indicator={antIcon}/>\r\n        </Space>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateStatus} from \"../../../../redux/profilleReducer\";\r\nimport {Input} from \"antd\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n}\r\n\r\nexport const ProfileStatus = React.memo(({status, ...restProps}: ProfileStatusPropsType) => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const [editMode, setEditMode] = useState<boolean>(false)\r\n        const [newStatus, setNewStatus] = useState<string>(status)\r\n\r\n        const onDoubleClickHandler = () => {\r\n            setEditMode(true)\r\n            setNewStatus(status)\r\n        }\r\n\r\n        const onBlurHandler = () => {\r\n            setEditMode(false)\r\n            dispatch(updateStatus(newStatus))\r\n        }\r\n\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(false)\r\n                dispatch(updateStatus(newStatus))\r\n            }\r\n        }\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setNewStatus(e.currentTarget.value)\r\n        }\r\n\r\n        return (\r\n            <div style={{height: '32px'}}>\r\n                {!editMode ?\r\n                    <span onDoubleClick={onDoubleClickHandler}>{status ? status : '-----'}</span> :\r\n                    <Input autoFocus={true}\r\n                           onBlur={onBlurHandler}\r\n                           onKeyPress={onKeyPressHandler}\r\n                           onChange={onChangeHandler}\r\n                           value={newStatus}>\r\n                    </Input>\r\n                }\r\n            </div>\r\n        );\r\n\r\n    }\r\n)","import React from \"react\";\r\nimport defaultImg from \"../../../assets/img/sveta.jpg\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport style from \"./ProfileInfo.module.css\"\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getProfilePage} from \"../../../redux/Selectors\";\r\n\r\nfunction ProfileInfo() {\r\n\r\n    const profilePage = useSelector(getProfilePage)\r\n\r\n    if (!profilePage.profile) {\r\n        return <Preloader/>\r\n    } else {\r\n\r\n        return (\r\n            <div className={style.infoContainer}>\r\n                <div className={style.mainInfo}>\r\n                    <img className={style.ava} alt={`${profilePage.profile.userID} user ava`}\r\n                         src={profilePage.profile.photos.small !== null ? profilePage.profile.photos.small : defaultImg}/>\r\n                    <div className={style.description}>\r\n                        <span className={style.fullName}>{profilePage.profile.fullName}</span>\r\n                        <ProfileStatus status={profilePage.status}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileInfo","import React, {useState} from 'react';\r\nimport style from './Post.module.css'\r\nimport {PostType} from '../../../../redux/profilleReducer';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport defaultImg from \"../../../../assets/img/sveta.jpg\";\r\nimport {Avatar, Button, Card} from \"antd\";\r\nimport {HeartFilled, HeartOutlined} from \"@ant-design/icons\"\r\n\r\n\r\nfunction Post(props: PostType) {\r\n\r\n    const userImage = useSelector<AppStateType, string>(state => state.profilePage.profile.photos.small)\r\n    const userName = useSelector<AppStateType, string>(state => state.profilePage.profile.fullName)\r\n\r\n    const [like, setLike] = useState<boolean>(false)\r\n\r\n    return (\r\n        <Card title={\r\n            <div className={style.header}>\r\n                <Avatar size={'large'} src={userImage !== null ? userImage : defaultImg} alt={'userImage'}/>\r\n                <span>{userName}</span>\r\n            </div>\r\n        } className={style.item}>\r\n            <div>\r\n                {props.postContent}\r\n            </div>\r\n            <div className={style.likes}>\r\n                <span>{props.postLikes}</span>\r\n                <Button icon={like ? <HeartFilled/> : <HeartOutlined/>}\r\n                        onClick={() => setLike(!like)}\r\n                        shape={\"circle\"}\r\n                        type={'text'}/>\r\n            </div>\r\n\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\nimport style from './UserPosts.module.css'\r\nimport Post from \"./Post/Post\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addPost} from \"../../../redux/profilleReducer\";\r\nimport {Formik} from \"formik\";\r\nimport {Form, FormItem, Input, SubmitButton} from \"formik-antd\";\r\nimport {getUserPostsData} from \"../../../redux/Selectors\";\r\n\r\n\r\n\r\n\r\nfunction UserPosts() {\r\n\r\n    const postData = useSelector(getUserPostsData)\r\n\r\n\r\n    let postsElement = postData.map(m =>\r\n        <Post\r\n            key={m.id}\r\n            postContent={m.postContent}\r\n            postLikes={m.postLikes}\r\n            id={m.id}\r\n        />)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.userNewPosts}>\r\n                <Formik\r\n                    initialValues={{\r\n                        post: ''\r\n                    }}\r\n                    onSubmit={(values, action) => {\r\n                        dispatch(addPost(values.post))\r\n                        action.resetForm()\r\n                    }}\r\n                    render={() => (\r\n                        <Form>\r\n                            <FormItem\r\n                                label={'Your Post'}\r\n                                name={'post'}\r\n                            >\r\n                                <Input.TextArea name={'post'}/>\r\n                            </FormItem>\r\n                            <SubmitButton>Post</SubmitButton>\r\n                        </Form>\r\n                    )}\r\n                />\r\n            </div>\r\n            {postsElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserPosts;","import React, {useEffect} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getProfile, getStatus} from \"../../redux/profilleReducer\";\r\nimport {useParams} from 'react-router-dom';\r\nimport UserPosts from \"./UserPosts/UserPosts\";\r\n\r\n\r\ntype UserIdType = {\r\n    userId: string\r\n}\r\n\r\nexport const Profile = () => {\r\n\r\n    let params = useParams<UserIdType>()\r\n\r\n    let userId = params.userId\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        if (!userId ||userId === \":userId\") {\r\n            userId = '18309';\r\n        }\r\n        dispatch(getProfile(userId))\r\n        dispatch(getStatus(userId))\r\n    },[userId])\r\n\r\n    return (\r\n        <>\r\n            <ProfileInfo/>\r\n            <UserPosts/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\n\r\n\r\nfunction Music() {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\n\r\n\r\nfunction News() {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\n\r\nfunction Settings() {\r\n\r\n\r\n    return (\r\n        <>\r\n            Settings\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport style from \"./UserPage.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport defaultImg from \"../../../assets/img/sveta.jpg\";\r\nimport {followUnfollow, UserType} from \"../../../redux/usersReducer\";\r\nimport {Button, Card} from \"antd\";\r\nimport {UserAddOutlined, UserDeleteOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingUsers} from \"../../../redux/Selectors\";\r\n\r\n\r\ntype UserPagePropsType = {\r\n    user: UserType\r\n}\r\n\r\nexport const UserPage = React.memo(({\r\n                                        user,\r\n                                        ...restProps\r\n                                    }: UserPagePropsType) => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const followingUsers = useSelector(getFollowingUsers)\r\n\r\n        return (\r\n            <div className={style.userInfo} key={user.id}>\r\n                <div className={style.ava}>\r\n                    <NavLink to={'/social-network/profile/' + user.id}\r\n                    >\r\n                        <img src={user.photos.small !== null ? user.photos.small : defaultImg}\r\n                             alt={user.id + ' avatar'}\r\n                             className={style.img}/>\r\n                    </NavLink>\r\n                    <Button size={'small'} onClick={() => dispatch(followUnfollow(user.id, user.followed))}\r\n                            disabled={followingUsers.some(id => id === user.id)}\r\n                            icon={!user.followed ? <UserAddOutlined/> : <UserDeleteOutlined/>}\r\n                            shape={\"circle\"}\r\n                            type={'text'}\r\n                    >\r\n                    </Button>\r\n                </div>\r\n                <Card title={<NavLink to={'/social-network/profile/'+ user.id}\r\n                                      style={{textDecoration: 'none', color: 'black'}}>{user.name}</NavLink>}\r\n                      className={style.descriptionWrapper}>\r\n\r\n                    <div className={style.description} style={{fontSize: \"13px\"}}>\r\n                        \" {user.status} \"\r\n                        <div style={{fontSize: \"15px\", textAlign: 'center'}}>\r\n                            <div>\r\n                                Belarus,\r\n                            </div>\r\n                            <div>\r\n                                Minsk\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n\r\n","import React from 'react';\r\nimport style from \"./UsersPage.module.css\";\r\nimport {getUsers} from \"../../redux/usersReducer\";\r\nimport {UserPage} from \"./UserPage/UserPage\";\r\nimport {Pagination} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentPage, getPageSize, getTotalUsersCount, getUsersData} from \"../../redux/Selectors\";\r\n\r\n\r\nconst UsersPage: React.FC = () => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const users = useSelector(getUsersData)\r\n        const currentPage = useSelector(getCurrentPage)\r\n        const pageSize = useSelector(getPageSize)\r\n        const totalCount = useSelector(getTotalUsersCount)\r\n\r\n        return (\r\n            <div className={style.usersPage}>\r\n                {users.map(m => <UserPage user={m} key={m.id}/>)}\r\n                <div className={style.pagination}>\r\n                        <Pagination\r\n                            current={currentPage}\r\n                            pageSize={pageSize}\r\n                            total={totalCount}\r\n                            onChange={(page)=>dispatch(getUsers(page, pageSize))}\r\n                        />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default UsersPage;","import React from \"react\";\r\nimport style from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogsItemPropsType} from \"../../../redux/dialogsReducer\";\r\n\r\n\r\nconst DialogItem: React.FC<DialogsItemPropsType> = (props) => {\r\n    let path = \"/social-network/profile/\" + props.id;\r\n\r\n    return (\r\n        <div className={style.dialog}>\r\n            {props.avatar ? <img src={props.avatar} alt={'userImage'}/> : ''}\r\n            <NavLink to={path}>{props.userName}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport style from \"./Message.module.css\";\r\nimport {MessagePropsType} from \"../../../redux/dialogsReducer\";\r\n\r\nconst Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={style.message}>{props.messageText}</div>\r\n    );\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport style from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addMessage} from \"../../redux/dialogsReducer\";\r\nimport {getDialogsPageData} from \"../../redux/Selectors\";\r\nimport {Formik} from \"formik\";\r\nimport {Form, FormItem, Input, SubmitButton} from \"formik-antd\";\r\n\r\nconst Dialogs: React.FC = (props) => {\r\n\r\n    let dialogsPageData = useSelector(getDialogsPageData)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let dialogsElement = dialogsPageData.dialogsData.map(u => <DialogItem key={u.id} userName={u.userName} id={u.id}\r\n                                                                          avatar={u.avatar}/>)\r\n\r\n    let messageElement = dialogsPageData.messageData.map(m => <Message key={m.id} messageText={m.messageText}\r\n                                                                       id={m.id}/>)\r\n\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogs_items}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={style.messages}>\r\n                {messageElement}\r\n                <div className={style.addMessage}>\r\n                    <Formik\r\n                        initialValues={{\r\n                            message: ''\r\n                        }}\r\n                        onSubmit={(values, action) => {\r\n                            dispatch(addMessage(values.message))\r\n                            action.resetForm()\r\n                        }}\r\n                        render={() => (\r\n                            <Form>\r\n                                <FormItem\r\n                                    label={'Message'}\r\n                                    name={'message'}\r\n                                >\r\n                                    <Input name={'message'}/>\r\n                                </FormItem>\r\n                                <SubmitButton>Send</SubmitButton>\r\n                            </Form>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport {Profile} from \"../Profile/Profile\";\r\nimport Music from \"../Music/Music\";\r\nimport News from \"../News/News\";\r\nimport Settings from \"../Settings/Settings\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getIsAuth} from \"../../redux/Selectors\";\r\nimport UsersPage from \"../UsersPage/UsersPage\";\r\nimport Dialogs from \"../Dialogs/Dialogs\";\r\n\r\nexport const RoutingComponent: React.FC = () => {\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    if(!isAuth){\r\n        return <Redirect to={'/social-network/login'}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Route path={\"/social-network/dialogs\"} render={() => <Dialogs/>}/>\r\n\r\n            <Route path={\"/social-network/profile/:userId?\"} render={() => <Profile />}/>\r\n\r\n            <Route path={\"/social-network/users-page\"} render={() => <UsersPage/>}/>\r\n\r\n\r\n            <Route path={\"/social-network/music\"} component={Music}/>\r\n            <Route path={\"/social-network/news\"} component={News}/>\r\n            <Route path={\"/social-network/settings\"} component={Settings}/>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Formik} from 'formik';\r\nimport {loginUser} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getIsAuth} from \"../../redux/Selectors\";\r\nimport {Checkbox, Form, FormItem, Input, SubmitButton} from \"formik-antd\";\r\nimport style from './Login.module.css'\r\n\r\n\r\nexport type FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/social-network/profile/:userId?'}/>\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false\r\n            }}\r\n            onSubmit={(values, actions) => {\r\n                dispatch(loginUser(values));\r\n                actions.resetForm()\r\n            }\r\n            }\r\n            validate={values => {\r\n                const errors: FormikErrorType = {};\r\n\r\n                if (!values.email) {\r\n                    errors.email = 'Required';\r\n                } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                    errors.email = 'Invalid email address';\r\n                }\r\n\r\n                if (!values.password) {\r\n                    errors.password = 'Required';\r\n                } else if (!/^[A-Z0-9._%+-]{4,}$/i.test(values.password)) {\r\n                    errors.password = 'Password must be longer than 3 symbols';\r\n                }\r\n\r\n                return errors;\r\n            }}\r\n            render={() => (\r\n                <Form\r\n                    className={style.formWrapper}\r\n                >\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n\r\n                    <FormItem\r\n                        label=\"Email\"\r\n                        name={'email'}\r\n                    >\r\n                        <Input name={'email'}/>\r\n                    </FormItem>\r\n\r\n\r\n                    <FormItem\r\n                        label=\"Password\"\r\n                        name={'password'}\r\n                    >\r\n                        <Input.Password name={'password'}/>\r\n                    </FormItem>\r\n\r\n                    <FormItem\r\n                        name={'rememberMe'}\r\n                    >\r\n                        <Checkbox name={'rememberMe'}>RememberMe</Checkbox>\r\n                    </FormItem>\r\n                    <SubmitButton>Login</SubmitButton>\r\n                </Form>\r\n            )\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default Login;\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css'\r\nimport {Layout} from 'antd';\r\nimport LeftNavbar from \"./Components/Navbars/LeftNavbar/LeftNavbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoadingOutlined} from \"@ant-design/icons\";\r\nimport {HeaderComponent} from \"./Components/Header/HeaderComponent\";\r\nimport {authUser} from \"./redux/authReducer\";\r\nimport {getIsInitialized} from \"./redux/Selectors\";\r\nimport {RoutingComponent} from \"./Components/RoutingComponent/RoutingComponent\";\r\nimport {Route} from \"react-router-dom\";\r\nimport Login from \"./Components/Login/Login\";\r\n\r\nconst {Content, Footer} = Layout;\r\n\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const isInitialized = useSelector(getIsInitialized)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authUser())\r\n    }, [])\r\n\r\n\r\n    if(!isInitialized){\r\n        return <LoadingOutlined style={{fontSize: \"48px\"}} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HeaderComponent/>\r\n\r\n            <Layout style={{minHeight: '100vh'}}>\r\n                <LeftNavbar/>\r\n                <Layout className=\"site-layout\">\r\n                    <Content style={{margin: '0 16px'}}>\r\n                        <div className=\"site-layout-background\">\r\n                            <RoutingComponent/>\r\n                            <Route path={\"/social-network/login\"} component={Login}/>\r\n                        </div>\r\n                    </Content>\r\n                    <Footer style={{textAlign: 'center'}}>Social Network ©2021 by Matumba125</Footer>\r\n                </Layout>\r\n            </Layout>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from \"./redux/reduxStore\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoContainer\":\"ProfileInfo_infoContainer__1BEBN\",\"mainInfo\":\"ProfileInfo_mainInfo__150Qa\",\"description\":\"ProfileInfo_description__np7mD\",\"fullName\":\"ProfileInfo_fullName__1BFQY\",\"ava\":\"ProfileInfo_ava__3pWAT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userInfo\":\"UserPage_userInfo__1DlE8\",\"img\":\"UserPage_img__3eEIc\",\"ava\":\"UserPage_ava__XYoxP\",\"descriptionWrapper\":\"UserPage_descriptionWrapper__1qNFJ\",\"description\":\"UserPage_description__2mX2r\",\"item\":\"UserPage_item__2WanN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__14t2F\",\"dialogs_items\":\"Dialogs_dialogs_items__2Qi4m\",\"messages\":\"Dialogs_messages__3ydIv\",\"addMessage\":\"Dialogs_addMessage__1GQ4N\"};"],"sourceRoot":""}